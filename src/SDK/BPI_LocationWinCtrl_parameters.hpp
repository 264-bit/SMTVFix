#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_LocationWinCtrl

#include "Basic.hpp"

#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.Open
// 0x0002 (0x0002 - 0x0000)
struct BPI_LocationWinCtrl_C_Open final
{
public:
	E_LOCATION_WINDOW_TYPE                        InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_LocationWinCtrl_C_Open) == 0x000001, "Wrong alignment on BPI_LocationWinCtrl_C_Open");
static_assert(sizeof(BPI_LocationWinCtrl_C_Open) == 0x000002, "Wrong size on BPI_LocationWinCtrl_C_Open");
static_assert(offsetof(BPI_LocationWinCtrl_C_Open, InType) == 0x000000, "Member 'BPI_LocationWinCtrl_C_Open::InType' has a wrong offset!");
static_assert(offsetof(BPI_LocationWinCtrl_C_Open, PlayAnim) == 0x000001, "Member 'BPI_LocationWinCtrl_C_Open::PlayAnim' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.Close
// 0x0001 (0x0001 - 0x0000)
struct BPI_LocationWinCtrl_C_Close final
{
public:
	bool                                          PlayAnim;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_LocationWinCtrl_C_Close) == 0x000001, "Wrong alignment on BPI_LocationWinCtrl_C_Close");
static_assert(sizeof(BPI_LocationWinCtrl_C_Close) == 0x000001, "Wrong size on BPI_LocationWinCtrl_C_Close");
static_assert(offsetof(BPI_LocationWinCtrl_C_Close, PlayAnim) == 0x000000, "Member 'BPI_LocationWinCtrl_C_Close::PlayAnim' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setFacilityName
// 0x0018 (0x0018 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_setFacilityName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_setFacilityName) == 0x000008, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_setFacilityName");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_setFacilityName) == 0x000018, "Wrong size on BPI_LocationWinCtrl_C_BPI_setFacilityName");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_setFacilityName, InName) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_setFacilityName::InName' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_getCurrentName
// 0x0018 (0x0018 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_getCurrentName final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_getCurrentName) == 0x000008, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_getCurrentName");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_getCurrentName) == 0x000018, "Wrong size on BPI_LocationWinCtrl_C_BPI_getCurrentName");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_getCurrentName, OutText) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_getCurrentName::OutText' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setTokyoLargeMapPlaceName
// 0x0018 (0x0018 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName) == 0x000008, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName) == 0x000018, "Wrong size on BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName, InName) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName::InName' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setMapName
// 0x0018 (0x0018 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_setMapName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_setMapName) == 0x000008, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_setMapName");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_setMapName) == 0x000018, "Wrong size on BPI_LocationWinCtrl_C_BPI_setMapName");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_setMapName, InName) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_setMapName::InName' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setAutomapName
// 0x0018 (0x0018 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_setAutomapName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_setAutomapName) == 0x000008, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_setAutomapName");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_setAutomapName) == 0x000018, "Wrong size on BPI_LocationWinCtrl_C_BPI_setAutomapName");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_setAutomapName, InName) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_setAutomapName::InName' has a wrong offset!");

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_getState
// 0x0001 (0x0001 - 0x0000)
struct BPI_LocationWinCtrl_C_BPI_getState final
{
public:
	E_LOCATION_WINDOW_STATE                       State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_LocationWinCtrl_C_BPI_getState) == 0x000001, "Wrong alignment on BPI_LocationWinCtrl_C_BPI_getState");
static_assert(sizeof(BPI_LocationWinCtrl_C_BPI_getState) == 0x000001, "Wrong size on BPI_LocationWinCtrl_C_BPI_getState");
static_assert(offsetof(BPI_LocationWinCtrl_C_BPI_getState, State) == 0x000000, "Member 'BPI_LocationWinCtrl_C_BPI_getState::State' has a wrong offset!");

}

