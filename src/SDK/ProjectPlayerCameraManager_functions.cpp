#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectPlayerCameraManager

#include "Basic.hpp"

#include "ProjectPlayerCameraManager_classes.hpp"
#include "ProjectPlayerCameraManager_parameters.hpp"


namespace SDK
{

// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.ExecuteUbergraph_ProjectPlayerCameraManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::ExecuteUbergraph_ProjectPlayerCameraManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "ExecuteUbergraph_ProjectPlayerCameraManager");

	Params::ProjectPlayerCameraManager_C_ExecuteUbergraph_ProjectPlayerCameraManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.DoManual_PlayerCameraInside
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::DoManual_PlayerCameraInside()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "DoManual_PlayerCameraInside");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraSlide_IN
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraSlide_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraSlide_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCAmeraSlide_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCAmeraSlide_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCAmeraSlide_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraGrip_IN
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraGrip_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraGrip_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraGrip_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraGrip_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraGrip_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.SetForceKeepMeshesVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ForceKeepVisible                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProjectPlayerCameraManager_C::SetForceKeepMeshesVisible(bool Param_ForceKeepVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "SetForceKeepMeshesVisible");

	Params::ProjectPlayerCameraManager_C_SetForceKeepMeshesVisible Parms{};

	Parms.Param_ForceKeepVisible = Param_ForceKeepVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.RequestFinishCameraUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::RequestFinishCameraUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "RequestFinishCameraUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraForce_IN
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::MapCameraForce_IN(float FOV, float Distance, float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraForce_IN");

	Params::ProjectPlayerCameraManager_C_MapCameraForce_IN Parms{};

	Parms.FOV = FOV;
	Parms.Distance = Distance;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraForce_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraForce_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraForce_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AProjectPlayerCameraManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraDush_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraDush_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraDush_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraDush_IN
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraDush_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraDush_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraAttack_IN
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraAttack_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraAttack_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "ReceiveTick");

	Params::ProjectPlayerCameraManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraAttack_IN_FADE
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraAttack_IN_FADE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraAttack_IN_FADE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.MapCameraAttack_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::MapCameraAttack_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "MapCameraAttack_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.SetNowCameraPos
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::SetNowCameraPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "SetNowCameraPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.GetNowCameraPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Param_Now_FOV                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Now_Distance                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_Now_Height                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::GetNowCameraPos(float* Param_Now_FOV, float* Param_Now_Distance, float* Param_Now_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "GetNowCameraPos");

	Params::ProjectPlayerCameraManager_C_GetNowCameraPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Now_FOV != nullptr)
		*Param_Now_FOV = Parms.Param_Now_FOV;

	if (Param_Now_Distance != nullptr)
		*Param_Now_Distance = Parms.Param_Now_Distance;

	if (Param_Now_Height != nullptr)
		*Param_Now_Height = Parms.Param_Now_Height;
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.InitNowCameraPos
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::InitNowCameraPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "InitNowCameraPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.UpdateDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::UpdateDistance(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "UpdateDistance");

	Params::ProjectPlayerCameraManager_C_UpdateDistance Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.UpdateFOV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::UpdateFOV(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "UpdateFOV");

	Params::ProjectPlayerCameraManager_C_UpdateFOV Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.UpdateHeight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::UpdateHeight(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "UpdateHeight");

	Params::ProjectPlayerCameraManager_C_UpdateHeight Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.PlayerCameraInside
// (Public, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::PlayerCameraInside()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "PlayerCameraInside");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.NPC_MobCameraInside
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::NPC_MobCameraInside()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "NPC_MobCameraInside");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.InitializeCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProjectPlayerCameraManager_C::InitializeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "InitializeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.SetCameraFOV
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_OPTION_CONTENT_FOV_TYPE               FOVType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::SetCameraFOV(E_OPTION_CONTENT_FOV_TYPE FOVType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "SetCameraFOV");

	Params::ProjectPlayerCameraManager_C_SetCameraFOV Parms{};

	Parms.FOVType = FOVType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.SetCameraTrace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableCameraTraceLag                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProjectPlayerCameraManager_C::SetCameraTrace(bool EnableCameraTraceLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "SetCameraTrace");

	Params::ProjectPlayerCameraManager_C_SetCameraTrace Parms{};

	Parms.EnableCameraTraceLag = EnableCameraTraceLag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.IsRequestFinishCameraUpdateDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProjectPlayerCameraManager_C::IsRequestFinishCameraUpdateDone(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "IsRequestFinishCameraUpdateDone");

	Params::ProjectPlayerCameraManager_C_IsRequestFinishCameraUpdateDone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.GetDefaultFOV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_DefaultFOV                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProjectPlayerCameraManager_C::GetDefaultFOV(float* Param_DefaultFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "GetDefaultFOV");

	Params::ProjectPlayerCameraManager_C_GetDefaultFOV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DefaultFOV != nullptr)
		*Param_DefaultFOV = Parms.Param_DefaultFOV;
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.Player Camera Root Init
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProjectPlayerCameraManager_C::Player_Camera_Root_Init(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "Player Camera Root Init");

	Params::ProjectPlayerCameraManager_C_Player_Camera_Root_Init Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function ProjectPlayerCameraManager.ProjectPlayerCameraManager_C.Player Camera Manual Tick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProjectPlayerCameraManager_C::Player_Camera_Manual_Tick(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectPlayerCameraManager_C", "Player Camera Manual Tick");

	Params::ProjectPlayerCameraManager_C_Player_Camera_Manual_Tick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}

}

