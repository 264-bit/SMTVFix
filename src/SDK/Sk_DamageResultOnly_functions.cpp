#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Sk_DamageResultOnly

#include "Basic.hpp"

#include "Sk_DamageResultOnly_classes.hpp"
#include "Sk_DamageResultOnly_parameters.hpp"


namespace SDK
{

// Function sk_DamageResultOnly.sk_DamageResultOnly_C.ExecuteUbergraph_sk_DamageResultOnly
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASk_DamageResultOnly_C::ExecuteUbergraph_sk_DamageResultOnly(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "ExecuteUbergraph_sk_DamageResultOnly");

	Params::Sk_DamageResultOnly_C_ExecuteUbergraph_sk_DamageResultOnly Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.Performance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASk_DamageResultOnly_C::Performance(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "Performance");

	Params::Sk_DamageResultOnly_C_Performance Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.SetPlayParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBTL_EFFECT_PLAY_PARAM>   EffectPlayParam                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBTL_LIGHT_PLAY_PARAM>    LightPlayParam                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsUsedAnimCam                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class AActor*>                   TrashActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UActorComponent*>          TrashComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ASk_DamageResultOnly_C::SetPlayParam(TArray<struct FBTL_EFFECT_PLAY_PARAM>& EffectPlayParam, TArray<struct FBTL_LIGHT_PLAY_PARAM>& LightPlayParam, bool IsUsedAnimCam, TArray<class AActor*>& TrashActor, TArray<class UActorComponent*>& TrashComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "SetPlayParam");

	Params::Sk_DamageResultOnly_C_SetPlayParam Parms{};

	Parms.EffectPlayParam = std::move(EffectPlayParam);
	Parms.LightPlayParam = std::move(LightPlayParam);
	Parms.IsUsedAnimCam = IsUsedAnimCam;
	Parms.TrashActor = std::move(TrashActor);
	Parms.TrashComponent = std::move(TrashComponent);

	UObject::ProcessEvent(Func, &Parms);

	EffectPlayParam = std::move(Parms.EffectPlayParam);
	LightPlayParam = std::move(Parms.LightPlayParam);
	TrashActor = std::move(Parms.TrashActor);
	TrashComponent = std::move(Parms.TrashComponent);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.SkipInitialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::SkipInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "SkipInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.ForceDestroyLoadedModels
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::ForceDestroyLoadedModels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "ForceDestroyLoadedModels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.ForceRestoreActorScale
// (Private, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::ForceRestoreActorScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "ForceRestoreActorScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.IsItemTelescope
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsTelescope                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASk_DamageResultOnly_C::IsItemTelescope(bool* IsTelescope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "IsItemTelescope");

	Params::Sk_DamageResultOnly_C_IsItemTelescope Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTelescope != nullptr)
		*IsTelescope = Parms.IsTelescope;
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.DestroyTrashActors
// (Private, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::DestroyTrashActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "DestroyTrashActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.StopMagatsuhiOtherActorsMotion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::StopMagatsuhiOtherActorsMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "StopMagatsuhiOtherActorsMotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.Invisible Loaded Models
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::Invisible_Loaded_Models()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "Invisible Loaded Models");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASk_DamageResultOnly_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "ReceiveEndPlay");

	Params::Sk_DamageResultOnly_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASk_DamageResultOnly_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.DeadFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::DeadFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "DeadFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.HitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::HitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "HitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.IntroductionFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::IntroductionFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "IntroductionFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.FinishFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::FinishFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "FinishFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.CheckHit
// (Public, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::CheckHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "CheckHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.AnimNotify_ApplyHitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::AnimNotify_ApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "AnimNotify_ApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.IntroductionItemFunc
// (Private, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::IntroductionItemFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "IntroductionItemFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.GetSkillArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_SKILL_TARGET ASk_DamageResultOnly_C::GetSkillArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "GetSkillArea");

	Params::Sk_DamageResultOnly_C_GetSkillArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.AddFirstSettingTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ASk_DamageResultOnly_C::AddFirstSettingTask(TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "AddFirstSettingTask");

	Params::Sk_DamageResultOnly_C_AddFirstSettingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.FirstSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::FirstSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "FirstSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function sk_DamageResultOnly.sk_DamageResultOnly_C.InitActorDither
// (Public, BlueprintCallable, BlueprintEvent)

void ASk_DamageResultOnly_C::InitActorDither()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("sk_DamageResultOnly_C", "InitActorDither");

	UObject::ProcessEvent(Func, nullptr);
}

}

