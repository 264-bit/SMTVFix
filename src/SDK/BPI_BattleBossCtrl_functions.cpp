#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleBossCtrl

#include "Basic.hpp"

#include "BPI_BattleBossCtrl_classes.hpp"
#include "BPI_BattleBossCtrl_parameters.hpp"


namespace SDK
{

// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_SecondForm
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleBossCtrl_C::BI_SecondForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_SecondForm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_ThirdForm
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleBossCtrl_C::BI_ThirdForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_ThirdForm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_GetFirstFormEnemyList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>RetValue                                               (Parm, OutParm)

void IBPI_BattleBossCtrl_C::BI_GetFirstFormEnemyList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_GetFirstFormEnemyList");

	Params::BPI_BattleBossCtrl_C_BI_GetFirstFormEnemyList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_GetSecondFormEnemyList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>RetValue                                               (Parm, OutParm)

void IBPI_BattleBossCtrl_C::BI_GetSecondFormEnemyList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_GetSecondFormEnemyList");

	Params::BPI_BattleBossCtrl_C_BI_GetSecondFormEnemyList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_GetThirdFormEnemyList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>RetValue                                               (Parm, OutParm)

void IBPI_BattleBossCtrl_C::BI_GetThirdFormEnemyList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_GetThirdFormEnemyList");

	Params::BPI_BattleBossCtrl_C_BI_GetThirdFormEnemyList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_IsSecondFormReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleBossCtrl_C::BI_IsSecondFormReady(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_IsSecondFormReady");

	Params::BPI_BattleBossCtrl_C_BI_IsSecondFormReady Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_FirstForm
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleBossCtrl_C::BI_FirstForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_FirstForm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_IsThirdFormReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleBossCtrl_C::BI_IsThirdFormReady(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_IsThirdFormReady");

	Params::BPI_BattleBossCtrl_C_BI_IsThirdFormReady Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_BattleStart
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleBossCtrl_C::BI_BattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_BattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_BattleReady
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleBossCtrl_C::BI_BattleReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_BattleReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_GetEnemyActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>EnemyActorList                                         (Parm, OutParm)

void IBPI_BattleBossCtrl_C::BI_GetEnemyActor(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* EnemyActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_GetEnemyActor");

	Params::BPI_BattleBossCtrl_C_BI_GetEnemyActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnemyActorList != nullptr)
		*EnemyActorList = std::move(Parms.EnemyActorList);
}


// Function BPI_BattleBossCtrl.BPI_BattleBossCtrl_C.BI_BattlePlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseBlendTimeOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTimeOverride                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleBossCtrl_C::BI_BattlePlayMotion(E_CHARA_MOTION_ID MotionID, bool IsUseDuration, float Duration, bool IsUseBlendTimeOverride, float BlendTimeOverride, float StartOffsetTime, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleBossCtrl_C", "BI_BattlePlayMotion");

	Params::BPI_BattleBossCtrl_C_BI_BattlePlayMotion Parms{};

	Parms.MotionID = MotionID;
	Parms.IsUseDuration = IsUseDuration;
	Parms.Duration = Duration;
	Parms.IsUseBlendTimeOverride = IsUseBlendTimeOverride;
	Parms.BlendTimeOverride = BlendTimeOverride;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}

}

