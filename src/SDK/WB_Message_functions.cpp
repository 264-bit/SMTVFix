#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Message

#include "Basic.hpp"

#include "WB_Message_classes.hpp"
#include "WB_Message_parameters.hpp"


namespace SDK
{

// Function WB_Message.WB_Message_C.ExecuteUbergraph_WB_Message
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::ExecuteUbergraph_WB_Message(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "ExecuteUbergraph_WB_Message");

	Params::WB_Message_C_ExecuteUbergraph_WB_Message Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_Message_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.UnInit
// (BlueprintCallable, BlueprintEvent)

void UWB_Message_C::UnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "UnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Tick");

	Params::WB_Message_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.Ev_StopVoiceOnly
// (BlueprintCallable, BlueprintEvent)

void UWB_Message_C::Ev_StopVoiceOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Ev_StopVoiceOnly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Ev_StopLipSync
// (BlueprintCallable, BlueprintEvent)

void UWB_Message_C::Ev_StopLipSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Ev_StopLipSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Ev_PlayLipSync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharaLipSync*                    LipSync                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Ev_PlayLipSync(class UCharaLipSync* LipSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Ev_PlayLipSync");

	Params::WB_Message_C_Ev_PlayLipSync Parms{};

	Parms.LipSync = LipSync;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.Ev_StopVoice
// (BlueprintCallable, BlueprintEvent)

void UWB_Message_C::Ev_StopVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Ev_StopVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Ev_PlayVoice
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    SoundCure                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCharaLipSync*                    LipSync                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Ev_PlayVoice(class USoundAtomCue* SoundCure, class UCharaLipSync* LipSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Ev_PlayVoice");

	Params::WB_Message_C_Ev_PlayVoice Parms{};

	Parms.SoundCure = SoundCure;
	Parms.LipSync = LipSync;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.StartMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InScriptMessage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InMessageId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReveal                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_MESSAGE_TYPE                          MessType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWindow                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSystem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_CharaLipSync_C>Chara                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param_TimeFix                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseFrameFix                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MovieText                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::StartMessage(class UScriptMessageAsset* InScriptMessage, int32 InMessageId, bool IsReveal, E_MESSAGE_TYPE MessType, bool IsWindow, bool IsSystem, TScriptInterface<class IBPI_CharaLipSync_C> Chara, float Param_TimeFix, bool UseFrameFix, bool MovieText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "StartMessage");

	Params::WB_Message_C_StartMessage Parms{};

	Parms.InScriptMessage = InScriptMessage;
	Parms.InMessageId = InMessageId;
	Parms.IsReveal = IsReveal;
	Parms.MessType = MessType;
	Parms.IsWindow = IsWindow;
	Parms.IsSystem = IsSystem;
	Parms.Chara = Chara;
	Parms.Param_TimeFix = Param_TimeFix;
	Parms.UseFrameFix = UseFrameFix;
	Parms.MovieText = MovieText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.SetRevealPage
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::SetRevealPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetRevealPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.IsPageCompleted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsComplet                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::IsPageCompleted(bool* IsComplet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "IsPageCompleted");

	Params::WB_Message_C_IsPageCompleted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsComplet != nullptr)
		*IsComplet = Parms.IsComplet;
}


// Function WB_Message.WB_Message_C.IsMessageCompleted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsComplet                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::IsMessageCompleted(bool* IsComplet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "IsMessageCompleted");

	Params::WB_Message_C_IsMessageCompleted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsComplet != nullptr)
		*IsComplet = Parms.IsComplet;
}


// Function WB_Message.WB_Message_C.ToNextPage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReveal                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::ToNextPage(bool IsReveal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "ToNextPage");

	Params::WB_Message_C_ToNextPage Parms{};

	Parms.IsReveal = IsReveal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.EndMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWindowClose                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsKeepVoice                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::EndMessage(bool IsWindowClose, bool IsKeepVoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "EndMessage");

	Params::WB_Message_C_EndMessage Parms{};

	Parms.IsWindowClose = IsWindowClose;
	Parms.IsKeepVoice = IsKeepVoice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.SetView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsView                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::SetView(bool IsView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetView");

	Params::WB_Message_C_SetView Parms{};

	Parms.IsView = IsView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.SetPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAnchors                         InAnchors                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FVector2D                        InPosition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InAlignment                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::SetPosition(const struct FAnchors& InAnchors, const struct FVector2D& InPosition, const struct FVector2D& InAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetPosition");

	Params::WB_Message_C_SetPosition Parms{};

	Parms.InAnchors = std::move(InAnchors);
	Parms.InPosition = std::move(InPosition);
	Parms.InAlignment = std::move(InAlignment);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.SetJustification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextJustify                            InJustification                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::SetJustification(ETextJustify InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetJustification");

	Params::WB_Message_C_SetJustification Parms{};

	Parms.InJustification = InJustification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.ClearMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsKeepVoice                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::ClearMessage(bool IsKeepVoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "ClearMessage");

	Params::WB_Message_C_ClearMessage Parms{};

	Parms.IsKeepVoice = IsKeepVoice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.GetVoiceName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           VoiceName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWB_Message_C::GetVoiceName(class FString* VoiceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "GetVoiceName");

	Params::WB_Message_C_GetVoiceName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceName != nullptr)
		*VoiceName = std::move(Parms.VoiceName);
}


// Function WB_Message.WB_Message_C.StartMessage_Label
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InScriptMessage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InMessageLabel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReval                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_MESSAGE_TYPE                          Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWindow                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSystem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_CharaLipSync_C>Chara                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param_TimeFix                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseFrameFix                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::StartMessage_Label(class UScriptMessageAsset* InScriptMessage, class FName InMessageLabel, bool IsReval, E_MESSAGE_TYPE Selection, bool IsWindow, bool IsSystem, TScriptInterface<class IBPI_CharaLipSync_C> Chara, float Param_TimeFix, bool UseFrameFix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "StartMessage_Label");

	Params::WB_Message_C_StartMessage_Label Parms{};

	Parms.InScriptMessage = InScriptMessage;
	Parms.InMessageLabel = InMessageLabel;
	Parms.IsReval = IsReval;
	Parms.Selection = Selection;
	Parms.IsWindow = IsWindow;
	Parms.IsSystem = IsSystem;
	Parms.Chara = Chara;
	Parms.Param_TimeFix = Param_TimeFix;
	Parms.UseFrameFix = UseFrameFix;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.GetSpeakerName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           SpeakerName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWB_Message_C::GetSpeakerName(class FString* SpeakerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "GetSpeakerName");

	Params::WB_Message_C_GetSpeakerName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpeakerName != nullptr)
		*SpeakerName = std::move(Parms.SpeakerName);
}


// Function WB_Message.WB_Message_C.Choice_StartMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InScriptMessage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           InMessageIdArray                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWB_Message_C::Choice_StartMessage(class UScriptMessageAsset* InScriptMessage, TArray<int32>& InMessageIdArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_StartMessage");

	Params::WB_Message_C_Choice_StartMessage Parms{};

	Parms.InScriptMessage = InScriptMessage;
	Parms.InMessageIdArray = std::move(InMessageIdArray);

	UObject::ProcessEvent(Func, &Parms);

	InMessageIdArray = std::move(Parms.InMessageIdArray);
}


// Function WB_Message.WB_Message_C.Choice_EndMessage
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::Choice_EndMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_EndMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Choice_MoveCursor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLimitStop                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsMove                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::Choice_MoveCursor(int32 Add, bool IsLimitStop, bool* IsMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_MoveCursor");

	Params::WB_Message_C_Choice_MoveCursor Parms{};

	Parms.Add = Add;
	Parms.IsLimitStop = IsLimitStop;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMove != nullptr)
		*IsMove = Parms.IsMove;
}


// Function WB_Message.WB_Message_C.Choice_StartMessage_Lebel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ScriptMessageAsset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     MessageLabelArray                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWB_Message_C::Choice_StartMessage_Lebel(class UScriptMessageAsset* ScriptMessageAsset, TArray<class FName>& MessageLabelArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_StartMessage_Lebel");

	Params::WB_Message_C_Choice_StartMessage_Lebel Parms{};

	Parms.ScriptMessageAsset = ScriptMessageAsset;
	Parms.MessageLabelArray = std::move(MessageLabelArray);

	UObject::ProcessEvent(Func, &Parms);

	MessageLabelArray = std::move(Parms.MessageLabelArray);
}


// Function WB_Message.WB_Message_C.Choice_GetSelData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CursorIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MessageID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             MessageLabel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Choice_GetSelData(int32* CursorIndex, int32* MessageID, class FName* MessageLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_GetSelData");

	Params::WB_Message_C_Choice_GetSelData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CursorIndex != nullptr)
		*CursorIndex = Parms.CursorIndex;

	if (MessageID != nullptr)
		*MessageID = Parms.MessageID;

	if (MessageLabel != nullptr)
		*MessageLabel = Parms.MessageLabel;
}


// Function WB_Message.WB_Message_C.Choice_AddPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ScriptMessAsset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           MassageIdArray                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PageId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Choice_AddPage(class UScriptMessageAsset* ScriptMessAsset, TArray<int32>& MassageIdArray, int32* PageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_AddPage");

	Params::WB_Message_C_Choice_AddPage Parms{};

	Parms.ScriptMessAsset = ScriptMessAsset;
	Parms.MassageIdArray = std::move(MassageIdArray);

	UObject::ProcessEvent(Func, &Parms);

	MassageIdArray = std::move(Parms.MassageIdArray);

	if (PageId != nullptr)
		*PageId = Parms.PageId;
}


// Function WB_Message.WB_Message_C.Choice_AddPage_Label
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ScriptMessageAsset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     MessageLabelArray                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PageId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Choice_AddPage_Label(class UScriptMessageAsset* ScriptMessageAsset, TArray<class FName>& MessageLabelArray, int32* PageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_AddPage_Label");

	Params::WB_Message_C_Choice_AddPage_Label Parms{};

	Parms.ScriptMessageAsset = ScriptMessageAsset;
	Parms.MessageLabelArray = std::move(MessageLabelArray);

	UObject::ProcessEvent(Func, &Parms);

	MessageLabelArray = std::move(Parms.MessageLabelArray);

	if (PageId != nullptr)
		*PageId = Parms.PageId;
}


// Function WB_Message.WB_Message_C.Choice_ToNextPage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBack                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::Choice_ToNextPage(bool IsBack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_ToNextPage");

	Params::WB_Message_C_Choice_ToNextPage Parms{};

	Parms.IsBack = IsBack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.Choice_SetPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAnchors                         InAnchors                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FVector2D                        InAlignment                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        InPosition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::Choice_SetPosition(const struct FAnchors& InAnchors, const struct FVector2D& InAlignment, const struct FVector2D& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_SetPosition");

	Params::WB_Message_C_Choice_SetPosition Parms{};

	Parms.InAnchors = std::move(InAnchors);
	Parms.InAlignment = std::move(InAlignment);
	Parms.InPosition = std::move(InPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.Choice_SetView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsView                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::Choice_SetView(bool IsView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_SetView");

	Params::WB_Message_C_Choice_SetView Parms{};

	Parms.IsView = IsView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.StartVoice
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::StartVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "StartVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.IsPlayVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::IsPlayVoice(bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "IsPlayVoice");

	Params::WB_Message_C_IsPlayVoice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function WB_Message.WB_Message_C.EndVoice
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::EndVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "EndVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.StartButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::StartButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "StartButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.EndButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::EndButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "EndButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.Play_AnimAuto
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::Play_AnimAuto(bool IsOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Play_AnimAuto");

	Params::WB_Message_C_Play_AnimAuto Parms{};

	Parms.IsOn = IsOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.ChangeButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTN_HELP_SET                          SetId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::ChangeButtonHelp(E_BTN_HELP_SET SetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "ChangeButtonHelp");

	Params::WB_Message_C_ChangeButtonHelp Parms{};

	Parms.SetId = SetId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.IsNextPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::IsNextPage(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "IsNextPage");

	Params::WB_Message_C_IsNextPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function WB_Message.WB_Message_C.SetWindowView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsView                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::SetWindowView(bool IsView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetWindowView");

	Params::WB_Message_C_SetWindowView Parms{};

	Parms.IsView = IsView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.GetScriptMessageWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMessageRichTextWidget*           ScriptMessage                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::GetScriptMessageWidget(class UMessageRichTextWidget** ScriptMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "GetScriptMessageWidget");

	Params::WB_Message_C_GetScriptMessageWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ScriptMessage != nullptr)
		*ScriptMessage = Parms.ScriptMessage;
}


// Function WB_Message.WB_Message_C.Choice_SetCursor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMove                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Message_C::Choice_SetCursor(int32 Param_Index, bool* IsMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "Choice_SetCursor");

	Params::WB_Message_C_Choice_SetCursor Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (IsMove != nullptr)
		*IsMove = Parms.IsMove;
}


// Function WB_Message.WB_Message_C.EndVoiceOnly
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Message_C::EndVoiceOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "EndVoiceOnly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Message.WB_Message_C.SetOutlineAlphaNormal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::SetOutlineAlphaNormal(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetOutlineAlphaNormal");

	Params::WB_Message_C_SetOutlineAlphaNormal Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Message.WB_Message_C.SetOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InOpacity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Message_C::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Message_C", "SetOpacity");

	Params::WB_Message_C_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	UObject::ProcessEvent(Func, &Parms);
}

}

