#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ProjectGameInstance

#include "Basic.hpp"

#include "DaathTypeList_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetMapUICtrl
// 0x0008 (0x0008 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_SetMapUICtrl final
{
public:
	class AActor*                                 MapUICommon;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_SetMapUICtrl) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_SetMapUICtrl");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_SetMapUICtrl) == 0x000008, "Wrong size on BPI_ProjectGameInstance_C_BPI_SetMapUICtrl");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_SetMapUICtrl, MapUICommon) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_SetMapUICtrl::MapUICommon' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetMapUICtrl
// 0x0008 (0x0008 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_GetMapUICtrl final
{
public:
	class AActor*                                 MapUICommon;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_GetMapUICtrl) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_GetMapUICtrl");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_GetMapUICtrl) == 0x000008, "Wrong size on BPI_ProjectGameInstance_C_BPI_GetMapUICtrl");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_GetMapUICtrl, MapUICommon) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_GetMapUICtrl::MapUICommon' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetPreloadLevelList
// 0x0010 (0x0010 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList final
{
public:
	TArray<struct FPrimaryAssetId>                PreloadLevelList;                                  // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList) == 0x000010, "Wrong size on BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList, PreloadLevelList) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList::PreloadLevelList' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_IsScreenShot
// 0x0001 (0x0001 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_IsScreenShot final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_IsScreenShot) == 0x000001, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_IsScreenShot");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_IsScreenShot) == 0x000001, "Wrong size on BPI_ProjectGameInstance_C_BPI_IsScreenShot");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_IsScreenShot, Return) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_IsScreenShot::Return' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetEncountScene
// 0x0010 (0x0010 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_SetEncountScene final
{
public:
	class AActor*                                 EncountScene;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_SetEncountScene) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_SetEncountScene");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_SetEncountScene) == 0x000010, "Wrong size on BPI_ProjectGameInstance_C_BPI_SetEncountScene");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_SetEncountScene, EncountScene) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_SetEncountScene::EncountScene' has a wrong offset!");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_SetEncountScene, NewParam) == 0x000008, "Member 'BPI_ProjectGameInstance_C_BPI_SetEncountScene::NewParam' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetEncountScene
// 0x0008 (0x0008 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_GetEncountScene final
{
public:
	class AActor*                                 EncountScene;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_GetEncountScene) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_GetEncountScene");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_GetEncountScene) == 0x000008, "Wrong size on BPI_ProjectGameInstance_C_BPI_GetEncountScene");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_GetEncountScene, EncountScene) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_GetEncountScene::EncountScene' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetDaathLightType
// 0x0001 (0x0001 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_GetDaathLightType final
{
public:
	EDaathTypeList                                LightType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_GetDaathLightType) == 0x000001, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_GetDaathLightType");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_GetDaathLightType) == 0x000001, "Wrong size on BPI_ProjectGameInstance_C_BPI_GetDaathLightType");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_GetDaathLightType, LightType) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_GetDaathLightType::LightType' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_CheckLoadMap
// 0x0001 (0x0001 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_CheckLoadMap final
{
public:
	bool                                          LoadMap;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_CheckLoadMap) == 0x000001, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_CheckLoadMap");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_CheckLoadMap) == 0x000001, "Wrong size on BPI_ProjectGameInstance_C_BPI_CheckLoadMap");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_CheckLoadMap, LoadMap) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_CheckLoadMap::LoadMap' has a wrong offset!");

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetPreloadLevelList
// 0x0010 (0x0010 - 0x0000)
struct BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList final
{
public:
	TArray<struct FPrimaryAssetId>                PreloadLevelList;                                  // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList) == 0x000008, "Wrong alignment on BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList");
static_assert(sizeof(BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList) == 0x000010, "Wrong size on BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList");
static_assert(offsetof(BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList, PreloadLevelList) == 0x000000, "Member 'BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList::PreloadLevelList' has a wrong offset!");

}

