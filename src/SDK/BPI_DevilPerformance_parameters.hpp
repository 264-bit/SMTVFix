#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_DevilPerformance

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.GeneralDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_GeneralDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_GeneralDeadPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_GeneralDeadPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_GeneralDeadPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_GeneralDeadPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_GeneralDeadPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_GeneralDeadPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.FreezeDeadPlay
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_FreezeDeadPlay final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_FreezeDeadPlay) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_FreezeDeadPlay");
static_assert(sizeof(BPI_DevilPerformance_C_FreezeDeadPlay) == 0x000001, "Wrong size on BPI_DevilPerformance_C_FreezeDeadPlay");
static_assert(offsetof(BPI_DevilPerformance_C_FreezeDeadPlay, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_FreezeDeadPlay::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.FreezeDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_FreezeDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_FreezeDeadPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_FreezeDeadPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_FreezeDeadPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_FreezeDeadPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_FreezeDeadPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_FreezeDeadPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.FreezeDeadSetTime
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformance_C_FreezeDeadSetTime final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoUse;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_FreezeDeadSetTime) == 0x000004, "Wrong alignment on BPI_DevilPerformance_C_FreezeDeadSetTime");
static_assert(sizeof(BPI_DevilPerformance_C_FreezeDeadSetTime) == 0x000008, "Wrong size on BPI_DevilPerformance_C_FreezeDeadSetTime");
static_assert(offsetof(BPI_DevilPerformance_C_FreezeDeadSetTime, Sec) == 0x000000, "Member 'BPI_DevilPerformance_C_FreezeDeadSetTime::Sec' has a wrong offset!");
static_assert(offsetof(BPI_DevilPerformance_C_FreezeDeadSetTime, NoUse) == 0x000004, "Member 'BPI_DevilPerformance_C_FreezeDeadSetTime::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.PhysicsDeadPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_PhysicsDeadPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_PhysicsDeadPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_PhysicsDeadPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_PhysicsDeadPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_PhysicsDeadPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_PhysicsDeadPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_PhysicsDeadPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.SummonPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_SummonPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_SummonPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_SummonPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_SummonPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_SummonPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_SummonPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_SummonPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.ReturnPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_ReturnPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_ReturnPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_ReturnPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_ReturnPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_ReturnPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_ReturnPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_ReturnPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.ReviveEnemyPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_ReviveEnemyPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_ReviveEnemyPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_ReviveEnemyPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_ReviveEnemyPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_ReviveEnemyPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_ReviveEnemyPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_ReviveEnemyPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.ReviveNakamaPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_ReviveNakamaPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_ReviveNakamaPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_ReviveNakamaPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_ReviveNakamaPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_ReviveNakamaPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_ReviveNakamaPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_ReviveNakamaPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.SpawnPlayStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_DevilPerformance_C_SpawnPlayStart final
{
public:
	bool                                          NoUse;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_DevilPerformance_C_SpawnPlayStart) == 0x000001, "Wrong alignment on BPI_DevilPerformance_C_SpawnPlayStart");
static_assert(sizeof(BPI_DevilPerformance_C_SpawnPlayStart) == 0x000001, "Wrong size on BPI_DevilPerformance_C_SpawnPlayStart");
static_assert(offsetof(BPI_DevilPerformance_C_SpawnPlayStart, NoUse) == 0x000000, "Member 'BPI_DevilPerformance_C_SpawnPlayStart::NoUse' has a wrong offset!");

// Function BPI_DevilPerformance.BPI_DevilPerformance_C.BI_GetNpcCollisionActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_DevilPerformance_C_BI_GetNpcCollisionActor final
{
public:
	class AActor*                                 NpcCollisionActor;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_DevilPerformance_C_BI_GetNpcCollisionActor) == 0x000008, "Wrong alignment on BPI_DevilPerformance_C_BI_GetNpcCollisionActor");
static_assert(sizeof(BPI_DevilPerformance_C_BI_GetNpcCollisionActor) == 0x000008, "Wrong size on BPI_DevilPerformance_C_BI_GetNpcCollisionActor");
static_assert(offsetof(BPI_DevilPerformance_C_BI_GetNpcCollisionActor, NpcCollisionActor) == 0x000000, "Member 'BPI_DevilPerformance_C_BI_GetNpcCollisionActor::NpcCollisionActor' has a wrong offset!");

}

