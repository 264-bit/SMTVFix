#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleActionTaskFactory

#include "Basic.hpp"

#include "BattleActionTaskFactory_classes.hpp"
#include "BattleActionTaskFactory_parameters.hpp"


namespace SDK
{

// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ExecuteUbergraph_BattleActionTaskFactory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::ExecuteUbergraph_BattleActionTaskFactory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ExecuteUbergraph_BattleActionTaskFactory");

	Params::BattleActionTaskFactory_C_ExecuteUbergraph_BattleActionTaskFactory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ReceiveEndPlay");

	Params::BattleActionTaskFactory_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DestroyMusmahData
// (BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::DestroyMusmahData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DestroyMusmahData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.LoadMusmahData
// (BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::LoadMusmahData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "LoadMusmahData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ReceiveTick");

	Params::BattleActionTaskFactory_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBattleActionTaskFactory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.Evt_ClearArray
// (BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::Evt_ClearArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "Evt_ClearArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.OnLoaded_430CAF474B0F79C3F98FD98578ADF046
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::OnLoaded_430CAF474B0F79C3F98FD98578ADF046(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "OnLoaded_430CAF474B0F79C3F98FD98578ADF046");

	Params::BattleActionTaskFactory_C_OnLoaded_430CAF474B0F79C3F98FD98578ADF046 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.OnLoaded_7D84137042529291144500850D49C96D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::OnLoaded_7D84137042529291144500850D49C96D(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "OnLoaded_7D84137042529291144500850D49C96D");

	Params::BattleActionTaskFactory_C_OnLoaded_7D84137042529291144500850D49C96D Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.OnLoaded_55EF183A4BDF28D25C43F1BD691A7361
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::OnLoaded_55EF183A4BDF28D25C43F1BD691A7361(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "OnLoaded_55EF183A4BDF28D25C43F1BD691A7361");

	Params::BattleActionTaskFactory_C_OnLoaded_55EF183A4BDF28D25C43F1BD691A7361 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CheckTask
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::CheckTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CheckTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetParentNameTaskCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetCnt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetParentNameTaskCnt(const class FString& ParentName, int32* RetCnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetParentNameTaskCnt");

	Params::BattleActionTaskFactory_C_GetParentNameTaskCnt Parms{};

	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	if (RetCnt != nullptr)
		*RetCnt = Parms.RetCnt;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.SpawnActionTaskActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlTaskDesc                     InDesc                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<int32>                           TaskWaitList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ClassData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TaskDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABattleActionTask_C*              RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::SpawnActionTaskActor(const struct FBtlTaskDesc& InDesc, TArray<int32>& TaskWaitList, const class FString& ParentName, class UObject* Data, class UClass* ClassData, float TaskDuration, class ABattleActionTask_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "SpawnActionTaskActor");

	Params::BattleActionTaskFactory_C_SpawnActionTaskActor Parms{};

	Parms.InDesc = std::move(InDesc);
	Parms.TaskWaitList = std::move(TaskWaitList);
	Parms.ParentName = std::move(ParentName);
	Parms.Data = Data;
	Parms.ClassData = ClassData;
	Parms.TaskDuration = TaskDuration;

	UObject::ProcessEvent(Func, &Parms);

	TaskWaitList = std::move(Parms.TaskWaitList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeCureTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CURE                              Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HpCure                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MpCure                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bstCure                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::MakeCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_CURE Type, int32 HpCure, int32 MpCure, int32 bstCure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeCureTask");

	Params::BattleActionTaskFactory_C_MakeCureTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.Type = Type;
	Parms.HpCure = HpCure;
	Parms.MpCure = MpCure;
	Parms.bstCure = bstCure;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetMainWork
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABattleMain_C*                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetMainWork(class ABattleMain_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetMainWork");

	Params::BattleActionTaskFactory_C_GetMainWork Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetPartySystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattlePartySystem_C*             RetValue                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetPartySystem(class UBattlePartySystem_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetPartySystem");

	Params::BattleActionTaskFactory_C_GetPartySystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddNumEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HPNum                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MPNum                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_NUMEFF                            Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_UTIL_ICON_TYPE                    HitType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CriticalLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RandArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsResist                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          PositionOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_KUISHIBARI_LEVEL                      Kuishibari                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipping                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckTargetInCamera                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddNumEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 HPNum, int32 MPNum, E_BTL_NUMEFF Type, E_BTL_UTIL_ICON_TYPE HitType, int32 CriticalLevel, float RandArea, float PlayRate, bool IsResist, const struct FVector& PositionOffset, bool IsDead, E_KUISHIBARI_LEVEL Kuishibari, bool IsSkipping, bool CheckTargetInCamera, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddNumEffectTask");

	Params::BattleActionTaskFactory_C_AddNumEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.HPNum = HPNum;
	Parms.MPNum = MPNum;
	Parms.Type = Type;
	Parms.HitType = HitType;
	Parms.CriticalLevel = CriticalLevel;
	Parms.RandArea = RandArea;
	Parms.PlayRate = PlayRate;
	Parms.IsResist = IsResist;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.IsDead = IsDead;
	Parms.Kuishibari = Kuishibari;
	Parms.IsSkipping = IsSkipping;
	Parms.CheckTargetInCamera = CheckTargetInCamera;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSkillEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSkillEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, int32 SkillId, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSkillEffectTask");

	Params::BattleActionTaskFactory_C_AddSkillEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeBadCureTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CureBst                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoCureEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLecerationDam                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOnlyShowTarget                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           RetValue                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeBadCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 CureBst, bool NoCureEffect, bool IsLecerationDam, bool IsOnlyShowTarget, TArray<int32>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeBadCureTask");

	Params::BattleActionTaskFactory_C_MakeBadCureTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.CureBst = CureBst;
	Parms.NoCureEffect = NoCureEffect;
	Parms.IsLecerationDam = IsLecerationDam;
	Parms.IsOnlyShowTarget = IsOnlyShowTarget;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDamageTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Weak                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCam                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Weak, float Range, bool IsCam, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDamageTask");

	Params::BattleActionTaskFactory_C_AddDamageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Weak = Weak;
	Parms.Range = Range;
	Parms.IsCam = IsCam;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddHpMpTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Num                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHP                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddHpMpTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Num, bool IsHP, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddHpMpTask");

	Params::BattleActionTaskFactory_C_AddHpMpTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Num = Num;
	Parms.IsHP = IsHP;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddTemplate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddTemplate(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddTemplate");

	Params::BattleActionTaskFactory_C_AddTemplate Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddMojiEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddMojiEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddMojiEffectTask");

	Params::BattleActionTaskFactory_C_AddMojiEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamMoveFixTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamMoveFixTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, uint8 Type, float DeltaTime, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamMoveFixTask");

	Params::BattleActionTaskFactory_C_AddCamMoveFixTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Type = Type;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDeltaWaitTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDeltaWaitTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDeltaWaitTask");

	Params::BattleActionTaskFactory_C_AddDeltaWaitTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDeadFadeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DEAD_EFFECT                       DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDeadFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDeadFadeTask");

	Params::BattleActionTaskFactory_C_AddDeadFadeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.DeltaTime = DeltaTime;
	Parms.DeadType = DeadType;
	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitStayDirToTargetTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LoopPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitStayDirToTargetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, float Speed, bool UseVector, const struct FVector& LoopPoint, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitStayDirToTargetTask");

	Params::BattleActionTaskFactory_C_AddUnitStayDirToTargetTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.Speed = Speed;
	Parms.UseVector = UseVector;
	Parms.LoopPoint = std::move(LoopPoint);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamRailTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CAM_TYPE                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           ManualName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    StopWait                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaWait                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamRailTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamRailTask");

	Params::BattleActionTaskFactory_C_AddCamRailTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Type = Type;
	Parms.InterpWait = InterpWait;
	Parms.ManualName = std::move(ManualName);
	Parms.StopWait = StopWait;
	Parms.DeltaWait = DeltaWait;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddHelpMesTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   InID1                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InID2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsErase                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddHelpMesTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 InID1, int32 InID2, bool IsErase, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddHelpMesTask");

	Params::BattleActionTaskFactory_C_AddHelpMesTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.InID1 = InID1;
	Parms.InID2 = InID2;
	Parms.IsErase = IsErase;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeDamageTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DAMAGE_HIT_TYPE                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dead                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HP1                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           Tasklist                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_DAMAGE_HIT_TYPE Type, int32 HpDamage, int32 MpDamage, int32 bst, bool Dead, int32 DeadType, bool HP1, float PlayRate, bool* RetValue, TArray<int32>* Tasklist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeDamageTask");

	Params::BattleActionTaskFactory_C_MakeDamageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.Type = Type;
	Parms.HpDamage = HpDamage;
	Parms.MpDamage = MpDamage;
	Parms.bst = bst;
	Parms.Dead = Dead;
	Parms.DeadType = DeadType;
	Parms.HP1 = HP1;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;

	if (Tasklist != nullptr)
		*Tasklist = std::move(Parms.Tasklist);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeBadDamageTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BAD_STATUS                            InBst                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecID                                               (Parm, OutParm)
// bool                                    Lo_ReqDead                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::MakeBadDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BAD_STATUS InBst, int32 HpDamage, int32 MpDamage, TArray<int32>* RetPecID, bool* Lo_ReqDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeBadDamageTask");

	Params::BattleActionTaskFactory_C_MakeBadDamageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.InBst = InBst;
	Parms.HpDamage = HpDamage;
	Parms.MpDamage = MpDamage;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = std::move(Parms.RetPecID);

	if (Lo_ReqDead != nullptr)
		*Lo_ReqDead = Parms.Lo_ReqDead;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeTurnPrevCureTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetWaitList                                            (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeTurnPrevCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, TArray<int32>* RetWaitList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeTurnPrevCureTask");

	Params::BattleActionTaskFactory_C_MakeTurnPrevCureTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetWaitList != nullptr)
		*RetWaitList = std::move(Parms.RetWaitList);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeAidTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetList                                                (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeAidTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, TArray<int32>* RetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeAidTask");

	Params::BattleActionTaskFactory_C_MakeAidTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetList != nullptr)
		*RetList = std::move(Parms.RetList);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddAidTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddAidTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SkillId, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddAidTask");

	Params::BattleActionTaskFactory_C_AddAidTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeDeadTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DEAD_EFFECT                       DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEnemyKilled                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::MakeDeadTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, bool IgnoreEnemyKilled, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeDeadTask");

	Params::BattleActionTaskFactory_C_MakeDeadTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.DeltaTime = DeltaTime;
	Parms.DeadType = DeadType;
	Parms.Immediately = Immediately;
	Parms.IgnoreEnemyKilled = IgnoreEnemyKilled;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.PrintTaskType
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::PrintTaskType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "PrintTaskType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamSetTargetUnit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeedRatio                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Revise                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamSetTargetUnit(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float InterpSpeedRatio, bool InterpWait, const class FString& SocketName, const struct FVector& Revise, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamSetTargetUnit");

	Params::BattleActionTaskFactory_C_AddCamSetTargetUnit Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.InterpSpeedRatio = InterpSpeedRatio;
	Parms.InterpWait = InterpWait;
	Parms.SocketName = std::move(SocketName);
	Parms.Revise = std::move(Revise);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamFovyTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   ToFovy                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeedRatio                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamFovyTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float ToFovy, float InterpSpeedRatio, bool InterpWait, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamFovyTask");

	Params::BattleActionTaskFactory_C_AddCamFovyTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ToFovy = ToFovy;
	Parms.InterpSpeedRatio = InterpSpeedRatio;
	Parms.InterpWait = InterpWait;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABattleActionTask_C*              RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetTaskForPecID(int32 PecID, class ABattleActionTask_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetTaskForPecID");

	Params::BattleActionTaskFactory_C_GetTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSetUnitMotion
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMotionFinish                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayOneMotion                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSetUnitMotion(TArray<int32>& WaitTaskList, const class FString& ParentName, E_CHARA_MOTION_ID MotionID, int32 PartyIndex, bool WaitMotionFinish, float StartPosition, bool IsPlayOneMotion, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSetUnitMotion");

	Params::BattleActionTaskFactory_C_AddSetUnitMotion Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.MotionID = MotionID;
	Parms.PartyIndex = PartyIndex;
	Parms.WaitMotionFinish = WaitMotionFinish;
	Parms.StartPosition = StartPosition;
	Parms.IsPlayOneMotion = IsPlayOneMotion;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetBadDeadType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BAD_STATUS                            bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DEAD_EFFECT                       RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetBadDeadType(E_BAD_STATUS bst, E_BTL_DEAD_EFFECT* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetBadDeadType");

	Params::BattleActionTaskFactory_C_GetBadDeadType Parms{};

	Parms.bst = bst;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamRailSkillTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SKILL_CAM_TYPE                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsHokan                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsConsiderActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverrideHokanSpeed                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHokanSpeedMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DoNotResetUnitAveLocation                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamRailSkillTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, bool IsHokan, bool IsConsiderActor, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamRailSkillTask");

	Params::BattleActionTaskFactory_C_AddCamRailSkillTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.Type = Type;
	Parms.Param_Name = std::move(Param_Name);
	Parms.IsHokan = IsHokan;
	Parms.IsConsiderActor = IsConsiderActor;
	Parms.IsOverrideHokanSpeed = IsOverrideHokanSpeed;
	Parms.IsHokanSpeedMax = IsHokanSpeedMax;
	Parms.DoNotResetUnitAveLocation = DoNotResetUnitAveLocation;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticleData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Lifetime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TransPrio                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, class UParticleSystem* ParticleData, const struct FTransform& Transform, float Lifetime, int32 TransPrio, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayEffectTask");

	Params::BattleActionTaskFactory_C_AddPlayEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.ParticleData = ParticleData;
	Parms.Transform = std::move(Transform);
	Parms.Lifetime = Lifetime;
	Parms.TransPrio = TransPrio;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayCamShake
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PlayID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayCamShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PlayID, const class FString& RowName, class UClass* ShakeClass, float Scale, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayCamShake");

	Params::BattleActionTaskFactory_C_AddPlayCamShake Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PlayID = PlayID;
	Parms.RowName = std::move(RowName);
	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddRadialBlurTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Danage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseOrigin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddRadialBlurTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, float Value, bool Sw, float Danage, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, const struct FVector& Origin, const struct FVector& Offset, bool UseOrigin, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddRadialBlurTask");

	Params::BattleActionTaskFactory_C_AddRadialBlurTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Value = Value;
	Parms.Sw = Sw;
	Parms.Danage = Danage;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;
	Parms.Origin = std::move(Origin);
	Parms.Offset = std::move(Offset);
	Parms.UseOrigin = UseOrigin;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitBackStepTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_AVOID_DIRECTION                       Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitBackStepTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool WaitEnd, E_AVOID_DIRECTION Direction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitBackStepTask");

	Params::BattleActionTaskFactory_C_AddUnitBackStepTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.WaitEnd = WaitEnd;
	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitAttackMoveTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RevDeg                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLocationMove                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          MoveLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       AttackMotion                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitAttackMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool WaitEnd, float Speed, float RevDeg, bool IsLocationMove, const struct FVector& MoveLocation, const struct FVector& LookLocation, E_CHARA_MOTION_ID AttackMotion, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitAttackMoveTask");

	Params::BattleActionTaskFactory_C_AddUnitAttackMoveTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.WaitEnd = WaitEnd;
	Parms.Speed = Speed;
	Parms.RevDeg = RevDeg;
	Parms.IsLocationMove = IsLocationMove;
	Parms.MoveLocation = std::move(MoveLocation);
	Parms.LookLocation = std::move(LookLocation);
	Parms.AttackMotion = AttackMotion;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddMessageTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   MessageID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Program_no                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           AddString                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Elementnumber                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShowPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkillOrItemName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillAptitude                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddMessageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 MessageID, int32 Program_no, const class FString& AddString, bool Sw, float PlayRate, int32 Elementnumber, int32 ShowPosition, bool IsSkillOrItemName, int32 SkillId, int32 SkillAptitude, int32 ItemId, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddMessageTask");

	Params::BattleActionTaskFactory_C_AddMessageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.MessageID = MessageID;
	Parms.Program_no = Program_no;
	Parms.AddString = std::move(AddString);
	Parms.Sw = Sw;
	Parms.PlayRate = PlayRate;
	Parms.Elementnumber = Elementnumber;
	Parms.ShowPosition = ShowPosition;
	Parms.IsSkillOrItemName = IsSkillOrItemName;
	Parms.SkillId = SkillId;
	Parms.SkillAptitude = SkillAptitude;
	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPartyPanelCtrlTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_PANEL_CTRL                        Ctrl                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPartyPanelCtrlTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Value, E_BTL_PANEL_CTRL Ctrl, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPartyPanelCtrlTask");

	Params::BattleActionTaskFactory_C_AddPartyPanelCtrlTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Value = Value;
	Parms.Ctrl = Ctrl;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddBadStatusTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddBadStatusTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 bst, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddBadStatusTask");

	Params::BattleActionTaskFactory_C_AddBadStatusTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.bst = bst;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeTalkPartyInTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::MakeTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeTalkPartyInTask");

	Params::BattleActionTaskFactory_C_MakeTalkPartyInTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddTalkPartyInTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddTalkPartyInTask");

	Params::BattleActionTaskFactory_C_AddTalkPartyInTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddApplyUnitStateTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoCureEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLecerationDam                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UpdateLookAt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddApplyUnitStateTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddApplyUnitStateTask");

	Params::BattleActionTaskFactory_C_AddApplyUnitStateTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.NoCureEffect = NoCureEffect;
	Parms.IsLecerationDam = IsLecerationDam;
	Parms.UpdateLookAt = UpdateLookAt;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddInfoMessTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SKILL_INFO_MESS_TIMING                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BAD_STATUS                            bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMaster                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MessageID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideDurationSec                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddInfoMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, int32 SkillId, E_SKILL_INFO_MESS_TIMING Timing, E_BAD_STATUS bst, bool IsMaster, int32 MessageID, float PlayRate, float OverrideDurationSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddInfoMessTask");

	Params::BattleActionTaskFactory_C_AddInfoMessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.SkillId = SkillId;
	Parms.Timing = Timing;
	Parms.bst = bst;
	Parms.IsMaster = IsMaster;
	Parms.MessageID = MessageID;
	Parms.PlayRate = PlayRate;
	Parms.OverrideDurationSec = OverrideDurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeHeroSummonTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetValue                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeHeroSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, TArray<int32>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeHeroSummonTask");

	Params::BattleActionTaskFactory_C_MakeHeroSummonTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddRecomeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddRecomeTask");

	Params::BattleActionTaskFactory_C_AddRecomeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeActEndByBstTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BAD_STATUS                            InBst                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_EXTRA_ACTION                      ExtraAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecID                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeActEndByBstTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BAD_STATUS InBst, int32 SkillId, E_BTL_EXTRA_ACTION ExtraAction, float Time, TArray<int32>* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeActEndByBstTask");

	Params::BattleActionTaskFactory_C_MakeActEndByBstTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.InBst = InBst;
	Parms.SkillId = SkillId;
	Parms.ExtraAction = ExtraAction;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = std::move(Parms.RetPecID);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayEffectTask2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticleData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBtlTaskData                     Lo_Desc_M_Task_Data                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FBtlTaskData                     Lo_Desc_M_Task_Data_2                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FTransform                       Lo_Desc_M_Transform                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USkeletalMesh*                    ModSkeletalMesh                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                ModAnim                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ModAttachSocketName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPairTargetLocationOverride                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          PairTargetLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayEffectTask2(TArray<int32>& WaitTaskList, const class FString& ParentName, class UParticleSystem* ParticleData, int32 ActorIndex, int32 TargetIndex, const struct FBtlTaskData& Lo_Desc_M_Task_Data, const struct FBtlTaskData& Lo_Desc_M_Task_Data_2, const struct FTransform& Lo_Desc_M_Transform, class USkeletalMesh* ModSkeletalMesh, class UAnimSequenceBase* ModAnim, class FName ModAttachSocketName, bool IsPairTargetLocationOverride, const struct FVector& PairTargetLocation, bool IsIgnoreSideScale, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayEffectTask2");

	Params::BattleActionTaskFactory_C_AddPlayEffectTask2 Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ParticleData = ParticleData;
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.Lo_Desc_M_Task_Data = std::move(Lo_Desc_M_Task_Data);
	Parms.Lo_Desc_M_Task_Data_2 = std::move(Lo_Desc_M_Task_Data_2);
	Parms.Lo_Desc_M_Transform = std::move(Lo_Desc_M_Transform);
	Parms.ModSkeletalMesh = ModSkeletalMesh;
	Parms.ModAnim = ModAnim;
	Parms.ModAttachSocketName = ModAttachSocketName;
	Parms.IsPairTargetLocationOverride = IsPairTargetLocationOverride;
	Parms.PairTargetLocation = std::move(PairTargetLocation);
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitModelLoadTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   LoadID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RegisterAsAnEnemy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitModelLoadTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 LoadID, const struct FTransform& SpawnTransform, int32 PartyIndex, bool RegisterAsAnEnemy, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitModelLoadTask");

	Params::BattleActionTaskFactory_C_AddUnitModelLoadTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.LoadID = LoadID;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.PartyIndex = PartyIndex;
	Parms.RegisterAsAnEnemy = RegisterAsAnEnemy;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSummonTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseForceTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ForceTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnEffectLocation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsGodSkillSummon                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool UseForceTransform, const struct FTransform& ForceTransform, const struct FVector& ReturnEffectLocation, bool IsGodSkillSummon, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSummonTask");

	Params::BattleActionTaskFactory_C_AddSummonTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.UseForceTransform = UseForceTransform;
	Parms.ForceTransform = std::move(ForceTransform);
	Parms.ReturnEffectLocation = std::move(ReturnEffectLocation);
	Parms.IsGodSkillSummon = IsGodSkillSummon;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSummonAfterTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSummonAfterTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSummonAfterTask");

	Params::BattleActionTaskFactory_C_AddSummonAfterTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayerRecomeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayerRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayerRecomeTask");

	Params::BattleActionTaskFactory_C_AddPlayerRecomeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayerRecomeAfterTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayerRecomeAfterTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayerRecomeAfterTask");

	Params::BattleActionTaskFactory_C_AddPlayerRecomeAfterTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitActionTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_ACTION_TYPE                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FloatOption                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitActionTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, float FloatOption, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitActionTask");

	Params::BattleActionTaskFactory_C_AddUnitActionTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Action = Action;
	Parms.Option = Option;
	Parms.FloatOption = FloatOption;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.IsExistTaskForPecID_Old
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::IsExistTaskForPecID_Old(int32 PecID, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "IsExistTaskForPecID_Old");

	Params::BattleActionTaskFactory_C_IsExistTaskForPecID_Old Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSwitchCommandTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SWITCH_COMMAND                    Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSwitchCommandTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_SWITCH_COMMAND Command, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSwitchCommandTask");

	Params::BattleActionTaskFactory_C_AddSwitchCommandTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Command = Command;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddBlankExistTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddBlankExistTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddBlankExistTask");

	Params::BattleActionTaskFactory_C_AddBlankExistTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DestroyTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::DestroyTaskForPecID(int32 PecID, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DestroyTaskForPecID");

	Params::BattleActionTaskFactory_C_DestroyTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlaySETask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SEName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlay2D                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlaySETask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, const struct FVector& Location, bool IsPlay2D, bool IgnorePlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlaySETask");

	Params::BattleActionTaskFactory_C_AddPlaySETask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SEName = std::move(SEName);
	Parms.Data = Data;
	Parms.Location = std::move(Location);
	Parms.IsPlay2D = IsPlay2D;
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddAnimationCameraTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECameraAnimationSpace                   Space                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShowActorIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsParty                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ShowTargetIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FocusTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FocusActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAnimation2nd                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           VisiblePartyIndexes                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           InvisiblePartyIndexes                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    CleanUp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUseTargetScale                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddAnimationCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float Rate, ECameraAnimationSpace Space, class UCameraAnimationAsset* CameraAnimation, const struct FTransform& SpawnTransform, float BlendInTime, float BlendOutTime, int32 ShowActorIndex, bool IsParty, int32 ShowTargetIndex, int32 FocusTarget, int32 FocusActor, const class FString& SocketName, class UCameraAnimationAsset* CameraAnimation2nd, float LerpAlpha, TArray<int32>& VisiblePartyIndexes, TArray<int32>& InvisiblePartyIndexes, bool CleanUp, bool IsUseTargetScale, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddAnimationCameraTask");

	Params::BattleActionTaskFactory_C_AddAnimationCameraTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Rate = Rate;
	Parms.Space = Space;
	Parms.CameraAnimation = CameraAnimation;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.ShowActorIndex = ShowActorIndex;
	Parms.IsParty = IsParty;
	Parms.ShowTargetIndex = ShowTargetIndex;
	Parms.FocusTarget = FocusTarget;
	Parms.FocusActor = FocusActor;
	Parms.SocketName = std::move(SocketName);
	Parms.CameraAnimation2nd = CameraAnimation2nd;
	Parms.LerpAlpha = LerpAlpha;
	Parms.VisiblePartyIndexes = std::move(VisiblePartyIndexes);
	Parms.InvisiblePartyIndexes = std::move(InvisiblePartyIndexes);
	Parms.CleanUp = CleanUp;
	Parms.IsUseTargetScale = IsUseTargetScale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	VisiblePartyIndexes = std::move(Parms.VisiblePartyIndexes);
	InvisiblePartyIndexes = std::move(Parms.InvisiblePartyIndexes);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCallSummonTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCallSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCallSummonTask");

	Params::BattleActionTaskFactory_C_AddCallSummonTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.Debug_IsDamage0
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::Debug_IsDamage0(int32 PartyIndex, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "Debug_IsDamage0");

	Params::BattleActionTaskFactory_C_Debug_IsDamage0 Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCallSkillEventTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCallSkillEventTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32 Step, float RemainSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCallSkillEventTask");

	Params::BattleActionTaskFactory_C_AddCallSkillEventTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;
	Parms.Step = Step;
	Parms.RemainSec = RemainSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitMoveTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MoveTargetPos                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookTargetPos                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LookSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMoveFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FVector& MoveTargetPos, const struct FVector& LookTargetPos, float MoveTime, float LookSpeed, bool WaitMoveFinish, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitMoveTask");

	Params::BattleActionTaskFactory_C_AddUnitMoveTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.MoveTargetPos = std::move(MoveTargetPos);
	Parms.LookTargetPos = std::move(LookTargetPos);
	Parms.MoveTime = MoveTime;
	Parms.LookSpeed = LookSpeed;
	Parms.WaitMoveFinish = WaitMoveFinish;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDisplayFadeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsFadeOut                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWhite                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDisplayFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsFadeOut, bool IsWhite, float DurationSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDisplayFadeTask");

	Params::BattleActionTaskFactory_C_AddDisplayFadeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.IsFadeOut = IsFadeOut;
	Parms.IsWhite = IsWhite;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.SetOriginTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::SetOriginTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "SetOriginTransform");

	Params::BattleActionTaskFactory_C_SetOriginTransform Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetExistTaskNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetExistTaskNum(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetExistTaskNum");

	Params::BattleActionTaskFactory_C_GetExistTaskNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.SpawnActionTaskActor_Old
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlTaskDesc                     InDesc                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<int32>                           TaskWaitList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABattleActionTask_C*              RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::SpawnActionTaskActor_Old(const struct FBtlTaskDesc& InDesc, TArray<int32>& TaskWaitList, const class FString& ParentName, class UObject* Data, class ABattleActionTask_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "SpawnActionTaskActor_Old");

	Params::BattleActionTaskFactory_C_SpawnActionTaskActor_Old Parms{};

	Parms.InDesc = std::move(InDesc);
	Parms.TaskWaitList = std::move(TaskWaitList);
	Parms.ParentName = std::move(ParentName);
	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);

	TaskWaitList = std::move(Parms.TaskWaitList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CheckTask_Old
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::CheckTask_Old()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CheckTask_Old");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetTaskForPecID_Old
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABattleActionTask_C*              RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetTaskForPecID_Old(int32 PecID, class ABattleActionTask_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetTaskForPecID_Old");

	Params::BattleActionTaskFactory_C_GetTaskForPecID_Old Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.IsExistTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::IsExistTaskForPecID(int32 PecID, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "IsExistTaskForPecID");

	Params::BattleActionTaskFactory_C_IsExistTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DestroyTaskForPecID_Old
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::DestroyTaskForPecID_Old(int32 PecID, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DestroyTaskForPecID_Old");

	Params::BattleActionTaskFactory_C_DestroyTaskForPecID_Old Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ClearValidArray
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::ClearValidArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ClearValidArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDecalTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPutOnWorld                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       WorldRelativeTransform                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleSkillActionBase_C>SkillActionBase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDecalTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, bool IsPutOnWorld, const struct FTransform& WorldRelativeTransform, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDecalTask");

	Params::BattleActionTaskFactory_C_AddDecalTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);
	Parms.IsPutOnWorld = IsPutOnWorld;
	Parms.WorldRelativeTransform = std::move(WorldRelativeTransform);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;
	Parms.SkillActionBase = SkillActionBase;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddHitLightTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillInstance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddHitLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillInstance, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddHitLightTask");

	Params::BattleActionTaskFactory_C_AddHitLightTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillInstance = SkillInstance;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayCamShakeByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayCamShakeByName(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& RowName, float Scale, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayCamShakeByName");

	Params::BattleActionTaskFactory_C_AddPlayCamShakeByName Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.RowName = std::move(RowName);
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSkillLightTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightParam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSkillLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightParam, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSkillLightTask");

	Params::BattleActionTaskFactory_C_AddSkillLightTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.LightParam = std::move(LightParam);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddExtActMessTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_EXTRA_ACTION                      ExtraAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddExtActMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_EXTRA_ACTION ExtraAction, float Time, int32 ActorIndex, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddExtActMessTask");

	Params::BattleActionTaskFactory_C_AddExtActMessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ExtraAction = ExtraAction;
	Parms.Time = Time;
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDecalToEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   LoopTimes                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CycleSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectID                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    AbsolutelyNoRotatioin                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleSkillActionBase_C>SkillActionBase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDecalToEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, const struct FVector& Size, TArray<int32>& EffectID, bool AbsolutelyNoRotatioin, bool CastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDecalToEffectTask");

	Params::BattleActionTaskFactory_C_AddDecalToEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.LoopTimes = LoopTimes;
	Parms.CycleSec = CycleSec;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.Size = std::move(Size);
	Parms.EffectID = std::move(EffectID);
	Parms.AbsolutelyNoRotatioin = AbsolutelyNoRotatioin;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;
	Parms.SkillActionBase = SkillActionBase;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);
	EffectID = std::move(Parms.EffectID);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSetUnitShake
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Magnitude                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitShakeFinish                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSetUnitShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float Magnitude, float Time, bool WaitShakeFinish, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSetUnitShake");

	Params::BattleActionTaskFactory_C_AddSetUnitShake Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Magnitude = Magnitude;
	Parms.Time = Time;
	Parms.WaitShakeFinish = WaitShakeFinish;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUtilIconTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_UTIL_ICON_TYPE                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipping                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUtilIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_UTIL_ICON_TYPE Type, float PlayRate, bool IsSkipping, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUtilIconTask");

	Params::BattleActionTaskFactory_C_AddUtilIconTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Type = Type;
	Parms.PlayRate = PlayRate;
	Parms.IsSkipping = IsSkipping;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlaySEUnitAttachTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SEName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlaySEUnitAttachTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, int32 TargetIndex, const class FString& SocketName, bool IgnorePlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlaySEUnitAttachTask");

	Params::BattleActionTaskFactory_C_AddPlaySEUnitAttachTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SEName = std::move(SEName);
	Parms.Data = Data;
	Parms.TargetIndex = TargetIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetMainInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_MainInterface>AsBPI_Main_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::GetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetMainInterface");

	Params::BattleActionTaskFactory_C_GetMainInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Main_Interface != nullptr)
		*AsBPI_Main_Interface = Parms.AsBPI_Main_Interface;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddMagGaugeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AddValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddMagGaugeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddMagGaugeTask");

	Params::BattleActionTaskFactory_C_AddMagGaugeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.AddValue = AddValue;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeAddMagGauge
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AddMagGauge                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecID                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeAddMagGauge(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddMagGauge, int32 TargetIndex, TArray<int32>* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeAddMagGauge");

	Params::BattleActionTaskFactory_C_MakeAddMagGauge Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.AddMagGauge = AddMagGauge;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = std::move(Parms.RetPecID);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CommandCameraStack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::CommandCameraStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CommandCameraStack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCamRailCommandTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CAM_TYPE                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StopWait                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaWait                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCamRailCommandTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, bool StopWait, float DeltaWait, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCamRailCommandTask");

	Params::BattleActionTaskFactory_C_AddCamRailCommandTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Type = Type;
	Parms.InterpWait = InterpWait;
	Parms.StopWait = StopWait;
	Parms.DeltaWait = DeltaWait;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddReichiPointTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AddValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddReichiPointTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, float PlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddReichiPointTask");

	Params::BattleActionTaskFactory_C_AddReichiPointTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.AddValue = AddValue;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPlayAbsorptionEffectTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AbsorptionPointSocket                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AbsorptionPointOffset                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     AbsorptionRadius                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReverse                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPlayAbsorptionEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionRadius, bool IsReverse, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPlayAbsorptionEffectTask");

	Params::BattleActionTaskFactory_C_AddPlayAbsorptionEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.AbsorptionPointSocket = AbsorptionPointSocket;
	Parms.AbsorptionPointOffset = std::move(AbsorptionPointOffset);
	Parms.AbsorptionRadius = AbsorptionRadius;
	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BeginHitStopTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BeginHitStopTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BeginHitStopTask");

	Params::BattleActionTaskFactory_C_BeginHitStopTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCameraDOFTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   FocalDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCameraDOFTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float FocalDistance, float Scale, float DurationSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCameraDOFTask");

	Params::BattleActionTaskFactory_C_AddCameraDOFTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.FocalDistance = FocalDistance;
	Parms.Scale = Scale;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.UpdateTask
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::UpdateTask(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "UpdateTask");

	Params::BattleActionTaskFactory_C_UpdateTask Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetTaskTypeTaskCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_TASK_COM                          TaskType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetCnt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetTaskTypeTaskCnt(E_BTL_TASK_COM TaskType, int32* RetCnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetTaskTypeTaskCnt");

	Params::BattleActionTaskFactory_C_GetTaskTypeTaskCnt Parms{};

	Parms.TaskType = TaskType;

	UObject::ProcessEvent(Func, &Parms);

	if (RetCnt != nullptr)
		*RetCnt = Parms.RetCnt;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPressIconTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_PRESS_TYPE                        PressType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DoCalcAndApply                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPressIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float PlayRate, E_BTL_PRESS_TYPE PressType, bool DoCalcAndApply, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPressIconTask");

	Params::BattleActionTaskFactory_C_AddPressIconTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PlayRate = PlayRate;
	Parms.PressType = PressType;
	Parms.DoCalcAndApply = DoCalcAndApply;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUpliftingTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUpliftingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUpliftingTask");

	Params::BattleActionTaskFactory_C_AddUpliftingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DestroyAllTask
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::DestroyAllTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DestroyAllTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddFirstSettingTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddFirstSettingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddFirstSettingTask");

	Params::BattleActionTaskFactory_C_AddFirstSettingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddBeHomeSideAllTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddBeHomeSideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddBeHomeSideAllTask");

	Params::BattleActionTaskFactory_C_AddBeHomeSideAllTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitVisibilitySideAllTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitVisibilitySideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitVisibilitySideAllTask");

	Params::BattleActionTaskFactory_C_AddUnitVisibilitySideAllTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetNumEffType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Hp                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Mp                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_NUMEFF                            Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetNumEffType(int32 Hp, int32 Mp, E_BTL_NUMEFF* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetNumEffType");

	Params::BattleActionTaskFactory_C_GetNumEffType Parms{};

	Parms.Hp = Hp;
	Parms.Mp = Mp;

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddBeHomeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddBeHomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddBeHomeTask");

	Params::BattleActionTaskFactory_C_AddBeHomeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitVisibilityTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ParticleInterlock                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DeactivateParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitVisibilityTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, bool ParticleInterlock, bool DeactivateParticle, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitVisibilityTask");

	Params::BattleActionTaskFactory_C_AddUnitVisibilityTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Sw = Sw;
	Parms.ParticleInterlock = ParticleInterlock;
	Parms.DeactivateParticle = DeactivateParticle;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSetActorTransformTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSetActorTransformTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FTransform& Transform, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSetActorTransformTask");

	Params::BattleActionTaskFactory_C_AddSetActorTransformTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddSummonTsukuyomiTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddSummonTsukuyomiTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddSummonTsukuyomiTask");

	Params::BattleActionTaskFactory_C_AddSummonTsukuyomiTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDrawPlayerUpliftingGaugeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsUplifting                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SpendGaugeOnly                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddDrawPlayerUpliftingGaugeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsUplifting, bool SpendGaugeOnly, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDrawPlayerUpliftingGaugeTask");

	Params::BattleActionTaskFactory_C_AddDrawPlayerUpliftingGaugeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.IsUplifting = IsUplifting;
	Parms.SpendGaugeOnly = SpendGaugeOnly;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeUpliftingTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           RetPecID                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeUpliftingTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, TArray<int32>* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeUpliftingTask");

	Params::BattleActionTaskFactory_C_MakeUpliftingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = std::move(Parms.RetPecID);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddInfoMessByLabelTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SelectSkillScriptMessage                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddInfoMessByLabelTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& Label, int32 PartyIndex, bool SelectSkillScriptMessage, float PlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddInfoMessByLabelTask");

	Params::BattleActionTaskFactory_C_AddInfoMessByLabelTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Label = std::move(Label);
	Parms.PartyIndex = PartyIndex;
	Parms.SelectSkillScriptMessage = SelectSkillScriptMessage;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeKuishibariInfoTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTask                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param1Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoCallCamera                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           RetPecIDs                                              (Parm, OutParm)
// TArray<int32>                           WaitIDs                                                (Parm, OutParm)

void UBattleActionTaskFactory_C::MakeKuishibariInfoTask(TArray<int32>& WaitTask, const class FString& ParentName, int32 TargetIndex, int32 Param1Index, int32 SkillId, float PlayRate, bool NoCallCamera, TArray<int32>* RetPecIDs, TArray<int32>* WaitIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeKuishibariInfoTask");

	Params::BattleActionTaskFactory_C_MakeKuishibariInfoTask Parms{};

	Parms.WaitTask = std::move(WaitTask);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.Param1Index = Param1Index;
	Parms.SkillId = SkillId;
	Parms.PlayRate = PlayRate;
	Parms.NoCallCamera = NoCallCamera;

	UObject::ProcessEvent(Func, &Parms);

	WaitTask = std::move(Parms.WaitTask);

	if (RetPecIDs != nullptr)
		*RetPecIDs = std::move(Parms.RetPecIDs);

	if (WaitIDs != nullptr)
		*WaitIDs = std::move(Parms.WaitIDs);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CallCameraCurrentForce
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::CallCameraCurrentForce(TArray<int32>& WaitTaskList, const class FString& ParentName, float InterpSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CallCameraCurrentForce");

	Params::BattleActionTaskFactory_C_CallCameraCurrentForce Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddStopAllSE Task
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddStopAllSE_Task(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddStopAllSE Task");

	Params::BattleActionTaskFactory_C_AddStopAllSE_Task Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DestroySkipRelationTask
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::DestroySkipRelationTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DestroySkipRelationTask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddIgnoreSkillSkipTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddIgnoreSkillSkipTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddIgnoreSkillSkipTask");

	Params::BattleActionTaskFactory_C_AddIgnoreSkillSkipTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddStopAllParticle Task
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddStopAllParticle_Task(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddStopAllParticle Task");

	Params::BattleActionTaskFactory_C_AddStopAllParticle_Task Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.OpenTutorialWindowTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_TUTORIAL_WINDOW_MESSAGE_TYPE          TutorialType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartRemainSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::OpenTutorialWindowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_TUTORIAL_WINDOW_MESSAGE_TYPE TutorialType, float StartRemainSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "OpenTutorialWindowTask");

	Params::BattleActionTaskFactory_C_OpenTutorialWindowTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TutorialType = TutorialType;
	Parms.StartRemainSec = StartRemainSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.GetBattlePlayRate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::GetBattlePlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "GetBattlePlayRate");

	Params::BattleActionTaskFactory_C_GetBattlePlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnitScaleResetTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnitScaleResetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnitScaleResetTask");

	Params::BattleActionTaskFactory_C_AddUnitScaleResetTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCtrlPostProcessTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class UMaterialInstance*>        PostMaterials                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSettings                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCtrlPostProcessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, TArray<class UMaterialInstance*>& PostMaterials, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCtrlPostProcessTask");

	Params::BattleActionTaskFactory_C_AddCtrlPostProcessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PostMaterials = std::move(PostMaterials);
	Parms.MaterialAnimSettings = std::move(MaterialAnimSettings);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	PostMaterials = std::move(Parms.PostMaterials);
	MaterialAnimSettings = std::move(Parms.MaterialAnimSettings);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ExchangeTaskData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_TASK_COM                          Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBtlTaskData                     SendData                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   OverrunSec                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::ExchangeTaskData(E_BTL_TASK_COM& Command, int32& PecID, struct FBtlTaskData& SendData, float OverrunSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ExchangeTaskData");

	Params::BattleActionTaskFactory_C_ExchangeTaskData Parms{};

	Parms.Command = Command;
	Parms.PecID = PecID;
	Parms.SendData = std::move(SendData);
	Parms.OverrunSec = OverrunSec;

	UObject::ProcessEvent(Func, &Parms);

	Command = Parms.Command;
	PecID = Parms.PecID;
	SendData = std::move(Parms.SendData);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakePartyPanelShowTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::MakePartyPanelShowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakePartyPanelShowTask");

	Params::BattleActionTaskFactory_C_MakePartyPanelShowTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.MakeCloseUpCameraTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HaveToBeHome                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::MakeCloseUpCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE CamType, bool HaveToBeHome, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "MakeCloseUpCameraTask");

	Params::BattleActionTaskFactory_C_MakeCloseUpCameraTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.CamType = CamType;
	Parms.HaveToBeHome = HaveToBeHome;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.FindPoolTaskListKey
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Key                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::FindPoolTaskListKey(TArray<int32>& WaitTaskList, int32* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "FindPoolTaskListKey");

	Params::BattleActionTaskFactory_C_FindPoolTaskListKey Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Key != nullptr)
		*Key = Parms.Key;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddPoolTaskList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABattleActionTask_C*              Task                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddPoolTaskList(TArray<int32>& WaitTaskList, class ABattleActionTask_C*& Task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddPoolTaskList");

	Params::BattleActionTaskFactory_C_AddPoolTaskList Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.Task = Task;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	Task = Parms.Task;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.RetrievePoolTaskList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBattleTaskArray                 Tasklist                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::RetrievePoolTaskList(TArray<int32>& WaitTaskList, struct FBattleTaskArray* Tasklist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "RetrievePoolTaskList");

	Params::BattleActionTaskFactory_C_RetrievePoolTaskList Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Tasklist != nullptr)
		*Tasklist = std::move(Parms.Tasklist);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.UpdateProcessTaskList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABattleActionTask_C*>      Tasklist                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   OverrunSec                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceLoop                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::UpdateProcessTaskList(float DeltaSec, TArray<class ABattleActionTask_C*>& Tasklist, float* OverrunSec, bool* ForceLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "UpdateProcessTaskList");

	Params::BattleActionTaskFactory_C_UpdateProcessTaskList Parms{};

	Parms.DeltaSec = DeltaSec;
	Parms.Tasklist = std::move(Tasklist);

	UObject::ProcessEvent(Func, &Parms);

	Tasklist = std::move(Parms.Tasklist);

	if (OverrunSec != nullptr)
		*OverrunSec = Parms.OverrunSec;

	if (ForceLoop != nullptr)
		*ForceLoop = Parms.ForceLoop;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.FindReadyPoolTaskList
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Key                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBattleTaskArray                 Tasklist                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::FindReadyPoolTaskList(bool* IsValid, int32* Key, struct FBattleTaskArray* Tasklist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "FindReadyPoolTaskList");

	Params::BattleActionTaskFactory_C_FindReadyPoolTaskList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (Key != nullptr)
		*Key = Parms.Key;

	if (Tasklist != nullptr)
		*Tasklist = std::move(Parms.Tasklist);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ErasePoolTaskList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::ErasePoolTaskList(int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ErasePoolTaskList");

	Params::BattleActionTaskFactory_C_ErasePoolTaskList Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CalcOverrunSec
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrunSec                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::CalcOverrunSec(int32 Key, float* OverrunSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CalcOverrunSec");

	Params::BattleActionTaskFactory_C_CalcOverrunSec Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (OverrunSec != nullptr)
		*OverrunSec = Parms.OverrunSec;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.DebugDrawRemainTasks
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::DebugDrawRemainTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "DebugDrawRemainTasks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.IsTerminalTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTerminal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::IsTerminalTask(int32 PecID, bool* IsTerminal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "IsTerminalTask");

	Params::BattleActionTaskFactory_C_IsTerminalTask Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTerminal != nullptr)
		*IsTerminal = Parms.IsTerminal;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddDebugTaskInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FDebugBattleTaskInfo             TaskInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBattleActionTaskFactory_C::AddDebugTaskInfo(const class FString& Info, struct FDebugBattleTaskInfo& TaskInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddDebugTaskInfo");

	Params::BattleActionTaskFactory_C_AddDebugTaskInfo Parms{};

	Parms.Info = std::move(Info);
	Parms.TaskInfo = std::move(TaskInfo);

	UObject::ProcessEvent(Func, &Parms);

	TaskInfo = std::move(Parms.TaskInfo);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.OutputDebugTaskInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Filename                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::OutputDebugTaskInfo(const class FString& FilePath, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "OutputDebugTaskInfo");

	Params::BattleActionTaskFactory_C_OutputDebugTaskInfo Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.ResetDebugTaskInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleActionTaskFactory_C::ResetDebugTaskInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "ResetDebugTaskInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.RetrieveMostShortWaitSec
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABattleActionTask_C*>      Tasklist                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   WaitSec                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::RetrieveMostShortWaitSec(TArray<class ABattleActionTask_C*>& Tasklist, float* WaitSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "RetrieveMostShortWaitSec");

	Params::BattleActionTaskFactory_C_RetrieveMostShortWaitSec Parms{};

	Parms.Tasklist = std::move(Tasklist);

	UObject::ProcessEvent(Func, &Parms);

	Tasklist = std::move(Parms.Tasklist);

	if (WaitSec != nullptr)
		*WaitSec = Parms.WaitSec;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddResetCharaParticleTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddResetCharaParticleTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddResetCharaParticleTask");

	Params::BattleActionTaskFactory_C_AddResetCharaParticleTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.RemoveTaskFromPool
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleActionTask_C*              Task                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::RemoveTaskFromPool(class ABattleActionTask_C*& Task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "RemoveTaskFromPool");

	Params::BattleActionTaskFactory_C_RemoveTaskFromPool Parms{};

	Parms.Task = Task;

	UObject::ProcessEvent(Func, &Parms);

	Task = Parms.Task;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddUnlockAchievementTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EAchievementFlag                        Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddUnlockAchievementTask(TArray<int32>& WaitTaskList, const class FString& ParentName, EAchievementFlag Achievement, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddUnlockAchievementTask");

	Params::BattleActionTaskFactory_C_AddUnlockAchievementTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.UnlockAchievementBadDamageDead
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::UnlockAchievementBadDamageDead(int32 SrcPartyIndex, int32 DstPartyIndex, bool IsDead, TArray<int32>& WaitTaskList, const class FString& ParentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "UnlockAchievementBadDamageDead");

	Params::BattleActionTaskFactory_C_UnlockAchievementBadDamageDead Parms{};

	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.IsDead = IsDead;
	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_GetMainWork
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_GetMainWork(TScriptInterface<class IBPI_BattleMain_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_GetMainWork");

	Params::BattleActionTaskFactory_C_BI_GetMainWork Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.AddCtrlCharaMaterialTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSettings                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::AddCtrlCharaMaterialTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "AddCtrlCharaMaterialTask");

	Params::BattleActionTaskFactory_C_AddCtrlCharaMaterialTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.MaterialAnimSettings = std::move(MaterialAnimSettings);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	MaterialAnimSettings = std::move(Parms.MaterialAnimSettings);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.CheckStopAutoBattle
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DoStop                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::CheckStopAutoBattle(int32 TargetIndex, int32 Damage, bool IsDead, bool* DoStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "CheckStopAutoBattle");

	Params::BattleActionTaskFactory_C_CheckStopAutoBattle Parms{};

	Parms.TargetIndex = TargetIndex;
	Parms.Damage = Damage;
	Parms.IsDead = IsDead;

	UObject::ProcessEvent(Func, &Parms);

	if (DoStop != nullptr)
		*DoStop = Parms.DoStop;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_GetParentNameTaskCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetCnt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_GetParentNameTaskCnt(const class FString& ParentName, int32* RetCnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_GetParentNameTaskCnt");

	Params::BattleActionTaskFactory_C_BI_GetParentNameTaskCnt Parms{};

	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	if (RetCnt != nullptr)
		*RetCnt = Parms.RetCnt;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSetUnitMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMotionFinish                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSetUnitMotion(TArray<int32>& WaitTaskList, const class FString& ParentName, E_CHARA_MOTION_ID MotionID, int32 PartyIndex, bool WaitMotionFinish, float StartPosition, bool IsPlayOneScale, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSetUnitMotion");

	Params::BattleActionTaskFactory_C_BI_AddSetUnitMotion Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.MotionID = MotionID;
	Parms.PartyIndex = PartyIndex;
	Parms.WaitMotionFinish = WaitMotionFinish;
	Parms.StartPosition = StartPosition;
	Parms.IsPlayOneScale = IsPlayOneScale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCamRailSkillTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SKILL_CAM_TYPE                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsHokan                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsConsiderActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverrideHokanSpeed                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHokanSpeedMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DoNotResetUnitAveLocation                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCamRailSkillTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, bool IsHokan, bool IsConsiderActor, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCamRailSkillTask");

	Params::BattleActionTaskFactory_C_BI_AddCamRailSkillTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.Type = Type;
	Parms.Param_Name = std::move(Param_Name);
	Parms.IsHokan = IsHokan;
	Parms.IsConsiderActor = IsConsiderActor;
	Parms.IsOverrideHokanSpeed = IsOverrideHokanSpeed;
	Parms.IsHokanSpeedMax = IsHokanSpeedMax;
	Parms.DoNotResetUnitAveLocation = DoNotResetUnitAveLocation;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPlayEffectTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticleData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBtlTaskData                     TaskData                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FBtlTaskData                     TaskData2                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USkeletalMesh*                    ModSkeletalMesh                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                ModAnim                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ModAttachSocketName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPairTargetOverride                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          PairTargetLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPlayEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UParticleSystem* ParticleData, int32 ActorIndex, int32 TargetIndex, const struct FBtlTaskData& TaskData, const struct FBtlTaskData& TaskData2, const struct FTransform& Transform, class USkeletalMesh* ModSkeletalMesh, class UAnimSequenceBase* ModAnim, class FName ModAttachSocketName, bool IsPairTargetOverride, const struct FVector& PairTargetLocation, bool IsIgnoreSideScale, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPlayEffectTask");

	Params::BattleActionTaskFactory_C_BI_AddPlayEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ParticleData = ParticleData;
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.TaskData = std::move(TaskData);
	Parms.TaskData2 = std::move(TaskData2);
	Parms.Transform = std::move(Transform);
	Parms.ModSkeletalMesh = ModSkeletalMesh;
	Parms.ModAnim = ModAnim;
	Parms.ModAttachSocketName = ModAttachSocketName;
	Parms.IsPairTargetOverride = IsPairTargetOverride;
	Parms.PairTargetLocation = std::move(PairTargetLocation);
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDeltaWaitTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddDeltaWaitTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDeltaWaitTask");

	Params::BattleActionTaskFactory_C_BI_AddDeltaWaitTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPlayCamShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PlayID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPlayCamShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PlayID, const class FString& RowName, class UClass* ShakeClass, float Scale, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPlayCamShake");

	Params::BattleActionTaskFactory_C_BI_AddPlayCamShake Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PlayID = PlayID;
	Parms.RowName = std::move(RowName);
	Parms.ShakeClass = ShakeClass;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddRadialBlurTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseOrigin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddRadialBlurTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, float Value, bool Sw, float Damage, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, const struct FVector& Origin, const struct FVector& Offset, bool UseOrigin, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddRadialBlurTask");

	Params::BattleActionTaskFactory_C_BI_AddRadialBlurTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Value = Value;
	Parms.Sw = Sw;
	Parms.Damage = Damage;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;
	Parms.Origin = std::move(Origin);
	Parms.Offset = std::move(Offset);
	Parms.UseOrigin = UseOrigin;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeDeadTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DEAD_EFFECT                       DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEnemyKilled                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_MakeDeadTask(TArray<int32>& NewParam, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, bool IgnoreEnemyKilled, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeDeadTask");

	Params::BattleActionTaskFactory_C_BI_MakeDeadTask Parms{};

	Parms.NewParam = std::move(NewParam);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.DeltaTime = DeltaTime;
	Parms.DeadType = DeadType;
	Parms.Immediately = Immediately;
	Parms.IgnoreEnemyKilled = IgnoreEnemyKilled;

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitAttackMoveTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RevDeg                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLocationMove                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          MoveLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       AttackMotion                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitAttackMoveTask(TArray<int32>& NewParam, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool WaitEnd, float Speed, float RevDeg, bool IsLocationMove, const struct FVector& MoveLocation, const struct FVector& LookLocation, E_CHARA_MOTION_ID AttackMotion, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitAttackMoveTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitAttackMoveTask Parms{};

	Parms.NewParam = std::move(NewParam);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.WaitEnd = WaitEnd;
	Parms.Speed = Speed;
	Parms.RevDeg = RevDeg;
	Parms.IsLocationMove = IsLocationMove;
	Parms.MoveLocation = std::move(MoveLocation);
	Parms.LookLocation = std::move(LookLocation);
	Parms.AttackMotion = AttackMotion;

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddMessageTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   MessageID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Program_no                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           AddString                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Elementnumber                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShowPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkillOrItemName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillAptitude                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddMessageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 MessageID, int32 Program_no, const class FString& AddString, bool Sw, float PlayRate, int32 Elementnumber, int32 ShowPosition, bool IsSkillOrItemName, int32 SkillId, int32 SkillAptitude, int32 ItemId, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddMessageTask");

	Params::BattleActionTaskFactory_C_BI_AddMessageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.MessageID = MessageID;
	Parms.Program_no = Program_no;
	Parms.AddString = std::move(AddString);
	Parms.Sw = Sw;
	Parms.PlayRate = PlayRate;
	Parms.Elementnumber = Elementnumber;
	Parms.ShowPosition = ShowPosition;
	Parms.IsSkillOrItemName = IsSkillOrItemName;
	Parms.SkillId = SkillId;
	Parms.SkillAptitude = SkillAptitude;
	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddNumEffectTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HPNum                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MPNum                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_NUMEFF                            Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_UTIL_ICON_TYPE                    HitType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CriticalLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RandArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsResist                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          PositionOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_KUISHIBARI_LEVEL                      Kuishibari                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipping                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckTargetInCamera                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddNumEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 HPNum, int32 MPNum, E_BTL_NUMEFF Type, E_BTL_UTIL_ICON_TYPE HitType, int32 CriticalLevel, float RandArea, float PlayRate, bool IsResist, const struct FVector& PositionOffset, bool IsDead, E_KUISHIBARI_LEVEL Kuishibari, bool IsSkipping, bool CheckTargetInCamera, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddNumEffectTask");

	Params::BattleActionTaskFactory_C_BI_AddNumEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.HPNum = HPNum;
	Parms.MPNum = MPNum;
	Parms.Type = Type;
	Parms.HitType = HitType;
	Parms.CriticalLevel = CriticalLevel;
	Parms.RandArea = RandArea;
	Parms.PlayRate = PlayRate;
	Parms.IsResist = IsResist;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.IsDead = IsDead;
	Parms.Kuishibari = Kuishibari;
	Parms.IsSkipping = IsSkipping;
	Parms.CheckTargetInCamera = CheckTargetInCamera;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPartyPanelCtrlTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_PANEL_CTRL                        Ctrl                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPartyPanelCtrlTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Value, E_BTL_PANEL_CTRL Ctrl, bool Sw, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPartyPanelCtrlTask");

	Params::BattleActionTaskFactory_C_BI_AddPartyPanelCtrlTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Value = Value;
	Parms.Ctrl = Ctrl;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitBackStepTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_AVOID_DIRECTION                       Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitBackStepTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool WaitEnd, E_AVOID_DIRECTION Direction, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitBackStepTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitBackStepTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.WaitEnd = WaitEnd;
	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddApplyUnitStateTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoCureEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLecerationDam                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UpdateLookAt                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddApplyUnitStateTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddApplyUnitStateTask");

	Params::BattleActionTaskFactory_C_BI_AddApplyUnitStateTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.NoCureEffect = NoCureEffect;
	Parms.IsLecerationDam = IsLecerationDam;
	Parms.UpdateLookAt = UpdateLookAt;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddRecomeTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddRecomeTask");

	Params::BattleActionTaskFactory_C_BI_AddRecomeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddInfoMessTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SKILL_INFO_MESS_TIMING                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BAD_STATUS                            bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMaster                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MsgID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideDurationSec                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddInfoMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, int32 SkillId, E_SKILL_INFO_MESS_TIMING Timing, E_BAD_STATUS bst, bool IsMaster, int32 MsgID, float PlayRate, float OverrideDurationSec, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddInfoMessTask");

	Params::BattleActionTaskFactory_C_BI_AddInfoMessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.SkillId = SkillId;
	Parms.Timing = Timing;
	Parms.bst = bst;
	Parms.IsMaster = IsMaster;
	Parms.MsgID = MsgID;
	Parms.PlayRate = PlayRate;
	Parms.OverrideDurationSec = OverrideDurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitActionTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_ACTION_TYPE                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FloatOption                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitActionTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, float FloatOption, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitActionTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitActionTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Action = Action;
	Parms.Option = Option;
	Parms.FloatOption = FloatOption;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_IsExistTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_IsExistTaskForPecID(int32 PecID, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_IsExistTaskForPecID");

	Params::BattleActionTaskFactory_C_BI_IsExistTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddBlankExistTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddBlankExistTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddBlankExistTask");

	Params::BattleActionTaskFactory_C_BI_AddBlankExistTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_DestroyTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_DestroyTaskForPecID(int32 PecID, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_DestroyTaskForPecID");

	Params::BattleActionTaskFactory_C_BI_DestroyTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPlaySETask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SEName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlay2D                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPlaySETask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, const struct FVector& Location, bool IsPlay2D, bool IgnorePlayRate, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPlaySETask");

	Params::BattleActionTaskFactory_C_BI_AddPlaySETask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SEName = std::move(SEName);
	Parms.Data = Data;
	Parms.Location = std::move(Location);
	Parms.IsPlay2D = IsPlay2D;
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_PrintTaskType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_PrintTaskType(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_PrintTaskType");

	Params::BattleActionTaskFactory_C_BI_PrintTaskType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddAnimationCameraTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECameraAnimationSpace                   Space                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAsset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShowActorIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsParty                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ShowTargetIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FocusTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FocusActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAsset2nd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           VisiblePartyIndexes                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           InvisiblePartyIndexes                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    CleanUp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUseTargetScale                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddAnimationCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float Rate, ECameraAnimationSpace Space, class UCameraAnimationAsset* CameraAsset, const struct FTransform& SpawnTransform, float BlendInTime, float BlendOutTime, int32 ShowActorIndex, bool IsParty, int32 ShowTargetIndex, int32 FocusTarget, int32 FocusActor, const class FString& SocketName, class UCameraAnimationAsset* CameraAsset2nd, float LerpAlpha, TArray<int32>& VisiblePartyIndexes, TArray<int32>& InvisiblePartyIndexes, bool CleanUp, bool IsUseTargetScale, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddAnimationCameraTask");

	Params::BattleActionTaskFactory_C_BI_AddAnimationCameraTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Rate = Rate;
	Parms.Space = Space;
	Parms.CameraAsset = CameraAsset;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.ShowActorIndex = ShowActorIndex;
	Parms.IsParty = IsParty;
	Parms.ShowTargetIndex = ShowTargetIndex;
	Parms.FocusTarget = FocusTarget;
	Parms.FocusActor = FocusActor;
	Parms.SocketName = std::move(SocketName);
	Parms.CameraAsset2nd = CameraAsset2nd;
	Parms.LerpAlpha = LerpAlpha;
	Parms.VisiblePartyIndexes = std::move(VisiblePartyIndexes);
	Parms.InvisiblePartyIndexes = std::move(InvisiblePartyIndexes);
	Parms.CleanUp = CleanUp;
	Parms.IsUseTargetScale = IsUseTargetScale;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	VisiblePartyIndexes = std::move(Parms.VisiblePartyIndexes);
	InvisiblePartyIndexes = std::move(Parms.InvisiblePartyIndexes);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCallSummonTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCallSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCallSummonTask");

	Params::BattleActionTaskFactory_C_BI_AddCallSummonTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCallSkillEventTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCallSkillEventTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UObject* SkillAction, int32 Step, float RemainSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCallSkillEventTask");

	Params::BattleActionTaskFactory_C_BI_AddCallSkillEventTask Parms{};

	Parms.WaitCommandIndex = std::move(WaitCommandIndex);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;
	Parms.Step = Step;
	Parms.RemainSec = RemainSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitCommandIndex = std::move(Parms.WaitCommandIndex);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitMoveTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MoveTargetPos                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookTargetPos                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LookSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMoveFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FVector& MoveTargetPos, const struct FVector& LookTargetPos, float MoveTime, float LookSpeed, bool WaitMoveFinish, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitMoveTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitMoveTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.MoveTargetPos = std::move(MoveTargetPos);
	Parms.LookTargetPos = std::move(LookTargetPos);
	Parms.MoveTime = MoveTime;
	Parms.LookSpeed = LookSpeed;
	Parms.WaitMoveFinish = WaitMoveFinish;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDisplayFadeTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsFadeOut                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWhite                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddDisplayFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsFadeOut, bool IsWhite, float DurationSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDisplayFadeTask");

	Params::BattleActionTaskFactory_C_BI_AddDisplayFadeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.IsFadeOut = IsFadeOut;
	Parms.IsWhite = IsWhite;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddHitLightTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillInstance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddHitLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillInstance, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddHitLightTask");

	Params::BattleActionTaskFactory_C_BI_AddHitLightTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillInstance = SkillInstance;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDecalTask2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPutOnPartyCenter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       PartyCenterRelativeTrans                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCastOnlyStaticMesh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleSkillActionBase_C>SkillActionBase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddDecalTask2(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool IsPutOnPartyCenter, const struct FTransform& PartyCenterRelativeTrans, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDecalTask2");

	Params::BattleActionTaskFactory_C_BI_AddDecalTask2 Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.IsPutOnPartyCenter = IsPutOnPartyCenter;
	Parms.PartyCenterRelativeTrans = std::move(PartyCenterRelativeTrans);
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.IsCastOnlyStaticMesh = IsCastOnlyStaticMesh;
	Parms.SkillActionBase = SkillActionBase;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSkillLightTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightParam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSkillLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightParam, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSkillLightTask");

	Params::BattleActionTaskFactory_C_BI_AddSkillLightTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.LightParam = std::move(LightParam);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitStayDirToTargetTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LookPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitStayDirToTargetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, float Speed, bool UseVector, const struct FVector& LookPoint, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitStayDirToTargetTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitStayDirToTargetTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.Speed = Speed;
	Parms.UseVector = UseVector;
	Parms.LookPoint = std::move(LookPoint);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddExtActMessTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_EXTRA_ACTION                      ExtraAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddExtActMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_EXTRA_ACTION ExtraAction, float Time, int32 ActorIndex, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddExtActMessTask");

	Params::BattleActionTaskFactory_C_BI_AddExtActMessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ExtraAction = ExtraAction;
	Parms.Time = Time;
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDecalToEffectTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UMaterialInstance*                Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   AnimSetting                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   LoopTimes                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CycleSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotRandMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectID                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCastOnlyStaticMesh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleSkillActionBase_C>SkillActionBase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddDecalToEffectTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotRandMin, float RotRandMax, const struct FVector& Size, TArray<int32>& EffectID, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDecalToEffectTask");

	Params::BattleActionTaskFactory_C_BI_AddDecalToEffectTask Parms{};

	Parms.WaitCommandIndex = std::move(WaitCommandIndex);
	Parms.ParentName = std::move(ParentName);
	Parms.Material = Material;
	Parms.AnimSetting = std::move(AnimSetting);
	Parms.LoopTimes = LoopTimes;
	Parms.CycleSec = CycleSec;
	Parms.Rotation = std::move(Rotation);
	Parms.RotRandMin = RotRandMin;
	Parms.RotRandMax = RotRandMax;
	Parms.Size = std::move(Size);
	Parms.EffectID = std::move(EffectID);
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.IsCastOnlyStaticMesh = IsCastOnlyStaticMesh;
	Parms.SkillActionBase = SkillActionBase;

	UObject::ProcessEvent(Func, &Parms);

	WaitCommandIndex = std::move(Parms.WaitCommandIndex);
	AnimSetting = std::move(Parms.AnimSetting);
	EffectID = std::move(Parms.EffectID);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_GetTaskForPecID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActionTask                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_GetTaskForPecID(int32 PecID, class AActor** ActionTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_GetTaskForPecID");

	Params::BattleActionTaskFactory_C_BI_GetTaskForPecID Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (ActionTask != nullptr)
		*ActionTask = Parms.ActionTask;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSetUnitShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Magnitude                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitShakeFinish                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSetUnitShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float Magnitude, float Time, bool WaitShakeFinish, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSetUnitShake");

	Params::BattleActionTaskFactory_C_BI_AddSetUnitShake Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Magnitude = Magnitude;
	Parms.Time = Time;
	Parms.WaitShakeFinish = WaitShakeFinish;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUtilIconTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_UTIL_ICON_TYPE                    IconType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipping                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUtilIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_UTIL_ICON_TYPE IconType, float PlayRate, bool IsSkipping, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUtilIconTask");

	Params::BattleActionTaskFactory_C_BI_AddUtilIconTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.IconType = IconType;
	Parms.PlayRate = PlayRate;
	Parms.IsSkipping = IsSkipping;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPlaySEUnitAttachTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SEName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPlaySEUnitAttachTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, int32 TargetIndex, const class FString& SocketName, bool IgnorePlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPlaySEUnitAttachTask");

	Params::BattleActionTaskFactory_C_BI_AddPlaySEUnitAttachTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SEName = std::move(SEName);
	Parms.Data = Data;
	Parms.TargetIndex = TargetIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeAddMagGaugeTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AddMagGauge                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecID                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::BI_MakeAddMagGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddMagGauge, int32 TargetIndex, TArray<int32>* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeAddMagGaugeTask");

	Params::BattleActionTaskFactory_C_BI_MakeAddMagGaugeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.AddMagGauge = AddMagGauge;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = std::move(Parms.RetPecID);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddReichiPointTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AddValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddReichiPointTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, float PlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddReichiPointTask");

	Params::BattleActionTaskFactory_C_BI_AddReichiPointTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.AddValue = AddValue;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPlayAbsorptionEffectTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AbsorptionPointSocket                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AbsorptionPointOffset                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     AbsorptionRadius                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReverse                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPlayAbsorptionEffectTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionRadius, bool IsReverse, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPlayAbsorptionEffectTask");

	Params::BattleActionTaskFactory_C_BI_AddPlayAbsorptionEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;
	Parms.AbsorptionPointSocket = AbsorptionPointSocket;
	Parms.AbsorptionPointOffset = std::move(AbsorptionPointOffset);
	Parms.AbsorptionRadius = AbsorptionRadius;
	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_BeginHitStop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_BeginHitStop(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_BeginHitStop");

	Params::BattleActionTaskFactory_C_BI_BeginHitStop Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCameraDOFTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   FocalDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCameraDOFTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float FocalDistance, float Scale, float DurationSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCameraDOFTask");

	Params::BattleActionTaskFactory_C_BI_AddCameraDOFTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.FocalDistance = FocalDistance;
	Parms.Scale = Scale;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_GetTaskTypeTaskCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_TASK_COM                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Cnt                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_GetTaskTypeTaskCnt(E_BTL_TASK_COM Type, int32* Cnt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_GetTaskTypeTaskCnt");

	Params::BattleActionTaskFactory_C_BI_GetTaskTypeTaskCnt Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Cnt != nullptr)
		*Cnt = Parms.Cnt;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddPressIconTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_PRESS_TYPE                        PressType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DoCalcAndApply                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddPressIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float PlayRate, E_BTL_PRESS_TYPE PressType, bool DoCalcAndApply, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddPressIconTask");

	Params::BattleActionTaskFactory_C_BI_AddPressIconTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PlayRate = PlayRate;
	Parms.PressType = PressType;
	Parms.DoCalcAndApply = DoCalcAndApply;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUpliftingTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUpliftingTask");

	Params::BattleActionTaskFactory_C_BI_AddUpliftingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddFirstSettingTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddFirstSettingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddFirstSettingTask");

	Params::BattleActionTaskFactory_C_BI_AddFirstSettingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddBeHomeSideAllTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddBeHomeSideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddBeHomeSideAllTask");

	Params::BattleActionTaskFactory_C_BI_AddBeHomeSideAllTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitVisibilitySideAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitVisibilitySideAll(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitVisibilitySideAll");

	Params::BattleActionTaskFactory_C_BI_AddUnitVisibilitySideAll Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeDamageTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DAMAGE_HIT_TYPE                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MpDamage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dead                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HP1                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           Tasklist                                               (Parm, OutParm)

void UBattleActionTaskFactory_C::BI_MakeDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_DAMAGE_HIT_TYPE Type, int32 HpDamage, int32 MpDamage, int32 bst, bool Dead, int32 DeadType, bool HP1, float PlayRate, bool* Ret, TArray<int32>* Tasklist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeDamageTask");

	Params::BattleActionTaskFactory_C_BI_MakeDamageTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.Type = Type;
	Parms.HpDamage = HpDamage;
	Parms.MpDamage = MpDamage;
	Parms.bst = bst;
	Parms.Dead = Dead;
	Parms.DeadType = DeadType;
	Parms.HP1 = HP1;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret != nullptr)
		*Ret = Parms.Ret;

	if (Tasklist != nullptr)
		*Tasklist = std::move(Parms.Tasklist);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddBeHomeTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddBeHomeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddBeHomeTask");

	Params::BattleActionTaskFactory_C_BI_AddBeHomeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitVisibilityTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ParticleInterlock                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitVisibilityTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, bool ParticleInterlock, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitVisibilityTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitVisibilityTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Sw = Sw;
	Parms.ParticleInterlock = ParticleInterlock;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSetActorTransformTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSetActorTransformTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FTransform& Transform, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSetActorTransformTask");

	Params::BattleActionTaskFactory_C_BI_AddSetActorTransformTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSummonTsukuyomiTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSummonTsukuyomiTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSummonTsukuyomiTask");

	Params::BattleActionTaskFactory_C_BI_AddSummonTsukuyomiTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDrawPlayerUpliftingGaugeTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    SpendGaugeOnly                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddDrawPlayerUpliftingGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, bool SpendGaugeOnly, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDrawPlayerUpliftingGaugeTask");

	Params::BattleActionTaskFactory_C_BI_AddDrawPlayerUpliftingGaugeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SpendGaugeOnly = SpendGaugeOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeUpliftingTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_MakeUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeUpliftingTask");

	Params::BattleActionTaskFactory_C_BI_MakeUpliftingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Side = Side;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_TaskSort
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_TaskSort(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_TaskSort");

	Params::BattleActionTaskFactory_C_BI_TaskSort Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddInfoMessByLabelTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SelectSkillScriptMessage                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddInfoMessByLabelTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& Label, int32 PartyIndex, bool SelectSkillScriptMessage, float PlayRate, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddInfoMessByLabelTask");

	Params::BattleActionTaskFactory_C_BI_AddInfoMessByLabelTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Label = std::move(Label);
	Parms.PartyIndex = PartyIndex;
	Parms.SelectSkillScriptMessage = SelectSkillScriptMessage;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCamRailTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaiitTaskList                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CAM_TYPE                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           ManualName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    StopWait                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaWait                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCamRailTask(const TArray<int32>& WaiitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCamRailTask");

	Params::BattleActionTaskFactory_C_BI_AddCamRailTask Parms{};

	Parms.WaiitTaskList = std::move(WaiitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.Type = Type;
	Parms.InterpWait = InterpWait;
	Parms.ManualName = std::move(ManualName);
	Parms.StopWait = StopWait;
	Parms.DeltaWait = DeltaWait;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeKuishibariInfoTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param1Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecIDs                                              (Parm, OutParm)
// TArray<int32>                           WaitPecIDs                                             (Parm, OutParm)

void UBattleActionTaskFactory_C::BI_MakeKuishibariInfoTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32 Param1Index, int32 SkillId, float PlayRate, TArray<int32>* RetPecIDs, TArray<int32>* WaitPecIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeKuishibariInfoTask");

	Params::BattleActionTaskFactory_C_BI_MakeKuishibariInfoTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.Param1Index = Param1Index;
	Parms.SkillId = SkillId;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecIDs != nullptr)
		*RetPecIDs = std::move(Parms.RetPecIDs);

	if (WaitPecIDs != nullptr)
		*WaitPecIDs = std::move(Parms.WaitPecIDs);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddStopAllSE Task
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddStopAllSE_Task(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddStopAllSE Task");

	Params::BattleActionTaskFactory_C_BI_AddStopAllSE_Task Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_ForceUpdate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_ForceUpdate(int32 PecID, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_ForceUpdate");

	Params::BattleActionTaskFactory_C_BI_ForceUpdate Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddIgnoreSkillSkipTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          SkillAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddIgnoreSkillSkipTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddIgnoreSkillSkipTask");

	Params::BattleActionTaskFactory_C_BI_AddIgnoreSkillSkipTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SkillAction = SkillAction;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddStopAllParticleTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddStopAllParticleTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddStopAllParticleTask");

	Params::BattleActionTaskFactory_C_BI_AddStopAllParticleTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_OpenTutorialWindowTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_TUTORIAL_WINDOW_MESSAGE_TYPE          TutorialType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OpenRemainSec                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_OpenTutorialWindowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_TUTORIAL_WINDOW_MESSAGE_TYPE TutorialType, float OpenRemainSec, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_OpenTutorialWindowTask");

	Params::BattleActionTaskFactory_C_BI_OpenTutorialWindowTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TutorialType = TutorialType;
	Parms.OpenRemainSec = OpenRemainSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitModelLoadTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Load_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RegisterAsAnEnemy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitModelLoadTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 Load_ID, const struct FTransform& SpawnTransform, int32 PartyIndex, bool RegisterAsAnEnemy, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitModelLoadTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitModelLoadTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Load_ID = Load_ID;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.PartyIndex = PartyIndex;
	Parms.RegisterAsAnEnemy = RegisterAsAnEnemy;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnitScaleResetTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Ret_PecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnitScaleResetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* Ret_PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnitScaleResetTask");

	Params::BattleActionTaskFactory_C_BI_AddUnitScaleResetTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret_PecID != nullptr)
		*Ret_PecID = Parms.Ret_PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCtrlPostProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class UMaterialInstance*>        PostMaterials                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCtrlPostProcess(TArray<int32>& WaitTaskIndex, const class FString& ParentName, TArray<class UMaterialInstance*>& PostMaterials, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCtrlPostProcess");

	Params::BattleActionTaskFactory_C_BI_AddCtrlPostProcess Parms{};

	Parms.WaitTaskIndex = std::move(WaitTaskIndex);
	Parms.ParentName = std::move(ParentName);
	Parms.PostMaterials = std::move(PostMaterials);
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskIndex = std::move(Parms.WaitTaskIndex);
	PostMaterials = std::move(Parms.PostMaterials);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddSummonTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseForceTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ForceTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnEffectLocation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsGodSkillSummon                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool UseForceTransform, const struct FTransform& ForceTransform, const struct FVector& ReturnEffectLocation, bool IsGodSkillSummon, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddSummonTask");

	Params::BattleActionTaskFactory_C_BI_AddSummonTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcIndex = SrcIndex;
	Parms.DstIndex = DstIndex;
	Parms.UseForceTransform = UseForceTransform;
	Parms.ForceTransform = std::move(ForceTransform);
	Parms.ReturnEffectLocation = std::move(ReturnEffectLocation);
	Parms.IsGodSkillSummon = IsGodSkillSummon;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeCureTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SrcPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DstPartyIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CURE                              Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HpCure                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MpCure                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   bstCure                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_MakeCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_CURE Type, int32 HpCure, int32 MpCure, int32 bstCure, int32* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeCureTask");

	Params::BattleActionTaskFactory_C_BI_MakeCureTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.SrcPartyIndex = SrcPartyIndex;
	Parms.DstPartyIndex = DstPartyIndex;
	Parms.Type = Type;
	Parms.HpCure = HpCure;
	Parms.MpCure = MpCure;
	Parms.bstCure = bstCure;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakePartyPanelShowTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   WaitAfterShow                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_MakePartyPanelShowTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, float WaitAfterShow, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakePartyPanelShowTask");

	Params::BattleActionTaskFactory_C_BI_MakePartyPanelShowTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.WaitAfterShow = WaitAfterShow;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeCloseUpCameraTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HaveToBeHome                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_MakeCloseUpCameraTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE CamType, bool HaveToBeHome, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeCloseUpCameraTask");

	Params::BattleActionTaskFactory_C_BI_MakeCloseUpCameraTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.PartyIndex = PartyIndex;
	Parms.CamType = CamType;
	Parms.HaveToBeHome = HaveToBeHome;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_ClearValidArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_ClearValidArray(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_ClearValidArray");

	Params::BattleActionTaskFactory_C_BI_ClearValidArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_GetUpdateTimes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TickTimes                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_GetUpdateTimes(int32* TickTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_GetUpdateTimes");

	Params::BattleActionTaskFactory_C_BI_GetUpdateTimes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TickTimes != nullptr)
		*TickTimes = Parms.TickTimes;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_IsTerminalTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTerminal                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_IsTerminalTask(int32 PecID, bool* IsTerminal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_IsTerminalTask");

	Params::BattleActionTaskFactory_C_BI_IsTerminalTask Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTerminal != nullptr)
		*IsTerminal = Parms.IsTerminal;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_OutputDebugTaskInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Filename                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_OutputDebugTaskInfo(const class FString& FilePath, const class FString& Filename, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_OutputDebugTaskInfo");

	Params::BattleActionTaskFactory_C_BI_OutputDebugTaskInfo Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddDebugTaskInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FDebugBattleTaskInfo             TaskInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_AddDebugTaskInfo(const class FString& Info, struct FDebugBattleTaskInfo& TaskInfo, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddDebugTaskInfo");

	Params::BattleActionTaskFactory_C_BI_AddDebugTaskInfo Parms{};

	Parms.Info = std::move(Info);
	Parms.TaskInfo = std::move(TaskInfo);

	UObject::ProcessEvent(Func, &Parms);

	TaskInfo = std::move(Parms.TaskInfo);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_ResetDebugTaskInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::BI_ResetDebugTaskInfo(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_ResetDebugTaskInfo");

	Params::BattleActionTaskFactory_C_BI_ResetDebugTaskInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddResetCharaParticleTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddResetCharaParticleTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddResetCharaParticleTask");

	Params::BattleActionTaskFactory_C_BI_AddResetCharaParticleTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddUnlockAchievementTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EAchievementFlag                        Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddUnlockAchievementTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, EAchievementFlag Achievement, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddUnlockAchievementTask");

	Params::BattleActionTaskFactory_C_BI_AddUnlockAchievementTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_AddCtrlCharaMaterialTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleActionTaskFactory_C::BI_AddCtrlCharaMaterialTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_AddCtrlCharaMaterialTask");

	Params::BattleActionTaskFactory_C_BI_AddCtrlCharaMaterialTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.BI_MakeMusMahDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ParentName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkipping                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           RetWaitTaskList                                        (Parm, OutParm)

void UBattleActionTaskFactory_C::BI_MakeMusMahDirection(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool IsSkipping, TArray<int32>* RetWaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "BI_MakeMusMahDirection");

	Params::BattleActionTaskFactory_C_BI_MakeMusMahDirection Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.ParentName = std::move(ParentName);
	Parms.TargetIndex = TargetIndex;
	Parms.IsSkipping = IsSkipping;

	UObject::ProcessEvent(Func, &Parms);

	if (RetWaitTaskList != nullptr)
		*RetWaitTaskList = std::move(Parms.RetWaitTaskList);
}


// Function BattleActionTaskFactory.BattleActionTaskFactory_C.UpdateComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ContinueUpdate                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleActionTaskFactory_C::UpdateComponent(float Delta, bool* ContinueUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleActionTaskFactory_C", "UpdateComponent");

	Params::BattleActionTaskFactory_C_UpdateComponent Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);

	if (ContinueUpdate != nullptr)
		*ContinueUpdate = Parms.ContinueUpdate;
}

}

