#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaChanger_Camp2

#include "Basic.hpp"

#include "BP_CharaChanger_2DBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaChanger_Camp2.BP_CharaChanger_Camp2_C
// 0x0020 (0x03B0 - 0x0390)
class ABP_CharaChanger_Camp2_C final : public ABP_CharaChanger_2DBase_C
{
public:
	class UCharaMotionTable*                      M_451_BlackMotionTable;                            // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMotionTable*                      M_455_AnalyzeMotionTable;                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMotionTable*                      M_643_AnalyzeMotionTable;                          // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharaMotionTable*                      M_650_AnalyzeMotionTable;                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetDevilCameraRowName(int32 ID, class FString* ExtensionPart);
	void SetMotionTable(class ACharaBase_C* CharaBase, int32 DevilID);
	void LoadMotionTable(TSoftObjectPtr<class UObject> Reference, class UCharaMotionTable* AlreadyLoadedTable, class UCharaMotionTable** Return);
	void GetDevilIDForAsset(int32 InDevilId, int32* OutDevilId);
	void SetDevilMaterial(class ACharaBase_C* CharaBase, int32 DevilID);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaChanger_Camp2_C">();
	}
	static class ABP_CharaChanger_Camp2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaChanger_Camp2_C>();
	}
};
static_assert(alignof(ABP_CharaChanger_Camp2_C) == 0x000010, "Wrong alignment on ABP_CharaChanger_Camp2_C");
static_assert(sizeof(ABP_CharaChanger_Camp2_C) == 0x0003B0, "Wrong size on ABP_CharaChanger_Camp2_C");
static_assert(offsetof(ABP_CharaChanger_Camp2_C, M_451_BlackMotionTable) == 0x000390, "Member 'ABP_CharaChanger_Camp2_C::M_451_BlackMotionTable' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_Camp2_C, M_455_AnalyzeMotionTable) == 0x000398, "Member 'ABP_CharaChanger_Camp2_C::M_455_AnalyzeMotionTable' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_Camp2_C, M_643_AnalyzeMotionTable) == 0x0003A0, "Member 'ABP_CharaChanger_Camp2_C::M_643_AnalyzeMotionTable' has a wrong offset!");
static_assert(offsetof(ABP_CharaChanger_Camp2_C, M_650_AnalyzeMotionTable) == 0x0003A8, "Member 'ABP_CharaChanger_Camp2_C::M_650_AnalyzeMotionTable' has a wrong offset!");

}

