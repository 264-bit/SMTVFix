#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerAnimNotifyReceiver

#include "Basic.hpp"

#include "BPI_PlayerAnimNotifyReceiver_classes.hpp"
#include "BPI_PlayerAnimNotifyReceiver_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_ForceEnableMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EnableTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMovement                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRotate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_ForceEnableMovementInput(float EnableTime, bool bMovement, bool bRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_ForceEnableMovementInput");

	Params::BPI_PlayerAnimNotifyReceiver_C_Notify_ForceEnableMovementInput Parms{};

	Parms.EnableTime = EnableTime;
	Parms.bMovement = bMovement;
	Parms.bRotate = bRotate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_OnTurn
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_OnTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_OnTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_SetAcceptableCancelAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAcceptable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_SetAcceptableCancelAttack(bool bAcceptable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_SetAcceptableCancelAttack");

	Params::BPI_PlayerAnimNotifyReceiver_C_Notify_SetAcceptableCancelAttack Parms{};

	Parms.bAcceptable = bAcceptable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_Attacking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAttacking                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_Attacking(bool bAttacking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_Attacking");

	Params::BPI_PlayerAnimNotifyReceiver_C_Notify_Attacking Parms{};

	Parms.bAttacking = bAttacking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_BeginAttackTrail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  Template                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             FirstSocket                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SecondSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_BeginAttackTrail(class UParticleSystem* Template, class FName FirstSocket, class FName SecondSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_BeginAttackTrail");

	Params::BPI_PlayerAnimNotifyReceiver_C_Notify_BeginAttackTrail Parms{};

	Parms.Template = Template;
	Parms.FirstSocket = FirstSocket;
	Parms.SecondSocket = SecondSocket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_EndAttackTrail
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_EndAttackTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_EndAttackTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_JumpTakeOff
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_JumpTakeOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_JumpTakeOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.OnGimmickBlown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ForwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerAnimNotifyReceiver_C::OnGimmickBlown(const struct FVector& ForwardVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "OnGimmickBlown");

	Params::BPI_PlayerAnimNotifyReceiver_C_OnGimmickBlown Parms{};

	Parms.ForwardVector = std::move(ForwardVector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerAnimNotifyReceiver.BPI_PlayerAnimNotifyReceiver_C.Notify_WalkBrakeTrigger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLeft_1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLeft_2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRight_1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRight_2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerAnimNotifyReceiver_C::Notify_WalkBrakeTrigger(bool bLeft_1, bool bLeft_2, bool bRight_1, bool bRight_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerAnimNotifyReceiver_C", "Notify_WalkBrakeTrigger");

	Params::BPI_PlayerAnimNotifyReceiver_C_Notify_WalkBrakeTrigger Parms{};

	Parms.bLeft_1 = bLeft_1;
	Parms.bLeft_2 = bLeft_2;
	Parms.bRight_1 = bRight_1;
	Parms.bRight_2 = bRight_2;

	UObject::ProcessEvent(Func, &Parms);
}

}

