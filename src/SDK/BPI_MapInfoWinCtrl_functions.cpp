#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MapInfoWinCtrl

#include "Basic.hpp"

#include "BPI_MapInfoWinCtrl_classes.hpp"
#include "BPI_MapInfoWinCtrl_parameters.hpp"


namespace SDK
{

// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_OpenMapInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           TagParams                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSoftObjectPtr<class USoundAtomCue>     OpenSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RemoveSameInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RemoveSameInfoID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_OpenMapInfo(class FName Label, const TArray<int32>& TagParams, TSoftObjectPtr<class USoundAtomCue> OpenSE, bool RemoveSameInfo, int32 RemoveSameInfoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_OpenMapInfo");

	Params::BPI_MapInfoWinCtrl_C_BPI_OpenMapInfo Parms{};

	Parms.Label = Label;
	Parms.TagParams = std::move(TagParams);
	Parms.OpenSE = OpenSE;
	Parms.RemoveSameInfo = RemoveSameInfo;
	Parms.RemoveSameInfoID = RemoveSameInfoID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_CheckActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_MapInfoWinCtrl_C::BPI_CheckActive(bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_CheckActive");

	Params::BPI_MapInfoWinCtrl_C_BPI_CheckActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_SetLock_MapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_MapInfoWinCtrl_C::BPI_SetLock_MapInfo(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_SetLock_MapInfo");

	Params::BPI_MapInfoWinCtrl_C_BPI_SetLock_MapInfo Parms{};

	Parms.Lock = Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_SetShowTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_SetShowTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_SetShowTime");

	Params::BPI_MapInfoWinCtrl_C_BPI_SetShowTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_DefaultShowTime
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_MapInfoWinCtrl_C::BPI_DefaultShowTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_DefaultShowTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_OpenMapInfo_AndMakkaWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PrevMakka                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AddMakka                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_OpenMapInfo_AndMakkaWindow(int32 PrevMakka, int32 AddMakka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_OpenMapInfo_AndMakkaWindow");

	Params::BPI_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow Parms{};

	Parms.PrevMakka = PrevMakka;
	Parms.AddMakka = AddMakka;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_OpenWaitingMapInfo
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_MapInfoWinCtrl_C::BPI_OpenWaitingMapInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_OpenWaitingMapInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_ClearMapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_ClearMapInfo(class FName Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_ClearMapInfo");

	Params::BPI_MapInfoWinCtrl_C_BPI_ClearMapInfo Parms{};

	Parms.Label = Label;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_CancelMissionMapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_CancelMissionMapInfo(int32 MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_CancelMissionMapInfo");

	Params::BPI_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo Parms{};

	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_MapInfoWinCtrl.BPI_MapInfoWinCtrl_C.BPI_OpenMapInfo_Mission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           TagParams                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSoftObjectPtr<class USoundAtomCue>     OpenSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_MapInfoWinCtrl_C::BPI_OpenMapInfo_Mission(class FName Label, const TArray<int32>& TagParams, TSoftObjectPtr<class USoundAtomCue> OpenSE, int32 MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_MapInfoWinCtrl_C", "BPI_OpenMapInfo_Mission");

	Params::BPI_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission Parms{};

	Parms.Label = Label;
	Parms.TagParams = std::move(TagParams);
	Parms.OpenSE = OpenSE;
	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);
}

}

