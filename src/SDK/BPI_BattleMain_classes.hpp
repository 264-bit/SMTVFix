#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleMain

#include "Basic.hpp"

#include "E_BTL_PTYPNL_TYPE_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleMain.BPI_BattleMain_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleMain_C final : public IInterface
{
public:
	void BI_GetPartySystem(TScriptInterface<class IBPI_BattleParty_C>* Ret);
	void BI_BattleLog(const class FString& String, bool* RetValue);
	void BI_IsBattleLogOn(bool* RetValue);
	void BI_GetTurnActValidNum(int32* RetValue);
	void BI_SetBattleCamera(float BlendTime, bool* RetValue);
	void BI_GetBattleCameraTransform(struct FTransform* RetValue);
	void BI_GetBattleCameraFieldOfView(float* RetValue);
	void BI_TurnDrawWidgetSetVisibility(ESlateVisibility Value, bool* RetValue);
	void BI_PartyPanelSetVisibility(ESlateVisibility Value, bool* RetValue);
	void BI_UICommandStartSeq(int32 PartyIndex, bool IsCounterActor, E_BTL_UI_COMM_STEP Step, int32 CallIndex, int32 TopIndex, E_WIDGET_PRIO Prio, bool IsCameraNoMove, TArray<struct FSkillCriticalValueOne>& SettleCriticalInfo, bool* RetValue);
	void BI_UICommandIsFinished(bool* RetValue);
	void BI_UICommandGetResult(struct FBtlCommand* RetValue);
	void BI_UICommandEndSeq(bool* RetValue);
	void BI_UICommandRemove(bool* RetValue);
	void BI_UICommandGetSkillMenuCursor(int32* CursorIndex, int32* TopIndex);
	void BI_UICommandGetItemMenuCursor(int32* CursorIndex, int32* TopIndex);
	void BI_GetCalcMakeBstArray(int32 InBst, TArray<E_BAD_STATUS>* RetValue);
	void BI_SetBattleCameraHome(float BlendTime, bool* RetValue);
	void BI_SetBattleCameraSkillCam(float BlendTime, bool* RetValue);
	void BI_SetPartyPanelEmpty(int32 Param_Index, bool* RetValue);
	void BI_UIInfomationShow(int32 SkillId, bool* RetValue);
	void BI_UIInfomationHide(bool* RetValue);
	void BI_UIInfomationEndSeq(bool* RetValue);
	void BI_UIInfomationIsAnimationExcuting(bool* RetValue);
	void BI_CamFactorySpawnRailActor(E_BTL_CAM_TYPE CamType, int32 PartyIndex, class ABP_RailActor_C** RetValue);
	void BI_IsBattleCameraInterp(bool* RetValue);
	void BI_IsBattleCameraRailArrived(bool* RetValue);
	void BI_SetBattleCameraTarget(const struct FVector& Target, float blendSpeed, bool* RetValue);
	void BI_UITurnDrawIsFinished(bool* RetValue);
	void BI_SetBattleCameraFovy(float Fovy, float Blend, bool* RetValue);
	void BI_CamFactorySpawnRailActorSkill(int32 TargetPartyIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, int32 ActorIndex, bool IsConsiderActorLocation, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, bool* IsSuccess);
	void BI_SetBattleCameraShake(class UClass* InShakeClass, bool Sw, float Scale, bool* RetValue);
	void BI_PartyPanelCtrl(int32 PartyIndex, E_BTL_PANEL_CTRL Ctrl, int32 Value, bool Value2, bool* RetValue);
	void BI_InfoMessShowBySkill(int32 SkillId, const class FString& SrcActorName, const class FString& DstActorName, bool IsMaster, int32 OverwriteID, bool* RetValue);
	void BI_InfoMessExtAct(E_BTL_EXTRA_ACTION MessageIndex, TArray<class FString>& ProgramStr, bool* RetValue);
	void BI_InfoMessHide(bool* RetValue);
	void BI_PartyPanelUpDataChara_BtlPartyData(const struct FBtlParty& PartyData, bool InOptionCheck, bool* RetValue);
	void BI_GetOriginTransform(struct FTransform* RetValue);
	void BI_TaskFactoryMakeTalkPartyInTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue);
	void BI_GetTaskFactoryParentNameTaskCnt(const class FString& ParentName, int32* RetValue);
	void DestroyBattle();
	void BI_StockSelectSeqStart(E_BTL_PTYPNL_TYPE Type, bool* RetValue);
	void BI_StockSelectIsFinished(bool* RetValue);
	void BI_StockSelectIsCancel(bool* RetValue);
	void BI_StockSelectGetResult(int32* RetValue);
	void BI_GetPaticleManager(TScriptInterface<class IBPI_BattleParticleManager_C>* RetValue);
	void BI_TaskUnitModelAdd(int32 TaskIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_TaskUnitModelIsExist(int32 TaskIndex, bool* RetValue);
	void BI_TaskUnitModelGet(int32 TaskIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_TaskUnitModelDelete(int32 PecID, bool* RetValue);
	void BI_SummonSelectSeqStart(int32 PartyIndex, bool* RetValue);
	void BI_SummonSelectIsFinished(bool* RetValue);
	void BI_SummonSelectIsCancel(bool* RetValue);
	void BI_SummonSelectGetResult(TArray<int32>* SrcList, TArray<int32>* DstList);
	void BI_SummonSelectClose(bool* RetValue);
	void BI_StockSelectClose(bool* RetValue);
	void BI_TaskFactoryAddCamRailTask(TArray<int32>& WiatTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* RetValue);
	void BI_BattleIsFinished(bool* RetValue);
	void BI_TaskUnitManagerAddReserveDestroy(TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_GetTaskFactory(TScriptInterface<class IBPI_BattleTaskFactory_C>* RetValue);
	void BI_GetRadialForce(class URadialForceComponent** RetValue);
	void BI_EffectManagerGetResidentAssetByName(class FName Param_Name, class UParticleSystem** RetValue);
	void BI_GetPostProcessCtrl(TScriptInterface<class IBPI_BattlePostProcessCtrl_C>* RetValue);
	void BI_GetRandom(int32 Max, int32* RetValue);
	void BI_GetRandom2(int32 Min, int32 Max, int32* RetValue);
	void BI_GetRandomF(float Max, float* RetValue);
	void BI_GetRandomF2(float Min, float Max, float* RetValue);
	void BI_BattleCameraIsNoMove(bool* RetValue);
	void BI_AddResultDataForTalk(const struct FBtlParty& Party, bool* RetValue);
	void BI_GetBattleSoundManager(TScriptInterface<class IBPI_BattleSoundManager_C>* RetValue);
	void BI_GetBattleEventUnitList(TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue);
	void BI_BattleCameraCurrentForce(float BlendTime, bool* RetValue);
	void BI_EffectManagerGetResidentSkillActionEffectByName(class FName Param_Name, struct FSkillActionEffect* RetVal);
	void BI_SetSaveCommandPage(E_BTL_UI_COMM_STEP Command, bool* RetValue);
	void BI_GetSaveCommandPage(E_BTL_UI_COMM_STEP* RetValue);
	void BI_ClearSaveCommandPage(bool* RetValue);
	void BI_InfoMessShowByCommonMess(int32 MessID, bool* RetValue);
	void BI_IsHugeBattle(bool* RetValue, int32* DevID);
	void BI_EncountIsNoDeadEffect(bool* RetValue);
	void BI_GetMapOutChara(TMap<E_BTL_CHAR_TYPE, TScriptInterface<class IBPI_CharaBaseAccessor_C>>* RetValue);
	void BI_SetBattlePlayRate(float PlayRate, bool* NoUse);
	void BI_GetBattlePlayRate(float* PlayRate);
	void BI_DestroyBattleCamera(bool* RetValue);
	void BI_UICommandGetMenuStep(E_BTL_UI_COMM_STEP* RetValue);
	void BI_GetApplyResultData(struct FBtlApllyResultData* RetValue);
	void BI_GetFinishedState(E_BTL_FINISHED_STATE* State, int32* SaveSlot);
	void BI_EffectManagerGetResidentBstEffect(E_BAD_STATUS bst, E_CHARA_BAD_STATUS_APPEAR Apper, struct FBattleResidentEffect* RetValue);
	void BI_TaskUnitManagerAddKeepRefUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, bool* RetValue);
	void BI_DebugTimeStart(bool* RetValue);
	void BI_DebugTimeEnd(bool* RetValue);
	void BI_AutoSeqPause(bool Pause, bool* RetValue);
	void BI_DebugJsonLogTalkSuccess(int32 DevilID, bool* RetValue);
	void BI_TargetSelectPause(bool IsPause, bool* RetValue);
	void BI_GetPartyUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* RetValue);
	void BI_GetPartyMemInterface(TScriptInterface<class IBPI_PTMemDataInterface>* RetValue);
	void BI_GetMainInterface(TScriptInterface<class IBPI_MainInterface>* RetValue);
	void BI_GetPartyFlagInterface(TScriptInterface<class IBPI_PTFlagInterface>* RetValue);
	void BI_StartBlendOverride(float BlendTime, bool* RetValue);
	void BI_EndBlendOverride(bool* RetValue);
	void BI_StartFovyOverride(float BlendTime, bool* RetValue);
	void BI_EndFovyOverride(bool* RetValue);
	void BI_SetRailCam(class ABP_RailActor_C* SplineActor, const struct FVector& EyeTarget, class AActor* TargetActor, bool EnableCharaDitherCtrl, bool* RetValue);
	void BI_TargetSelectGetCurrentTargetType(E_SKILL_TARGET* NewParam);
	void BI_GetBattleTargetSelect(TScriptInterface<class IBPI_BattleTargetSelect_C>* BPI);
	void BI_TargetSelectStartSelect(int32 InPartyIndex, bool IsCounter, bool IsInvTarget, bool IsCursorEnable, bool* RetValue);
	void BI_TargetSelectSetTargetAll(E_BTL_SIDE Inside, bool* RetValue);
	void BI_GetPTUnitIniterface(TScriptInterface<class IBPI_PTBPInterface_C>* RetValue);
	void BI_GetPartyBadStatus(TScriptInterface<class IBPI_PTBadStatusInterface>* RetValue);
	void BI_InfoMessSetProgramStr(int32 Param_Index, const class FString& String, bool* RetValue);
	void BI_GetBossCtrl(TScriptInterface<class IBPI_BattleBossCtrl_C>* RetValue);
	void BI_OverrideCameraTargetSocket(class FName OverrideSocket, bool* NoUse);
	void BI_FieldPlayerReplace(const TArray<int32>& InDevilList, bool* RetValue);
	void BI_FieldPlayerReplaceFinished(bool* RetValue);
	void BI_FieldPlayerReplaceResult(TMap<int32, struct FTransform>* RetValue);
	void BI_FieldEnemyAddSpawnPost(int32 Param_Index, struct FTransform* RetValue);
	void BI_GetMapCameraActor(class AActor** RetValue);
	void BI_FieldGetComandBoxTransform(struct FTransform* RetValue);
	void BI_GetCharAction(bool* Success, TScriptInterface<class IBPI_BattleCharAction_C>* RetValue);
	void BI_AddAIFlag(uint8 Flag, int32* Ret);
	void BI_DelAIFlag(uint8 Flag, int32* Ret);
	void BI_CheckAIFlag(uint8 Flag, bool* Ret);
	void BI_ClearAIFlag(int32* Ret);
	void BI_SetAIValue(int32 Value, int32 Param_Index, int32* Ret);
	void BI_GetAIValue(int32 Param_Index, int32* Value);
	void BI_DelAIValue(int32 Param_Index, int32* Ret);
	void BI_ClearAIValueAll(int32* Ret);
	void BI_GetSummonList(TArray<struct FBtlSummonData>* List);
	void BI_SetSummonList(TArray<struct FBtlSummonData>& SummonData, int32* Ret);
	void BI_ClearSummonList(int32* Ret);
	void BI_SetSummonDevilID(int32 DevilID, int32 SummonPosID, int32* Ret);
	void BI_AddDrawPressIcon(int32* Ret);
	void BI_GetAITurnNum(int32* TurnNum);
	void BI_CommonInfoMessReserveTagParam(int32 Param_Index, const class FString& String, int32* Ret);
	void BI_GetCurrentBGMID(int32* ID);
	void BI_ToCommandBox(bool* NoUse);
	void BI_DrawPlayerUpliftingGauge(bool IsNowUplifting, bool SpendGaugeOnly, int32* Ret);
	void BI_GetBattleUIManager(TScriptInterface<class IBPI_BattleUIManager_C>* Ret);
	void BI_BeginAutoBattle(bool* NoUse);
	void GI_GetUIMessage(TScriptInterface<class IBPI_BattleMessage_C>* ActionPanel, bool* Valid);
	void BI_BattleStatusCreatePanel(int32 StartPartyIndex, bool* RetValue);
	void BI_BattleStatusIsFinished(bool* OutFinished);
	void BI_BattleStatusGetSelectedPartyIndex(int32* OutPartyIndex);
	void BI_BattleStatusIsCanseled(bool* OutCanseled);
	void BI_InfoMessShowByCommonMessLabel(class FName MessLabel, bool SelectSkillScriptMessage, bool* RetValue);
	void BI_GetPlayerUpliftingGauge(int32* Ret);
	void BI_ChkEnemySurpriseTurn(bool* EnemySurpriseTurn);
	void BI_SetCurrentBGMID(int32 BGM_ID, bool* No_Use);
	void BI_AddResultDataFujimi(bool* Ret);
	void BI_PrepareSkip(bool* NoUse);
	void BI_ReadyDebugMenu(bool* Ret);
	void BI_GetCamActorFactory(TScriptInterface<class IBPI_BattleCamActorFactory_C>* CamActorFactory);
	void BI_SummonSelectSetSummonParameter(bool* OutParam);
	void BI_GetAnalyzeItemStatusCtrl(class UObject** AnalyzeItemStatusCtrl);
	void BI_BattleUISwitch(bool Sw, bool IncludeMonnAge, bool* NoUse);
	void BI_GetBattleCommand(TScriptInterface<class IBPI_BattleCommand_C>* BattleCommand);
	void BI_IsFinishedBattleCharaPanelFadeIn(bool* IsFinished);
	void BI_SetPartyPanelFadeOutStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck, bool* OutParam);
	void BI_SetPartyPanelEmptyStack(int32 InIndex, float InStartTime, bool InOptionCheck, bool InVisibleCheck, bool* RetValue);
	void BI_SetPartyPanelSummonStack(int32 InIndex, const struct FBtlParty& InPartyData, float InStartTime, bool InOptionCheck, bool* RetValue);
	void BI_IsFinishedPanelFadeOut(int32 InIndex, bool* RetValue);
	void BI_HideActionName_forCommand(bool* NoUse);
	void BI_HideActionName_forSkill(bool* NoUse);
	void BI_ShowActionName_forCommand(bool* NoUse);
	void BI_ShowActionName_forSkill(bool* NoUse);
	void BI_GetSkillCureHPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InSkillId, int32* RetHP);
	void BI_GetSkillCureMPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InSkillId, int32* RetMP);
	void BI_GetItemCureHPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InItemId, int32* RetHP);
	void BI_GetItemCureMPForUI(int32 InActorIndex, int32 InTargetIndex, int32 InItemId, int32* RetMP);
	void BI_CheckBattleEnd(E_BTL_END* EndType);
	void BI_Get_Camera_Accessor(class ABattleCamera_C** Camera);
	void BI_CalcStatusListEnemyOrder(TArray<int32>* PartyIndex);
	void BI_SetVoiceProtection(bool Enable, bool* NoUse);
	void BI_UpdateBattleTempo(bool* NoUse);
	void BI_CheckContinuousBGMBattle(bool* IsContinuous);
	void BI_EndAutoBattle(bool* NoUse);
	void BI_UniqueSkill_CureMPMagatsuhiGaugeMax(int32* Ret);
	void BI_PartyPanelGetVisibility(bool* IsVisible);
	void BI_CheckBossRushChallengeMode(bool* Ret);
	void BI_UniqueSkill_ActionEnd(bool IsAllAction, bool IsDeadOnly, int32 ReserveDeadPartyIndex, bool* Ret);
	void BI_UniqueSkill_BstDead(int32 PartyIndex, bool* Ret);
	void BI_CheckBossRush(bool* IsBossRush);
	void BI_GetEncountID(int32* EncountID, bool* IsEvent);
	void BI_GetEventSystem(TScriptInterface<class IBPI_BattleEventSystem_C>* EventSystem);
	void BI_GetEffectManager(TScriptInterface<class IBPI_BattleEffectManager_C>* Manager);
	void BI_InfoMessIsDispOn(bool* IsDispOn);
	void BI_GetTaskModelManager(TScriptInterface<class IBPI_BattleTaskModelManager_C>* Manager);
	void BI_SetPrevBattleBGM(class USoundAtomCue* PrevBattleBGM, bool* NoUse);
	void BI_GetWindowActivation(bool* Active);

	void BI_GetAICommand(TScriptInterface<class IBPI_AICommand_C>* Ret) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleMain_C">();
	}
	static class IBPI_BattleMain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleMain_C>();
	}
};
static_assert(alignof(IBPI_BattleMain_C) == 0x000008, "Wrong alignment on IBPI_BattleMain_C");
static_assert(sizeof(IBPI_BattleMain_C) == 0x000028, "Wrong size on IBPI_BattleMain_C");

}

