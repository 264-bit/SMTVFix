#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCamActorFactory

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleCamActorFactory_C final : public IInterface
{
public:
	void BI_SpawnRailActorPrevBattle(E_BTL_CAM_TYPE CamType, const struct FTransform& OriginTransform, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& UnitList, TArray<struct FTransform>& UnitTrans, const class FString& DevIDOptoin, class ABP_RailActor_C** RetVal);
	void BI_GetCurrentCameraSideType(E_CAMERA_SIDE_BF_TYPE* BF_Type, E_CAMERA_SIDE_LR_TYPE* LR_Type);
	void BI_ToOuterCamera(class ABattleCamera_C* Camera, class ABP_RailActor_C* Rail, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& TargetUnits, TArray<struct FTransform>& TargetPos, bool IsBossRoom, bool* NoUse);
	void BI_RetrieveGlobalSocketLocation(class FName CamCategoryName, class FName SocketName, struct FVector* GlobalLocation, bool* IsValid);
	void BI_ResetCommandCamInfo(bool* NoUse);
	void BI_SetRailName(const class FString& Param_Name, bool* NoUse);
	void BI_RegisterAnimCam(class ABattleAnimationCamera_C* AnimCam, bool* NoUse);
	void BI_UnregisterAnimCam(bool* NoUse);
	void BI_DestroyCurrentActor(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleCamActorFactory_C">();
	}
	static class IBPI_BattleCamActorFactory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleCamActorFactory_C>();
	}
};
static_assert(alignof(IBPI_BattleCamActorFactory_C) == 0x000008, "Wrong alignment on IBPI_BattleCamActorFactory_C");
static_assert(sizeof(IBPI_BattleCamActorFactory_C) == 0x000028, "Wrong size on IBPI_BattleCamActorFactory_C");

}

