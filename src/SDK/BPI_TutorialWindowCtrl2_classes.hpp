#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_TutorialWindowCtrl2

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "E_TutorialWindow_WidgetState_structs.hpp"
#include "Project_structs.hpp"
#include "E_AmuletTutorial_MsgType_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_TutorialWindowCtrl2.BPI_TutorialWindowCtrl2_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_TutorialWindowCtrl2_C final : public IInterface
{
public:
	void BPI_OpenWindow(E_WIDGET_PRIO InWidgetPrio, bool IsPlaySE, bool IsSkipAnimation, bool IsDrawBlackCurtain, bool IsEscClose);
	void BPI_CloseWindow(bool IsPlaySE, bool IsSkipAnimation);
	void BPI_SetTextJustification(ETextJustify InJustification);
	void BPI_CheckInputAndUpdateScroll(bool IsPlaySE);
	void BPI_GetScrollState(bool* IsRequiredScroll, float* ScrollPosRate);
	void BPI_SetScrollOffset(int32 InScrollOffset, bool IsPlaySE);
	void BPI_Scroll_Up(bool IsPlaySE);
	void BPI_Scroll_Down(bool IsPlaySE);
	void BPI_Page_UP(bool IsPlaySE);
	void BPI_Page_Down(bool IsPlaySE);
	void BPI_SetTitle_byID(const class UScriptMessageAsset*& InMessageAsset, const int32 InMessageId);
	void BPI_SetTitle_byLabel(const class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel);
	void BPI_SetMainText_byID(const class UScriptMessageAsset*& InMessageAsset, const int32 InMessageId);
	void BPI_SetMainText_byLabel(const class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel);
	void BPI_SetText_ReleasedKamui(bool IsOpenedByEvent, class FName InEventMsgLabel, const TArray<int32>& InOpenedKamuiID);
	void BPI_SetText_AmuletMsg(E_AmuletTutorial_MsgType InAmuletType);
	void BPI_SetText_MimanReward();
	void BPI_SetText_IconHelp();
	void BPI_SetText_ApplyDLC(const TArray<class FName>& InContentsMsgLabel);
	void BPI_SetText_InvalidDLC(const TArray<class FName>& InContentsMsgLabel);
	void BPI_SetText_BenefitItem(class FName InTitleLabel, const struct FBenefitItemMsgDataList& InItemMsgList);
	void BPI_SetText_BenefitDevil(const class FName InTitleLabel, const struct FBenefitDevilMsgDataList& InDevilMsgList);
	void BPI_SetText_byEnum(E_TUTORIAL_WINDOW_MESSAGE_TYPE InEnumPattern);
	void BPI_GetAnimState(E_TutorialWindow_WidgetState* AnimState);
	void BPI_Move_Top(bool IsPlaySE);
	void BPI_Move_Bottom(bool IsPlaySE);
	void BPI_IsClickedByMouse(bool* IsClicked);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_TutorialWindowCtrl2_C">();
	}
	static class IBPI_TutorialWindowCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_TutorialWindowCtrl2_C>();
	}
};
static_assert(alignof(IBPI_TutorialWindowCtrl2_C) == 0x000008, "Wrong alignment on IBPI_TutorialWindowCtrl2_C");
static_assert(sizeof(IBPI_TutorialWindowCtrl2_C) == 0x000028, "Wrong size on IBPI_TutorialWindowCtrl2_C");

}

