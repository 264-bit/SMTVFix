#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleTargetSelect

#include "Basic.hpp"

#include "BattleTargetSelect_classes.hpp"
#include "BattleTargetSelect_parameters.hpp"


namespace SDK
{

// Function BattleTargetSelect.BattleTargetSelect_C.Evt_InvSideOne__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_InvSideOne__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_InvSideOne__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_InvSideAll__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_InvSideAll__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_InvSideAll__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_SelfSideOne__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_SelfSideOne__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_SelfSideOne__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_SelfSideAll__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_SelfSideAll__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_SelfSideAll__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_Self__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_Self__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_Self__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_AllSideAll__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_AllSideAll__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_AllSideAll__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_AllSideRandom__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_AllSideRandom__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_AllSideRandom__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_CMPOne__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_CMPOne__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_CMPOne__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_CMPAll__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_CMPAll__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_CMPAll__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_WaitTask__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_WaitTask__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_WaitTask__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Evt_Cancel__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Evt_Cancel__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Evt_Cancel__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.ExecuteUbergraph_BattleTargetSelect
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::ExecuteUbergraph_BattleTargetSelect(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ExecuteUbergraph_BattleTargetSelect");

	Params::BattleTargetSelect_C_ExecuteUbergraph_BattleTargetSelect Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_ResetDirectDicided
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::BI_ResetDirectDicided()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_ResetDirectDicided");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_DirectDecideTargetIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::BI_DirectDecideTargetIndex(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_DirectDecideTargetIndex");

	Params::BattleTargetSelect_C_BI_DirectDecideTargetIndex Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_DirectSelectTargetIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::BI_DirectSelectTargetIndex(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_DirectSelectTargetIndex");

	Params::BattleTargetSelect_C_BI_DirectSelectTargetIndex Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqCancel
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBattleTargetSelect_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqAllSideRandom
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqAllSideRandom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqAllSideRandom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ReceiveTick");

	Params::BattleTargetSelect_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqAllSideAll
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqAllSideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqAllSideAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqInvSideOne
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqInvSideOne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqInvSideOne");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqSelf
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqSelfSideAll
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqSelfSideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqSelfSideAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqSelfSideOne
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqSelfSideOne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqSelfSideOne");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqTaskWait
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqTaskWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqTaskWait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SeqInvSideAll
// (BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SeqInvSideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SeqInvSideAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.InvSideOneFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::InvSideOneFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "InvSideOneFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.StartSelect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InPartyIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCounter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsInvTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCursorEnable                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::StartSelect(int32 InPartyIndex, bool IsCounter, bool IsInvTarget, bool IsCursorEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "StartSelect");

	Params::BattleTargetSelect_C_StartSelect Parms{};

	Parms.InPartyIndex = InPartyIndex;
	Parms.IsCounter = IsCounter;
	Parms.IsInvTarget = IsInvTarget;
	Parms.IsCursorEnable = IsCursorEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetMainWork
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABattleMain_C*                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetMainWork(class ABattleMain_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetMainWork");

	Params::BattleTargetSelect_C_GetMainWork Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetPartySystem
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattlePartySystem_C*             RetValue                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetPartySystem(class UBattlePartySystem_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetPartySystem");

	Params::BattleTargetSelect_C_GetPartySystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.InvSideAllFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::InvSideAllFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "InvSideAllFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SelfSideOneFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SelfSideOneFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SelfSideOneFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SelfSideAllFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SelfSideAllFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SelfSideAllFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SelfFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SelfFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SelfFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.AllSideAllFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::AllSideAllFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AllSideAllFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.AllSideOneFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::AllSideOneFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AllSideOneFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CMPOneFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::CMPOneFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CMPOneFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CMPAllFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::CMPAllFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CMPAllFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.TaskWaitFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::TaskWaitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "TaskWaitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.Input
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::Input()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "Input");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CallEvtFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::CallEvtFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CallEvtFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetTaskFactory
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattleActionTaskFactory_C*       RetValue                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetTaskFactory(class UBattleActionTaskFactory_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetTaskFactory");

	Params::BattleTargetSelect_C_GetTaskFactory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetIndexUnit
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoSetCharSelect                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::SetIndexUnit(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsNoSetCharSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetIndexUnit");

	Params::BattleTargetSelect_C_SetIndexUnit Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsNoSetCharSelect = IsNoSetCharSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<uint8>                           RetValue                                               (Parm, OutParm)

void UBattleTargetSelect_C::GetResult(TArray<uint8>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetResult");

	Params::BattleTargetSelect_C_GetResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleTargetSelect.BattleTargetSelect_C.AddUnitIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsRecursion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNotSetCharSelect                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::AddUnitIndex(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsRecursion, bool IsNotSetCharSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AddUnitIndex");

	Params::BattleTargetSelect_C_AddUnitIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsRecursion = IsRecursion;
	Parms.IsNotSetCharSelect = IsNotSetCharSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsFinished(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsFinished");

	Params::BattleTargetSelect_C_IsFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.ClearTargetChar
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::ClearTargetChar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ClearTargetChar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetCharSelect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAllSelect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::SetCharSelect(int32 Param_Index, bool IsAllSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetCharSelect");

	Params::BattleTargetSelect_C_SetCharSelect Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsAllSelect = IsAllSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetEffectManager
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBattleEffectManager_C*           RetValue                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetEffectManager(class UBattleEffectManager_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetEffectManager");

	Params::BattleTargetSelect_C_GetEffectManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsTargetTypePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsPlayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsTargetTypePlayer(bool* IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsTargetTypePlayer");

	Params::BattleTargetSelect_C_IsTargetTypePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayer != nullptr)
		*IsPlayer = Parms.IsPlayer;
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetCurrentTargetType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetCurrentTargetType(E_SKILL_TARGET* TargetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetCurrentTargetType");

	Params::BattleTargetSelect_C_GetCurrentTargetType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetType != nullptr)
		*TargetType = Parms.TargetType;
}


// Function BattleTargetSelect.BattleTargetSelect_C.AllSideRandomFunc
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::AllSideRandomFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AllSideRandomFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsTargetableActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsTargetableActor(int32 ActorIndex, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsTargetableActor");

	Params::BattleTargetSelect_C_IsTargetableActor Parms{};

	Parms.ActorIndex = ActorIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcLookAtGlobalPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::CalcLookAtGlobalPos(E_SKILL_TARGET TargetType, class FName SocketName, struct FVector* GlobalPos, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcLookAtGlobalPos");

	Params::BattleTargetSelect_C_CalcLookAtGlobalPos Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalPos != nullptr)
		*GlobalPos = std::move(Parms.GlobalPos);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsCancel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsCancel(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsCancel");

	Params::BattleTargetSelect_C_IsCancel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CancelFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::CancelFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CancelFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetCharSelectPanel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::SetCharSelectPanel(int32 Param_Index, bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetCharSelectPanel");

	Params::BattleTargetSelect_C_SetCharSelectPanel Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetSelfSideOnePanel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::SetSelfSideOnePanel(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetSelfSideOnePanel");

	Params::BattleTargetSelect_C_SetSelfSideOnePanel Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetCharSelectPanelHideAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::SetCharSelectPanelHideAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetCharSelectPanelHideAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsUseCamRailAtInvOne
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsUseCamRailAtInvOne(bool* IsUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsUseCamRailAtInvOne");

	Params::BattleTargetSelect_C_IsUseCamRailAtInvOne Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUse != nullptr)
		*IsUse = Parms.IsUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcFovyToTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance_To_Target                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Fovy                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CalcFovyToTarget(float Distance_To_Target, float* Fovy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcFovyToTarget");

	Params::BattleTargetSelect_C_CalcFovyToTarget Parms{};

	Parms.Distance_To_Target = Distance_To_Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Fovy != nullptr)
		*Fovy = Parms.Fovy;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcDistanceToTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CalcDistanceToTarget(int32 ActorIndex, int32 TargetIndex, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcDistanceToTarget");

	Params::BattleTargetSelect_C_CalcDistanceToTarget Parms{};

	Parms.ActorIndex = ActorIndex;
	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsAdjustFovy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsAdjustFovy(bool* IsUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsAdjustFovy");

	Params::BattleTargetSelect_C_IsAdjustFovy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUse != nullptr)
		*IsUse = Parms.IsUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.AddCamFovyTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitCommandList                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   ToFovy                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeedRatio                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InterpWait                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::AddCamFovyTask(TArray<int32>& WaitCommandList, float ToFovy, float InterpSpeedRatio, bool InterpWait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AddCamFovyTask");

	Params::BattleTargetSelect_C_AddCamFovyTask Parms{};

	Parms.WaitCommandList = std::move(WaitCommandList);
	Parms.ToFovy = ToFovy;
	Parms.InterpSpeedRatio = InterpSpeedRatio;
	Parms.InterpWait = InterpWait;

	UObject::ProcessEvent(Func, &Parms);

	WaitCommandList = std::move(Parms.WaitCommandList);
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsTargetActor(int32 PartyIndex, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsTargetActor");

	Params::BattleTargetSelect_C_IsTargetActor Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CountValidTargets
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   StartIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ValidNum                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CountValidTargets(int32 StartIndex, int32 LastIndex, int32* ValidNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CountValidTargets");

	Params::BattleTargetSelect_C_CountValidTargets Parms{};

	Parms.StartIndex = StartIndex;
	Parms.LastIndex = LastIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ValidNum != nullptr)
		*ValidNum = Parms.ValidNum;
}


// Function BattleTargetSelect.BattleTargetSelect_C.PickUpPartyIndices
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayerSide                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           PartyIndices                                           (Parm, OutParm)

void UBattleTargetSelect_C::PickUpPartyIndices(bool IsPlayerSide, TArray<int32>* PartyIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "PickUpPartyIndices");

	Params::BattleTargetSelect_C_PickUpPartyIndices Parms{};

	Parms.IsPlayerSide = IsPlayerSide;

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndices != nullptr)
		*PartyIndices = std::move(Parms.PartyIndices);
}


// Function BattleTargetSelect.BattleTargetSelect_C.AddUnitIndex_ViewedFromCamera
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsRecursion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoSetCharSelect                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::AddUnitIndex_ViewedFromCamera(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsRecursion, bool IsNoSetCharSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AddUnitIndex_ViewedFromCamera");

	Params::BattleTargetSelect_C_AddUnitIndex_ViewedFromCamera Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsRecursion = IsRecursion;
	Parms.IsNoSetCharSelect = IsNoSetCharSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.ResetPartyDither
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::ResetPartyDither(float InterpSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ResetPartyDither");

	Params::BattleTargetSelect_C_ResetPartyDither Parms{};

	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetSaveTargetIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetSaveTargetIndex(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetSaveTargetIndex");

	Params::BattleTargetSelect_C_GetSaveTargetIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.ClearSaveTargetIndex
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::ClearSaveTargetIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "ClearSaveTargetIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetSaveTargetIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::SetSaveTargetIndex(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetSaveTargetIndex");

	Params::BattleTargetSelect_C_SetSaveTargetIndex Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.PlaySE
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::PlaySE(class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "PlaySE");

	Params::BattleTargetSelect_C_PlaySE Parms{};

	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcLookAtLocalPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalPos                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::CalcLookAtLocalPos(E_SKILL_TARGET TargetType, class FName SocketName, struct FVector* LocalPos, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcLookAtLocalPos");

	Params::BattleTargetSelect_C_CalcLookAtLocalPos Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (LocalPos != nullptr)
		*LocalPos = std::move(Parms.LocalPos);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleTargetSelect.BattleTargetSelect_C.EnemyInfoSwitch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   FullIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VisibleAll                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::EnemyInfoSwitch(bool Sw, int32 FullIndex, bool VisibleAll, bool Immediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "EnemyInfoSwitch");

	Params::BattleTargetSelect_C_EnemyInfoSwitch Parms{};

	Parms.Sw = Sw;
	Parms.FullIndex = FullIndex;
	Parms.VisibleAll = VisibleAll;
	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetInvSideOneStartIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::GetInvSideOneStartIndex(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetInvSideOneStartIndex");

	Params::BattleTargetSelect_C_GetInvSideOneStartIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.AddUnitIndexForPlayer
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsRecursion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::AddUnitIndexForPlayer(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsRecursion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AddUnitIndexForPlayer");

	Params::BattleTargetSelect_C_AddUnitIndexForPlayer Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsRecursion = IsRecursion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcLookAtGlobalPos_New
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::CalcLookAtGlobalPos_New(E_SKILL_TARGET TargetType, class FName SocketName, struct FVector* GlobalPos, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcLookAtGlobalPos_New");

	Params::BattleTargetSelect_C_CalcLookAtGlobalPos_New Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalPos != nullptr)
		*GlobalPos = std::move(Parms.GlobalPos);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleTargetSelect.BattleTargetSelect_C.InitializeFunc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::InitializeFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "InitializeFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.AddUnitIndexForPlayer_Old
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsRecursion                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::AddUnitIndexForPlayer_Old(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsRecursion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "AddUnitIndexForPlayer_Old");

	Params::BattleTargetSelect_C_AddUnitIndexForPlayer_Old Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsRecursion = IsRecursion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.PauseSelect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::PauseSelect(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "PauseSelect");

	Params::BattleTargetSelect_C_PauseSelect Parms{};

	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.MakeResult
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<uint8>                           Param_M_Select                                         (Parm, OutParm)

void UBattleTargetSelect_C::MakeResult(E_SKILL_TARGET TargetType, TArray<uint8>* Param_M_Select)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "MakeResult");

	Params::BattleTargetSelect_C_MakeResult Parms{};

	Parms.TargetType = TargetType;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_M_Select != nullptr)
		*Param_M_Select = std::move(Parms.Param_M_Select);
}


// Function BattleTargetSelect.BattleTargetSelect_C.DrawClearAll
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::DrawClearAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "DrawClearAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.PrepareAcessors
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::PrepareAcessors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "PrepareAcessors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetPTMemInterface
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTMemDataInterface>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::GetPTMemInterface(TScriptInterface<class IBPI_PTMemDataInterface>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetPTMemInterface");

	Params::BattleTargetSelect_C_GetPTMemInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetMainInterface
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_MainInterface>AsBPI_Main_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::GetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetMainInterface");

	Params::BattleTargetSelect_C_GetMainInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Main_Interface != nullptr)
		*AsBPI_Main_Interface = Parms.AsBPI_Main_Interface;
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetMainWorkBPI
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::GetMainWorkBPI(TScriptInterface<class IBPI_BattleMain_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetMainWorkBPI");

	Params::BattleTargetSelect_C_GetMainWorkBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetTargetAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::SetTargetAll(E_BTL_SIDE Side)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetTargetAll");

	Params::BattleTargetSelect_C_SetTargetAll Parms{};

	Parms.Side = Side;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetPartyUtilInterface
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTUtilInterface>AsBPI_PTUtil_Interface                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::GetPartyUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* AsBPI_PTUtil_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetPartyUtilInterface");

	Params::BattleTargetSelect_C_GetPartyUtilInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTUtil_Interface != nullptr)
		*AsBPI_PTUtil_Interface = Parms.AsBPI_PTUtil_Interface;
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsInField
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InField                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::IsInField(int32 PartyIndex, bool* InField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsInField");

	Params::BattleTargetSelect_C_IsInField Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (InField != nullptr)
		*InField = Parms.InField;
}


// Function BattleTargetSelect.BattleTargetSelect_C.InitializeSelectResult
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleTargetSelect_C::InitializeSelectResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "InitializeSelectResult");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleTargetSelect.BattleTargetSelect_C.GetHeroIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBattleTargetSelect_C::GetHeroIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "GetHeroIndex");

	Params::BattleTargetSelect_C_GetHeroIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcDefenceAishou
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ATTRIBUTE_TYPE                        Aishou                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CalcDefenceAishou(E_ATTRIBUTE_TYPE* Aishou)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcDefenceAishou");

	Params::BattleTargetSelect_C_CalcDefenceAishou Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Aishou != nullptr)
		*Aishou = Parms.Aishou;
}


// Function BattleTargetSelect.BattleTargetSelect_C.IsTargetTypeEnemy
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleTargetSelect_C::IsTargetTypeEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "IsTargetTypeEnemy");

	Params::BattleTargetSelect_C_IsTargetTypeEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcDefenceAishouArray
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<E_ATTRIBUTE_TYPE>                Aishou                                                 (Parm, OutParm)

void UBattleTargetSelect_C::CalcDefenceAishouArray(TArray<E_ATTRIBUTE_TYPE>* Aishou)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcDefenceAishouArray");

	Params::BattleTargetSelect_C_CalcDefenceAishouArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Aishou != nullptr)
		*Aishou = std::move(Parms.Aishou);
}


// Function BattleTargetSelect.BattleTargetSelect_C.SetExpectionCharaPanel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAllTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::SetExpectionCharaPanel(int32 Param_Index, bool Sw, bool IsAllTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "SetExpectionCharaPanel");

	Params::BattleTargetSelect_C_SetExpectionCharaPanel Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Sw = Sw;
	Parms.IsAllTarget = IsAllTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcExeptionValue
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetIndex                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HP_Exeption                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MP_Exeption                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CalcExeptionValue(const int32 TargetIndex, int32* HP_Exeption, int32* MP_Exeption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcExeptionValue");

	Params::BattleTargetSelect_C_CalcExeptionValue Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (HP_Exeption != nullptr)
		*HP_Exeption = Parms.HP_Exeption;

	if (MP_Exeption != nullptr)
		*MP_Exeption = Parms.MP_Exeption;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcPenetrationEfficacy
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsPenetration                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::CalcPenetrationEfficacy(bool* IsPenetration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcPenetrationEfficacy");

	Params::BattleTargetSelect_C_CalcPenetrationEfficacy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPenetration != nullptr)
		*IsPenetration = Parms.IsPenetration;
}


// Function BattleTargetSelect.BattleTargetSelect_C.CalcSelfSideFirstTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::CalcSelfSideFirstTarget(int32* PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "CalcSelfSideFirstTarget");

	Params::BattleTargetSelect_C_CalcSelfSideFirstTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndex != nullptr)
		*PartyIndex = Parms.PartyIndex;
}


// Function BattleTargetSelect.BattleTargetSelect_C.DirectSetUnitIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseCamRail                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLock                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNotSetCharSelect                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::DirectSetUnitIndex(int32 Param_Index, bool IsUseCamRail, bool IsLock, bool IsNotSetCharSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "DirectSetUnitIndex");

	Params::BattleTargetSelect_C_DirectSetUnitIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsUseCamRail = IsUseCamRail;
	Parms.IsLock = IsLock;
	Parms.IsNotSetCharSelect = IsNotSetCharSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_GetCurrentTargetType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::BI_GetCurrentTargetType(E_SKILL_TARGET* TargetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_GetCurrentTargetType");

	Params::BattleTargetSelect_C_BI_GetCurrentTargetType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetType != nullptr)
		*TargetType = Parms.TargetType;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_CalcLookAtGlobalPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_CalcLookAtGlobalPos(E_SKILL_TARGET TargetType, class FName SocketName, struct FVector* GlobalPos, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_CalcLookAtGlobalPos");

	Params::BattleTargetSelect_C_BI_CalcLookAtGlobalPos Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalPos != nullptr)
		*GlobalPos = std::move(Parms.GlobalPos);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_GetInvTargetIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::BI_GetInvTargetIndex(int32* TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_GetInvTargetIndex");

	Params::BattleTargetSelect_C_BI_GetInvTargetIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetIndex != nullptr)
		*TargetIndex = Parms.TargetIndex;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_DrawClearAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_DrawClearAll(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_DrawClearAll");

	Params::BattleTargetSelect_C_BI_DrawClearAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetInvTargetIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetInvTargetIndex(int32 TargetIndex, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetInvTargetIndex");

	Params::BattleTargetSelect_C_BI_SetInvTargetIndex Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetOverrideCommandCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetOverrideCommandCamera(bool IsOverride, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetOverrideCommandCamera");

	Params::BattleTargetSelect_C_BI_SetOverrideCommandCamera Parms{};

	Parms.IsOverride = IsOverride;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_IsOverrideCommandCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOverride                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_IsOverrideCommandCamera(bool* IsOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_IsOverrideCommandCamera");

	Params::BattleTargetSelect_C_BI_IsOverrideCommandCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOverride != nullptr)
		*IsOverride = Parms.IsOverride;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetPlayerTargetIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetPlayerTargetIndex(int32 PartyIndex, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetPlayerTargetIndex");

	Params::BattleTargetSelect_C_BI_SetPlayerTargetIndex Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetTargetType_Item
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetTargetType_Item(int32 ItemId, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetTargetType_Item");

	Params::BattleTargetSelect_C_BI_SetTargetType_Item Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetTargetType_Skill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetTargetType_Skill(int32 SkillId, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetTargetType_Skill");

	Params::BattleTargetSelect_C_BI_SetTargetType_Skill Parms{};

	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_GetCurrentTargetIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleTargetSelect_C::BI_GetCurrentTargetIndex(int32* PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_GetCurrentTargetIndex");

	Params::BattleTargetSelect_C_BI_GetCurrentTargetIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndex != nullptr)
		*PartyIndex = Parms.PartyIndex;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetCureHPExpection_Item
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetCureHPExpection_Item(int32 ItemId, int32 UserIndex, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetCureHPExpection_Item");

	Params::BattleTargetSelect_C_BI_SetCureHPExpection_Item Parms{};

	Parms.ItemId = ItemId;
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_SetCureHPExpection_Skill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_SetCureHPExpection_Skill(int32 SkillId, int32 UserIndex, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_SetCureHPExpection_Skill");

	Params::BattleTargetSelect_C_BI_SetCureHPExpection_Skill Parms{};

	Parms.SkillId = SkillId;
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleTargetSelect.BattleTargetSelect_C.BI_IsDirectDicided
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDecided                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleTargetSelect_C::BI_IsDirectDicided(bool* IsDecided)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleTargetSelect_C", "BI_IsDirectDicided");

	Params::BattleTargetSelect_C_BI_IsDirectDicided Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDecided != nullptr)
		*IsDecided = Parms.IsDecided;
}

}

