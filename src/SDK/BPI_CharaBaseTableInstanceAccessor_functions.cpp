#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaBaseTableInstanceAccessor

#include "Basic.hpp"

#include "BPI_CharaBaseTableInstanceAccessor_classes.hpp"
#include "BPI_CharaBaseTableInstanceAccessor_parameters.hpp"


namespace SDK
{

// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetBadStatusSecessariesData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusNecessaries_T>  OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetBadStatusSecessariesData(E_BAD_STATUS Status, TArray<struct FBadStatusNecessaries_T>& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetBadStatusSecessariesData");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetBadStatusSecessariesData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetBadStatusParticleData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusParticles_T>    OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetBadStatusParticleData(E_BAD_STATUS Status, TArray<struct FBadStatusParticles_T>& OutRef, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetBadStatusParticleData");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetBadStatusParticleData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetDeadActionParticleData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_DEAD_EFFECT                       DeadEffect                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDeadActionParticles_T           OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetDeadActionParticleData(E_BTL_DEAD_EFFECT DeadEffect, struct FDeadActionParticles_T& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetDeadActionParticleData");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetDeadActionParticleData Parms{};

	Parms.DeadEffect = DeadEffect;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetDevilPerformanceData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_DEVIL_PERFORMANCE_TYPE                Performance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDevilPerformance_T              OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetDevilPerformanceData(E_DEVIL_PERFORMANCE_TYPE Performance, struct FDevilPerformance_T& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetDevilPerformanceData");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetDevilPerformanceData Parms{};

	Parms.Performance = Performance;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetCharaAttachParticle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FCharaAttachParticle_T>CharaAttachParticle                                    (Parm, OutParm)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetCharaAttachParticle(TMap<class FName, struct FCharaAttachParticle_T>* CharaAttachParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetCharaAttachParticle");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetCharaAttachParticle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharaAttachParticle != nullptr)
		*CharaAttachParticle = std::move(Parms.CharaAttachParticle);
}


// Function BPI_CharaBaseTableInstanceAccessor.BPI_CharaBaseTableInstanceAccessor_C.BI_GetBadStatusDecalData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusDecal_T>        OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseTableInstanceAccessor_C::BI_GetBadStatusDecalData(E_BAD_STATUS Status, TArray<struct FBadStatusDecal_T>& OutRef, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseTableInstanceAccessor_C", "BI_GetBadStatusDecalData");

	Params::BPI_CharaBaseTableInstanceAccessor_C_BI_GetBadStatusDecalData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

