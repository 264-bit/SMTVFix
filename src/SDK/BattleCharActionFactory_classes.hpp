#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleCharActionFactory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BattleCharActionFactory.BattleCharActionFactory_C
// 0x0028 (0x00D8 - 0x00B0)
class UBattleCharActionFactory_C final : public UBattleActorComponentBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABattleCharAction_C*>            M_ActionArray;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         M_NowAction;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Const_ActProcMax;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         M_GlobalPecID;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         M_PlayRate;                                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BattleCharActionFactory(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void GetMainWork(class ABattleMain_C** RetValue);
	void SpawnCharActionActor(const struct FBtlActionStack& InData);
	void GetPrevActionSeq(E_BTL_ACT_SEQ* RetValue);
	void GetNowAction(bool* IsSuccess, class ABattleCharAction_C** RetValue);
	void DestroyForPecID(int32 InPecID, bool* RetValue);
	void AllActionIsFinished(bool* RetValue);
	void CheckAction(float DeltaSec, bool* ContinueUpdate);
	void GetActionForPartyIndex(int32 PartyIndex, class ABattleCharAction_C** RetValue);
	void GetActionNum(int32* RetValue);
	void SetCharActionPlayRate(float PlayRate);
	void UpdateComponent(float Delta, bool* ContinueUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattleCharActionFactory_C">();
	}
	static class UBattleCharActionFactory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleCharActionFactory_C>();
	}
};
static_assert(alignof(UBattleCharActionFactory_C) == 0x000008, "Wrong alignment on UBattleCharActionFactory_C");
static_assert(sizeof(UBattleCharActionFactory_C) == 0x0000D8, "Wrong size on UBattleCharActionFactory_C");
static_assert(offsetof(UBattleCharActionFactory_C, UberGraphFrame) == 0x0000B0, "Member 'UBattleCharActionFactory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattleCharActionFactory_C, M_ActionArray) == 0x0000B8, "Member 'UBattleCharActionFactory_C::M_ActionArray' has a wrong offset!");
static_assert(offsetof(UBattleCharActionFactory_C, M_NowAction) == 0x0000C8, "Member 'UBattleCharActionFactory_C::M_NowAction' has a wrong offset!");
static_assert(offsetof(UBattleCharActionFactory_C, Const_ActProcMax) == 0x0000CC, "Member 'UBattleCharActionFactory_C::Const_ActProcMax' has a wrong offset!");
static_assert(offsetof(UBattleCharActionFactory_C, M_GlobalPecID) == 0x0000D0, "Member 'UBattleCharActionFactory_C::M_GlobalPecID' has a wrong offset!");
static_assert(offsetof(UBattleCharActionFactory_C, M_PlayRate) == 0x0000D4, "Member 'UBattleCharActionFactory_C::M_PlayRate' has a wrong offset!");

}

