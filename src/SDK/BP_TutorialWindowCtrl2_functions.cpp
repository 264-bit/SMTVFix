#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialWindowCtrl2

#include "Basic.hpp"

#include "BP_TutorialWindowCtrl2_classes.hpp"
#include "BP_TutorialWindowCtrl2_parameters.hpp"


namespace SDK
{

// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ExecuteUbergraph_BP_TutorialWindowCtrl2
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::ExecuteUbergraph_BP_TutorialWindowCtrl2(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "ExecuteUbergraph_BP_TutorialWindowCtrl2");

	Params::BP_TutorialWindowCtrl2_C_ExecuteUbergraph_BP_TutorialWindowCtrl2 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.OnChangePlatformSetting
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::OnChangePlatformSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "OnChangePlatformSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "ReceiveTick");

	Params::BP_TutorialWindowCtrl2_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_OpenWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_WIDGET_PRIO                           InWidgetPrio                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDrawBlackCurtain                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsEscClose                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_OpenWindow(E_WIDGET_PRIO InWidgetPrio, bool IsPlaySE, bool IsSkipAnimation, bool IsDrawBlackCurtain, bool IsEscClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_OpenWindow");

	Params::BP_TutorialWindowCtrl2_C_BPI_OpenWindow Parms{};

	Parms.InWidgetPrio = InWidgetPrio;
	Parms.IsPlaySE = IsPlaySE;
	Parms.IsSkipAnimation = IsSkipAnimation;
	Parms.IsDrawBlackCurtain = IsDrawBlackCurtain;
	Parms.IsEscClose = IsEscClose;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "ReceiveEndPlay");

	Params::BP_TutorialWindowCtrl2_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_InvalidDLC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InContentsMsgLabel                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_InvalidDLC(const TArray<class FName>& InContentsMsgLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_InvalidDLC");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_InvalidDLC Parms{};

	Parms.InContentsMsgLabel = std::move(InContentsMsgLabel);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_AmuletMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AmuletTutorial_MsgType                InAmuletType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_AmuletMsg(E_AmuletTutorial_MsgType InAmuletType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_AmuletMsg");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_AmuletMsg Parms{};

	Parms.InAmuletType = InAmuletType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_IconHelp
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_IconHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_IconHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_BenefitDevil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InTitleLabel                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBenefitDevilMsgDataList         InDevilMsgList                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_BenefitDevil(const class FName InTitleLabel, const struct FBenefitDevilMsgDataList& InDevilMsgList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_BenefitDevil");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitDevil Parms{};

	Parms.InTitleLabel = InTitleLabel;
	Parms.InDevilMsgList = std::move(InDevilMsgList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_BenefitItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InTitleLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBenefitItemMsgDataList          InItemMsgList                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_BenefitItem(class FName InTitleLabel, const struct FBenefitItemMsgDataList& InItemMsgList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_BenefitItem");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_BenefitItem Parms{};

	Parms.InTitleLabel = InTitleLabel;
	Parms.InItemMsgList = std::move(InItemMsgList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_CheckInputAndUpdateScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_CheckInputAndUpdateScroll(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_CheckInputAndUpdateScroll");

	Params::BP_TutorialWindowCtrl2_C_BPI_CheckInputAndUpdateScroll Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetScrollOffset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InScrollOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_SetScrollOffset(int32 InScrollOffset, bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetScrollOffset");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetScrollOffset Parms{};

	Parms.InScrollOffset = InScrollOffset;
	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Move_Bottom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Move_Bottom(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Move_Bottom");

	Params::BP_TutorialWindowCtrl2_C_BPI_Move_Bottom Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Move_Top
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Move_Top(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Move_Top");

	Params::BP_TutorialWindowCtrl2_C_BPI_Move_Top Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_byEnum
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TUTORIAL_WINDOW_MESSAGE_TYPE          InEnumPattern                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_byEnum(E_TUTORIAL_WINDOW_MESSAGE_TYPE InEnumPattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_byEnum");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_byEnum Parms{};

	Parms.InEnumPattern = InEnumPattern;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_ApplyDLC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InContentsMsgLabel                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_ApplyDLC(const TArray<class FName>& InContentsMsgLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_ApplyDLC");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_ApplyDLC Parms{};

	Parms.InContentsMsgLabel = std::move(InContentsMsgLabel);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_MimanReward
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_MimanReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_MimanReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetText_ReleasedKamui
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOpenedByEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             InEventMsgLabel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           InOpenedKamuiID                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::BPI_SetText_ReleasedKamui(bool IsOpenedByEvent, class FName InEventMsgLabel, const TArray<int32>& InOpenedKamuiID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetText_ReleasedKamui");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetText_ReleasedKamui Parms{};

	Parms.IsOpenedByEvent = IsOpenedByEvent;
	Parms.InEventMsgLabel = InEventMsgLabel;
	Parms.InOpenedKamuiID = std::move(InOpenedKamuiID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetMainText_byLabel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InMessageLabel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetMainText_byLabel(const class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetMainText_byLabel");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetMainText_byLabel Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageLabel = InMessageLabel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetMainText_byID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InMessageId                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetMainText_byID(const class UScriptMessageAsset*& InMessageAsset, const int32 InMessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetMainText_byID");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetMainText_byID Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageId = InMessageId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTitle_byLabel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InMessageLabel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetTitle_byLabel(const class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetTitle_byLabel");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetTitle_byLabel Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageLabel = InMessageLabel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTitle_byID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InMessageId                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetTitle_byID(const class UScriptMessageAsset*& InMessageAsset, const int32 InMessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetTitle_byID");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetTitle_byID Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageId = InMessageId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Page_Down
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Page_Down(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Page_Down");

	Params::BP_TutorialWindowCtrl2_C_BPI_Page_Down Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Page_UP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Page_UP(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Page_UP");

	Params::BP_TutorialWindowCtrl2_C_BPI_Page_UP Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Scroll_Down
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Scroll_Down(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Scroll_Down");

	Params::BP_TutorialWindowCtrl2_C_BPI_Scroll_Down Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_Scroll_Up
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_Scroll_Up(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_Scroll_Up");

	Params::BP_TutorialWindowCtrl2_C_BPI_Scroll_Up Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_SetTextJustification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextJustify                            InJustification                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_SetTextJustification(ETextJustify InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_SetTextJustification");

	Params::BP_TutorialWindowCtrl2_C_BPI_SetTextJustification Parms{};

	Parms.InJustification = InJustification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_CloseWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_CloseWindow(bool IsPlaySE, bool IsSkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_CloseWindow");

	Params::BP_TutorialWindowCtrl2_C_BPI_CloseWindow Parms{};

	Parms.IsPlaySE = IsPlaySE;
	Parms.IsSkipAnimation = IsSkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.OpenWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_WIDGET_PRIO                           InWidgetPrio                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDrawBlacCurtain                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsEscCloseIcon                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::OpenWindow(E_WIDGET_PRIO InWidgetPrio, bool IsPlaySE, bool IsSkipAnimation, bool IsDrawBlacCurtain, bool IsEscCloseIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "OpenWindow");

	Params::BP_TutorialWindowCtrl2_C_OpenWindow Parms{};

	Parms.InWidgetPrio = InWidgetPrio;
	Parms.IsPlaySE = IsPlaySE;
	Parms.IsSkipAnimation = IsSkipAnimation;
	Parms.IsDrawBlacCurtain = IsDrawBlacCurtain;
	Parms.IsEscCloseIcon = IsEscCloseIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.CloseWindow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSkipAnimation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::CloseWindow(bool IsPlaySE, bool IsSkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "CloseWindow");

	Params::BP_TutorialWindowCtrl2_C_CloseWindow Parms{};

	Parms.IsPlaySE = IsPlaySE;
	Parms.IsSkipAnimation = IsSkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTextJustification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETextJustify                            InJustification                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetTextJustification(ETextJustify InJustification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetTextJustification");

	Params::BP_TutorialWindowCtrl2_C_SetTextJustification Parms{};

	Parms.InJustification = InJustification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.RemoveWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::RemoveWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "RemoveWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetScrollOffset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InScrollOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::SetScrollOffset(int32 InScrollOffset, bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetScrollOffset");

	Params::BP_TutorialWindowCtrl2_C_SetScrollOffset Parms{};

	Parms.InScrollOffset = InScrollOffset;
	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Scroll_Up
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Scroll_Up(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Scroll_Up");

	Params::BP_TutorialWindowCtrl2_C_Scroll_Up Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Scroll_Down
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Scroll_Down(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Scroll_Down");

	Params::BP_TutorialWindowCtrl2_C_Scroll_Down Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Page_Up
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Page_Up(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Page_Up");

	Params::BP_TutorialWindowCtrl2_C_Page_Up Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Page_Down
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Page_Down(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Page_Down");

	Params::BP_TutorialWindowCtrl2_C_Page_Down Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTitleText_byID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InMessageId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetTitleText_byID(class UScriptMessageAsset*& InMessageAsset, int32 InMessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetTitleText_byID");

	Params::BP_TutorialWindowCtrl2_C_SetTitleText_byID Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageId = InMessageId;

	UObject::ProcessEvent(Func, &Parms);

	InMessageAsset = Parms.InMessageAsset;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetTitleText_byLabel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InMessageLabel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetTitleText_byLabel(class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetTitleText_byLabel");

	Params::BP_TutorialWindowCtrl2_C_SetTitleText_byLabel Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageLabel = InMessageLabel;

	UObject::ProcessEvent(Func, &Parms);

	InMessageAsset = Parms.InMessageAsset;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetMainText_byID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InMessageId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetMainText_byID(class UScriptMessageAsset*& InMessageAsset, int32 InMessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetMainText_byID");

	Params::BP_TutorialWindowCtrl2_C_SetMainText_byID Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageId = InMessageId;

	UObject::ProcessEvent(Func, &Parms);

	InMessageAsset = Parms.InMessageAsset;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetMainText_byLabel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              InMessageAsset                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InMessageLabel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetMainText_byLabel(class UScriptMessageAsset*& InMessageAsset, class FName InMessageLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetMainText_byLabel");

	Params::BP_TutorialWindowCtrl2_C_SetMainText_byLabel Parms{};

	Parms.InMessageAsset = InMessageAsset;
	Parms.InMessageLabel = InMessageLabel;

	UObject::ProcessEvent(Func, &Parms);

	InMessageAsset = Parms.InMessageAsset;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_ReleasedKamui
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOpenedByEvent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             InEventMsgLabel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           InOpenedKamuiID                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::SetText_ReleasedKamui(bool IsOpenedByEvent, class FName InEventMsgLabel, TArray<int32>& InOpenedKamuiID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_ReleasedKamui");

	Params::BP_TutorialWindowCtrl2_C_SetText_ReleasedKamui Parms{};

	Parms.IsOpenedByEvent = IsOpenedByEvent;
	Parms.InEventMsgLabel = InEventMsgLabel;
	Parms.InOpenedKamuiID = std::move(InOpenedKamuiID);

	UObject::ProcessEvent(Func, &Parms);

	InOpenedKamuiID = std::move(Parms.InOpenedKamuiID);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_MimanReward
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::SetText_MimanReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_MimanReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_AmuletMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AmuletTutorial_MsgType                InAmuletType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetText_AmuletMsg(E_AmuletTutorial_MsgType InAmuletType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_AmuletMsg");

	Params::BP_TutorialWindowCtrl2_C_SetText_AmuletMsg Parms{};

	Parms.InAmuletType = InAmuletType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_ApplyDLC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InContentsMsgLabel                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::SetText_ApplyDLC(TArray<class FName>& InContentsMsgLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_ApplyDLC");

	Params::BP_TutorialWindowCtrl2_C_SetText_ApplyDLC Parms{};

	Parms.InContentsMsgLabel = std::move(InContentsMsgLabel);

	UObject::ProcessEvent(Func, &Parms);

	InContentsMsgLabel = std::move(Parms.InContentsMsgLabel);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_InvalidDLC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     InContentsMsgLabel                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::SetText_InvalidDLC(TArray<class FName>& InContentsMsgLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_InvalidDLC");

	Params::BP_TutorialWindowCtrl2_C_SetText_InvalidDLC Parms{};

	Parms.InContentsMsgLabel = std::move(InContentsMsgLabel);

	UObject::ProcessEvent(Func, &Parms);

	InContentsMsgLabel = std::move(Parms.InContentsMsgLabel);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_byEnum
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TUTORIAL_WINDOW_MESSAGE_TYPE          InEnumPattern                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::SetText_byEnum(E_TUTORIAL_WINDOW_MESSAGE_TYPE InEnumPattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_byEnum");

	Params::BP_TutorialWindowCtrl2_C_SetText_byEnum Parms{};

	Parms.InEnumPattern = InEnumPattern;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Move_Top
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Move_Top(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Move_Top");

	Params::BP_TutorialWindowCtrl2_C_Move_Top Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.Move_Bottom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::Move_Bottom(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "Move_Bottom");

	Params::BP_TutorialWindowCtrl2_C_Move_Bottom Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.CheckInputAndUpdateScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlaySE                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::CheckInputAndUpdateScroll(bool IsPlaySE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "CheckInputAndUpdateScroll");

	Params::BP_TutorialWindowCtrl2_C_CheckInputAndUpdateScroll Parms{};

	Parms.IsPlaySE = IsPlaySE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.OnDraggedScrollBar_ByMouse
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InScrollRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::OnDraggedScrollBar_ByMouse(float InScrollRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "OnDraggedScrollBar_ByMouse");

	Params::BP_TutorialWindowCtrl2_C_OnDraggedScrollBar_ByMouse Parms{};

	Parms.InScrollRate = InScrollRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_BenefitItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InTitleLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBenefitItemMsgDataList          InItemMsgList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::SetText_BenefitItem(class FName InTitleLabel, struct FBenefitItemMsgDataList& InItemMsgList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_BenefitItem");

	Params::BP_TutorialWindowCtrl2_C_SetText_BenefitItem Parms{};

	Parms.InTitleLabel = InTitleLabel;
	Parms.InItemMsgList = std::move(InItemMsgList);

	UObject::ProcessEvent(Func, &Parms);

	InItemMsgList = std::move(Parms.InItemMsgList);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_BenefitDevil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InTitleLabel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBenefitDevilMsgDataList         InDevilMsgList                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TutorialWindowCtrl2_C::SetText_BenefitDevil(class FName InTitleLabel, struct FBenefitDevilMsgDataList& InDevilMsgList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_BenefitDevil");

	Params::BP_TutorialWindowCtrl2_C_SetText_BenefitDevil Parms{};

	Parms.InTitleLabel = InTitleLabel;
	Parms.InDevilMsgList = std::move(InDevilMsgList);

	UObject::ProcessEvent(Func, &Parms);

	InDevilMsgList = std::move(Parms.InDevilMsgList);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.SetText_IconHelp
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::SetText_IconHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "SetText_IconHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.TickUpdateBtnIcon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialWindowCtrl2_C::TickUpdateBtnIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "TickUpdateBtnIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_GetAnimState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TutorialWindow_WidgetState            AnimState                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_GetAnimState(E_TutorialWindow_WidgetState* AnimState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_GetAnimState");

	Params::BP_TutorialWindowCtrl2_C_BPI_GetAnimState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimState != nullptr)
		*AnimState = Parms.AnimState;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_GetScrollState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRequiredScroll                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ScrollPosRate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialWindowCtrl2_C::BPI_GetScrollState(bool* IsRequiredScroll, float* ScrollPosRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_GetScrollState");

	Params::BP_TutorialWindowCtrl2_C_BPI_GetScrollState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsRequiredScroll != nullptr)
		*IsRequiredScroll = Parms.IsRequiredScroll;

	if (ScrollPosRate != nullptr)
		*ScrollPosRate = Parms.ScrollPosRate;
}


// Function BP_TutorialWindowCtrl2.BP_TutorialWindowCtrl2_C.BPI_IsClickedByMouse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsClicked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TutorialWindowCtrl2_C::BPI_IsClickedByMouse(bool* IsClicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialWindowCtrl2_C", "BPI_IsClickedByMouse");

	Params::BP_TutorialWindowCtrl2_C_BPI_IsClickedByMouse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsClicked != nullptr)
		*IsClicked = Parms.IsClicked;
}

}

