#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MinimapPointofInterest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C
// 0x0060 (0x02C0 - 0x0260)
class UWB_MinimapPointOfInterest_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               AllOverlay;                                        // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               FootprintOverlay;                                  // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               IconOverlay;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PlayerCenterImage;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PlayerDirectionImage;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ViewImage;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ViewOverlay;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         HalfImageSize;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MAX_FOOTPRINT_ENTRIES;                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UImage*>                         FootprintImageArray;                               // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInstance*                      IconMI;                                            // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_MinimapPointOfInterest(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void Update(E_MINIMAP_MODE Mode, const struct FVector& Dimensions, const struct FVector& CanvasSize, const struct FVector& CanvasLocation, const struct FVector& CenterLocation, float Zoom, float CameraAngle);
	void InitPlayer();
	void UpdatePlayer(E_MINIMAP_MODE InMinimapMode, const struct FVector& Dimensions, const struct FVector& CanvasSize, float Zoom, const struct FVector& CanvasLocation, const struct FVector& CenterLocation, float InCameraAngle);
	void InitFootprint();
	void UpdateFootprintImage(class UImage*& Image, const struct FMinimapFootprintEntry& Entry);
	void InitImage();
	void UpdateFootprint();
	void SetIconSize(float Size);
	void SetAlpha(float InAlpha);
	void ShouldRotateMinimap(E_MINIMAP_MODE MinimapMode, bool* RotateMinimap);
	void GetCameraAngle(float* Angle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_MinimapPointOfInterest_C">();
	}
	static class UWB_MinimapPointOfInterest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_MinimapPointOfInterest_C>();
	}
};
static_assert(alignof(UWB_MinimapPointOfInterest_C) == 0x000008, "Wrong alignment on UWB_MinimapPointOfInterest_C");
static_assert(sizeof(UWB_MinimapPointOfInterest_C) == 0x0002C0, "Wrong size on UWB_MinimapPointOfInterest_C");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, UberGraphFrame) == 0x000260, "Member 'UWB_MinimapPointOfInterest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, AllOverlay) == 0x000268, "Member 'UWB_MinimapPointOfInterest_C::AllOverlay' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, FootprintOverlay) == 0x000270, "Member 'UWB_MinimapPointOfInterest_C::FootprintOverlay' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, IconOverlay) == 0x000278, "Member 'UWB_MinimapPointOfInterest_C::IconOverlay' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, PlayerCenterImage) == 0x000280, "Member 'UWB_MinimapPointOfInterest_C::PlayerCenterImage' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, PlayerDirectionImage) == 0x000288, "Member 'UWB_MinimapPointOfInterest_C::PlayerDirectionImage' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, ViewImage) == 0x000290, "Member 'UWB_MinimapPointOfInterest_C::ViewImage' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, ViewOverlay) == 0x000298, "Member 'UWB_MinimapPointOfInterest_C::ViewOverlay' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, HalfImageSize) == 0x0002A0, "Member 'UWB_MinimapPointOfInterest_C::HalfImageSize' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, MAX_FOOTPRINT_ENTRIES) == 0x0002A4, "Member 'UWB_MinimapPointOfInterest_C::MAX_FOOTPRINT_ENTRIES' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, FootprintImageArray) == 0x0002A8, "Member 'UWB_MinimapPointOfInterest_C::FootprintImageArray' has a wrong offset!");
static_assert(offsetof(UWB_MinimapPointOfInterest_C, IconMI) == 0x0002B8, "Member 'UWB_MinimapPointOfInterest_C::IconMI' has a wrong offset!");

}

