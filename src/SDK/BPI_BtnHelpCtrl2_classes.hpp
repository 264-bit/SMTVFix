#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BtnHelpCtrl2

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BtnHelpCtrl2.BPI_BtnHelpCtrl2_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BtnHelpCtrl2_C final : public IInterface
{
public:
	void FrameIn(const E_BTN_HELP_DIR InDirectionType, const E_BTN_HELP_POS_TYPE InPositionType, const bool SkipAnimation, bool* NotUse);
	void FrameIn_AsChildOfCanvas(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_POS_TYPE InPositionType, bool SkipAnimation, class UCanvasPanel*& InCanvasPanel, bool* NotUse);
	void FrameOut(const E_BTN_HELP_DIR InDirectionType, const bool SkipAnimation, bool* NotUse);
	void FrameOut_All(bool SkipAnimation, bool* NotUse);
	void SkipAnim(const E_BTN_HELP_DIR InDirectionType, bool* NotUse);
	void SetPositionType(E_BTN_HELP_DIR InDirectionType, const E_BTN_HELP_POS_TYPE InPositionType, bool* NotUse);
	void SetInfo_PresetPattern(const E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_SET InHelpPattern, bool* NotUse);
	void SetInfo_ManualPattern(E_BTN_HELP_DIR InDirectionType, const TArray<struct FBtnHelpInfo>& InHelpPattern, bool* NotUse);
	void GetBtnHelpAnimState(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_UI_STATE* State);
	void SetVisibility(E_BTN_HELP_DIR InDirectionType, bool IsVisible, bool* NotUse);
	void GetVisibility(E_BTN_HELP_DIR InDirectionType, bool* IsVisible);
	void ChangeBtnHelp(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ChangeInfo2& ChangeInfo, bool* NotUse);
	void SetHoldEffect_byMapping(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_MAPPING_KEY_TYPE TargetMapping, bool IsHold, bool* NotUse);
	void SetHoldEffect_byIdx(E_BTN_HELP_DIR InDirectionType, int32 Param_Index, bool IsHold, bool* NotUse);
	void SetActiveColor_byMapping(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byEnum& InActiveColorInfo, bool* NotUse);
	void SetActiveColor_byIdx(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byIdx& InActiveColorInfo, bool* NotUse);
	void SetActiveColors_byIdx(E_BTN_HELP_DIR InDirectionType, TArray<struct FST_BtnHelp_ColorInfo_byIdx>& InActiveColorInfo, bool* NotUse);
	void GetActiveColor_ByMapping(E_BTN_HELP_DIR InDirectionType, E_BTN_HELP_MAPPING_KEY_TYPE InTargetMapping, bool* IsActive);
	void SetActiveColors_byMapping(E_BTN_HELP_DIR InDirectionType, const TArray<struct FST_BtnHelp_ColorInfo_byEnum>& InActiveColorInfo, bool* NotUse);
	void SetActiveColors_All(E_BTN_HELP_DIR InDirectionType, bool IsActive, bool* NotUse);
	void SetActiveColor_Reserve(E_BTN_HELP_DIR InDirectionType, const struct FST_BtnHelp_ColorInfo_byIdx& InActiveColorInfo, bool* NotUse);
	void SetActiveColors_Reserve(E_BTN_HELP_DIR InDirectionType, TArray<struct FST_BtnHelp_ColorInfo_byIdx>& InActiveColorInfo, bool* NotUse);
	void CancelReserveColors(E_BTN_HELP_DIR InDirectionType, bool* NotUse);
	void SetHoldEffect_All2(E_BTN_HELP_DIR InDirectionType, bool IsHold, bool* NotUse);
	void SetIconMode(bool IsGamePad, bool* NotUse);
	void AddWidgetToNormalViewport(E_BTN_HELP_DIR InDirectionType, bool* NotUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BtnHelpCtrl2_C">();
	}
	static class IBPI_BtnHelpCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BtnHelpCtrl2_C>();
	}
};
static_assert(alignof(IBPI_BtnHelpCtrl2_C) == 0x000008, "Wrong alignment on IBPI_BtnHelpCtrl2_C");
static_assert(sizeof(IBPI_BtnHelpCtrl2_C) == 0x000028, "Wrong size on IBPI_BtnHelpCtrl2_C");

}

