#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MajinWarpPoint

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MajinWarpPoint.BP_MajinWarpPoint_C
// 0x0030 (0x0250 - 0x0220)
class ABP_MajinWarpPoint_C final : public AActor
{
public:
	class UBPC_ResidentSound_C*                   BPC_ResidentSound;                                 // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal1;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Cm_417_000;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MajinWarpPoint_C">();
	}
	static class ABP_MajinWarpPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MajinWarpPoint_C>();
	}
};
static_assert(alignof(ABP_MajinWarpPoint_C) == 0x000008, "Wrong alignment on ABP_MajinWarpPoint_C");
static_assert(sizeof(ABP_MajinWarpPoint_C) == 0x000250, "Wrong size on ABP_MajinWarpPoint_C");
static_assert(offsetof(ABP_MajinWarpPoint_C, BPC_ResidentSound) == 0x000220, "Member 'ABP_MajinWarpPoint_C::BPC_ResidentSound' has a wrong offset!");
static_assert(offsetof(ABP_MajinWarpPoint_C, Decal1) == 0x000228, "Member 'ABP_MajinWarpPoint_C::Decal1' has a wrong offset!");
static_assert(offsetof(ABP_MajinWarpPoint_C, Decal) == 0x000230, "Member 'ABP_MajinWarpPoint_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_MajinWarpPoint_C, Capsule) == 0x000238, "Member 'ABP_MajinWarpPoint_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_MajinWarpPoint_C, Cm_417_000) == 0x000240, "Member 'ABP_MajinWarpPoint_C::Cm_417_000' has a wrong offset!");
static_assert(offsetof(ABP_MajinWarpPoint_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_MajinWarpPoint_C::DefaultSceneRoot' has a wrong offset!");

}

