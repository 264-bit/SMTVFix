#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ProjectGameInstance

#include "Basic.hpp"

#include "BPI_ProjectGameInstance_classes.hpp"
#include "BPI_ProjectGameInstance_parameters.hpp"


namespace SDK
{

// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetMapUICtrl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MapUICommon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectGameInstance_C::BPI_SetMapUICtrl(class AActor* MapUICommon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_SetMapUICtrl");

	Params::BPI_ProjectGameInstance_C_BPI_SetMapUICtrl Parms{};

	Parms.MapUICommon = MapUICommon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetMapUICtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MapUICommon                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectGameInstance_C::BPI_GetMapUICtrl(class AActor** MapUICommon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_GetMapUICtrl");

	Params::BPI_ProjectGameInstance_C_BPI_GetMapUICtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapUICommon != nullptr)
		*MapUICommon = Parms.MapUICommon;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetPreloadLevelList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          PreloadLevelList                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_ProjectGameInstance_C::BPI_SetPreloadLevelList(const TArray<struct FPrimaryAssetId>& PreloadLevelList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_SetPreloadLevelList");

	Params::BPI_ProjectGameInstance_C_BPI_SetPreloadLevelList Parms{};

	Parms.PreloadLevelList = std::move(PreloadLevelList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_ClearPreloadLevelList
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectGameInstance_C::BPI_ClearPreloadLevelList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_ClearPreloadLevelList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_IsScreenShot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectGameInstance_C::BPI_IsScreenShot(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_IsScreenShot");

	Params::BPI_ProjectGameInstance_C_BPI_IsScreenShot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_SetEncountScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountScene                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectGameInstance_C::BPI_SetEncountScene(class AActor* EncountScene, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_SetEncountScene");

	Params::BPI_ProjectGameInstance_C_BPI_SetEncountScene Parms{};

	Parms.EncountScene = EncountScene;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetEncountScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountScene                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectGameInstance_C::BPI_GetEncountScene(class AActor** EncountScene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_GetEncountScene");

	Params::BPI_ProjectGameInstance_C_BPI_GetEncountScene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EncountScene != nullptr)
		*EncountScene = Parms.EncountScene;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetDaathLightType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDaathTypeList                          LightType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectGameInstance_C::BPI_GetDaathLightType(EDaathTypeList* LightType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_GetDaathLightType");

	Params::BPI_ProjectGameInstance_C_BPI_GetDaathLightType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LightType != nullptr)
		*LightType = Parms.LightType;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_CheckLoadMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LoadMap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectGameInstance_C::BPI_CheckLoadMap(bool* LoadMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_CheckLoadMap");

	Params::BPI_ProjectGameInstance_C_BPI_CheckLoadMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LoadMap != nullptr)
		*LoadMap = Parms.LoadMap;
}


// Function BPI_ProjectGameInstance.BPI_ProjectGameInstance_C.BPI_GetPreloadLevelList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<struct FPrimaryAssetId>          PreloadLevelList                                       (Parm, OutParm)

void IBPI_ProjectGameInstance_C::BPI_GetPreloadLevelList(TArray<struct FPrimaryAssetId>* PreloadLevelList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectGameInstance_C", "BPI_GetPreloadLevelList");

	Params::BPI_ProjectGameInstance_C_BPI_GetPreloadLevelList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PreloadLevelList != nullptr)
		*PreloadLevelList = std::move(Parms.PreloadLevelList);
}

}

