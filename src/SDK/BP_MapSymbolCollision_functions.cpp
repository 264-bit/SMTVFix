#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapSymbolCollision

#include "Basic.hpp"

#include "BP_MapSymbolCollision_classes.hpp"
#include "BP_MapSymbolCollision_parameters.hpp"


namespace SDK
{

// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.EvtDis_Overlap__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MapAttackEncount                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_MapAttackDamage                       AttackDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              AttackComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::EvtDis_Overlap__DelegateSignature(bool MapAttackEncount, E_MapAttackDamage AttackDamage, class UPrimitiveComponent* AttackComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "EvtDis_Overlap__DelegateSignature");

	Params::BP_MapSymbolCollision_C_EvtDis_Overlap__DelegateSignature Parms{};

	Parms.MapAttackEncount = MapAttackEncount;
	Parms.AttackDamage = AttackDamage;
	Parms.AttackComponent = AttackComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ExecuteUbergraph_BP_MapSymbolCollision
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::ExecuteUbergraph_BP_MapSymbolCollision(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "ExecuteUbergraph_BP_MapSymbolCollision");

	Params::BP_MapSymbolCollision_C_ExecuteUbergraph_BP_MapSymbolCollision Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.OnComponentBeginOverlap_AttackCollision2
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_MapSymbolCollision_C::OnComponentBeginOverlap_AttackCollision2(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "OnComponentBeginOverlap_AttackCollision2");

	Params::BP_MapSymbolCollision_C_OnComponentBeginOverlap_AttackCollision2 Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MapSymbolCollision_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "ReceiveTick");

	Params::BP_MapSymbolCollision_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.BPI_ReceiveMapAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMapAttackDamageData             MapAttackData                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::BPI_ReceiveMapAttack(const struct FMapAttackDamageData& MapAttackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "BPI_ReceiveMapAttack");

	Params::BP_MapSymbolCollision_C_BPI_ReceiveMapAttack Parms{};

	Parms.MapAttackData = std::move(MapAttackData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.ChangeAttackCollision
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attack                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapSymbolCollision_C::ChangeAttackCollision(bool Attack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "ChangeAttackCollision");

	Params::BP_MapSymbolCollision_C_ChangeAttackCollision Parms{};

	Parms.Attack = Attack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_MapSymbolCollision_C::BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_MapSymbolCollision_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.InitSymbolParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MapSymbolCollision_C::InitSymbolParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "InitSymbolParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.UpdateSymbolParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Changed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapSymbolCollision_C::UpdateSymbolParam(bool* Changed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "UpdateSymbolParam");

	Params::BP_MapSymbolCollision_C_UpdateSymbolParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Changed != nullptr)
		*Changed = Parms.Changed;
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapSymbolCollision_C::SetCollision(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "SetCollision");

	Params::BP_MapSymbolCollision_C_SetCollision Parms{};

	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetTouchEncountEnable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_TouchEncountEnable                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapSymbolCollision_C::SetTouchEncountEnable(bool Param_TouchEncountEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "SetTouchEncountEnable");

	Params::BP_MapSymbolCollision_C_SetTouchEncountEnable Parms{};

	Parms.Param_TouchEncountEnable = Param_TouchEncountEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.SetAttackEncountEnable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_AttackEncountEnable                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapSymbolCollision_C::SetAttackEncountEnable(bool Param_AttackEncountEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "SetAttackEncountEnable");

	Params::BP_MapSymbolCollision_C_SetAttackEncountEnable Parms{};

	Parms.Param_AttackEncountEnable = Param_AttackEncountEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.GetBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::GetBaseLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "GetBaseLocation");

	Params::BP_MapSymbolCollision_C_GetBaseLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_MapSymbolCollision.BP_MapSymbolCollision_C.GetStopCollisionSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapSymbolCollision_C::GetStopCollisionSize(struct FVector* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapSymbolCollision_C", "GetStopCollisionSize");

	Params::BP_MapSymbolCollision_C_GetStopCollisionSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = std::move(Parms.Size);
}

}

