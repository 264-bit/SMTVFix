#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleParty

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleParty.BPI_BattleParty_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleParty_C final : public IInterface
{
public:
	void BI_GetEnemyLeaderPartyData(struct FBtlParty* RetValue);
	void BI_DestroyUnitToMap(bool* RetValue);
	void BI_const_GetPartyStart(int32* RetValue);
	void BI_const_GetPartyLoopMax(int32* RetValue);
	void BI_const_GetEnemyStart(int32* RetValue);
	void BI_const_GetEnemyNum(int32* RetValue);
	void BI_const_GetNPCStart(int32* RetValue);
	void BI_const_GetNPCNum(int32* RetValue);
	void BI_const_GetPlayerLoopMax(int32* RetValue);
	void BI_const_GetStockStart(int32* RetValue);
	void BI_const_GetStockLoopMax(int32* RetValue);
	void BI_const_GetOnBattleNumMax(int32* RetValue);
	void BI_const_GetPartnerStart(int32* RetValue);
	void BI_const_GetPartnerNum(int32* RetValue);
	void BI_const_GetPartnerLoopMax(int32* RetValue);
	void BI_AddFlag(int32 Param_Index, E_BTL_PARTY_STAT InFlag, bool* RetValue);
	void BI_DelFlag(int32 Param_Index, E_BTL_PARTY_STAT Flag, int32* NoUse);
	void BI_CheckFlag(int32 Param_Index, E_BTL_PARTY_STAT Flag, bool* RetValue);
	void BI_AddFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, int32* Ret);
	void BI_DelFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, int32* Ret);
	void BI_CheckFlag2(int32 Param_Index, E_BTL_PARTY_STAT2 Flag, bool* RetValue);
	void BI_AddBehaviorFlag();
	void BI_DelBehaviorFlag();
	void BI_CheckBehaviorFlag();
	void BI_AddFlagPartyAll();
	void BI_AddFlag2PartyAll();
	void BI_DelFlagPartyAll();
	void BI_DelFlag2PartyAll();
	void BI_AddFlagPartnerAll();
	void BI_AddFlag2PartnerAll();
	void BI_DelFlagPartnerAll();
	void BI_DelFlag2PartnerAll();
	void BI_SetBadStatusOne(int32 PartyIndex, E_BAD_STATUS InBst, bool Sw, bool* RetValue);
	void BI_GetPartyUnit(int32 PartyIndex, TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_GetCharaID(int32 PartyIndex, int32* RetValue);
	void BI_GetCharaData(int32 PartyIndex, struct FBtlCharData* RetValue);
	void BI_GetPartyData(int32 PartyIndex, struct FBtlParty* RetValue);
	void BI_CheckBadStatus(int32 Param_Index, E_BAD_STATUS bst, bool* RetValue);
	void BI_IsUseableItem(int32 PartyIndex, int32 ItemId, bool* RetValue);
	void BI_IsInField(int32 PartyIndex, bool* RetValue);
	void BI_const_GetEnemyLoopMax(int32* RetValue);
	void BI_DelBadStatusTurnCounter(int32 PartyIndex, bool* RetValue);
	void BI_AddHPMP(int32 Param_Index, int32 InValue, bool IsHP, bool* RetValue);
	void BI_SetDeadParam(int32 Param_Index, bool* RetValue);
	void BI_GetAuraState(int32 Param_Index, E_CHARA_AURA_TYPE* RetValue);
	void BI_IsNKM(int32 Param_Index, bool* RetValue);
	void BI_SetNkmStockIn(int32 Param_Index, int32* RetValue);
	void BI_GetBadStatus(int32 Param_Index, int32* RetValue);
	void BI_GetUnitStateMotion(int32 Param_Index, E_CHARA_MOTION_ID* RetValue);
	void BI_GetName(int32 Param_Index, class FText* RetValue);
	void BI_SetHPMP(int32 Param_Index, int32 InValue, bool IsHP, bool* RetValue);
	void BI_DestroyUnit(int32 Param_Index, bool IsDestroyActor, bool* RetValue);
	void BI_SetNewPartyIn(int32 Param_Index, int32* RetValue, int32* DevilID, int32* NewEntryIndex);
	void BI_SetPartyUnit(int32 Param_Index, TScriptInterface<class IBPI_CharaBaseAccessor_C> InUnit, int32 DevilID, E_BTL_CHAR_TYPE Type, bool IsReader, bool* RetValue);
	void BI_SetPartyHomeTransform(int32 Param_Index, const struct FTransform& Data, bool* RetValue);
	void BI_UnitSetVisibility(int32 Param_Index, bool Sw, bool ParticleInterlock, bool DeactivateParticle, bool* RetValue);
	void BI_UnitSetVisibilityAll(bool Sw, bool* RetValue);
	void BI_IsDead(int32 Param_Index, bool* RetValue);
	void BI_IsHero(int32 Param_Index, bool* RetValue);
	void BI_IsExist(int32 Param_Index, bool* RetValue);
	void BI_CanTurnAct(int32 Param_Index, bool* RetValue);
	void BI_GetUseableSkillList(int32 Param_Index, TArray<bool>* RetValue);
	void BI_Replace(int32 Index_A, int32 Index_B, E_SUMMON_TYPE Type, bool* RetValue);
	void BI_IsStock(int32 Param_Index, bool* RetValue);
	void BI_GetSide(int32 Param_Index, E_BTL_SIDE* Side);
	void BI_GetSkillCost(int32 Param_Index, int32 SkillId, int32* RetValue);
	void BI_IsNearDeath(int32 Param_Index, bool* RetValue);
	void BI_GetPartyTransform(int32 Param_Index, struct FTransform* RetValue);
	void BI_ExpendAction(int32 Param_Index, bool IsForceFinish, bool* RetValue);
	void BI_UpdateUnitState(int32 Param_Index, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, bool* RetValue);
	void BI_GetHPRatio(int32 Param_Index, float* RetValue);
	void BI_GetNowHP(int32 Param_Index, int32* RetValue);
	void BI_GetMaxHP(int32 Param_Index, int32* RetValue);
	void BI_GetNowMP(int32 Param_Index, int32* RetValue);
	void BI_GetMaxMP(int32 Param_Index, int32* RetValue);
	void BI_GetHeroCharaType(E_BTL_CHAR_TYPE* NewParam);
	void BI_ConditionMapGetSkillID(int32 Param_Index, E_BTL_CNT Type, int32* RetValue);
	void BI_ConditionMapIsExist(int32 Param_Index, bool* RetValue);
	void BI_UpdateEnemyInfo(bool* RetValue);
	void BI_EnemyInfoDamageHP(int32 PartyIndex, int32 DamageHP, float AinmTime, bool* NewParam3);
	void BI_EnemyInfoDrawSwitchHPBarOne(int32 PartyIndex, bool Sw, bool ForDamage, bool Use2Line, bool IsUseSkipTarget, bool* RetValue);
	void BI_GetComboHitCount(int32 Param_Index, int32* RetValue);
	void BI_EnemyInfoDrawSwitchCombo_LOne(int32 PartyIndex, bool Sw, bool* RetValue);
	void BI_EnemyInfoDrawUpdateCombo(int32 Param_Index, bool* RetValue);
	void BI_EnemyInfoDrawAddCombo_LOne(int32 Param_Index, bool* RetValue);
	void BI_EnemyInfoDrawSwitchCombo_SOne(int32 Param_Index, bool Sw, bool* RetValue);
	void BI_GetActOrder(int32 PartyIndex, int32* RetValue);
	void BI_GetUseableSubSkillList(int32 PartyIndex, TArray<bool>* RetValue);
	void BI_EnemyInfoDrawAutoHideOneAll(int32 PartyIndex, float DeltaTime, bool* RetValue);
	void BI_EnemyInfoDrawAttachToCamera(int32 PartyIndex, bool Attach, bool* RetValue);
	void BI_GetHeroUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_GetNextPlusCombo(int32 PartyIndex, int32* RetValue);
	void BI_SetPartyBlank(int32 Param_Index, bool* RetValue);
	void BI_GetActListForRelativeScale(int32 PartyIndex, TArray<int32>* RetValue);
	void BI_EnemyInfoUpdatePositionHPBar(int32 Param_Index, bool* RetValue);
	void BI_UnitLookAt(int32 PartyIndex, const struct FVector& Location, bool* NewParam1);
	void BI_LookAtAve(int32 PartyIndex, bool* RetValue);
	void BI_BreakLookAt(int32 PartyIndex, bool* RetValue);
	void BI_GetSideAveLocation(TMap<class FString, struct FVector>* Playerside, TMap<class FString, struct FVector>* EnemySide);
	void BI_GetShounenUnit(TScriptInterface<class IBPI_CharaBaseAccessor_C>* RetValue);
	void BI_UnitSetVisibilitySideAll(bool Sw, bool IsPlayer, bool* RetValue);
	void BI_AddIsInfieldList(E_BTL_SIDE Side, int32 PartyIndex, bool* RetValue);
	void BI_GetSideActList(E_BTL_SIDE Side, TArray<int32>* RetValue);
	void BI_GetActListAll(TArray<int32>* RetValue);
	void BI_UnitGetVisibility(int32 Param_Index, bool* IsVisible);
	void BI_GetCommandTargetLocation(struct FVector* RetValue);
	void BI_BeHome(int32 Param_Index, bool* NoUse);
	void BI_BeHomeSideAll(bool IsPlayer, bool* NoUse);
	void BI_UnitSetDitherValueSideAll(float Time, bool IsFadeOut, bool IsPlayer, bool* NoUse);
	void BI_GetCommandBoxTransform(struct FTransform* RetValue);
	void BI_IsUplifting(int32 PartyIndex, bool* Ret);
	void BI_GetHeroIndex(int32* Param_Index);
	void BI_UnitSetLOD(int32 PartyIndex, int32 LOD, bool* NoUse);
	void BI_UnitSetLODSideAll(int32 LOD, bool IsPlayer, bool* NoUse);
	void BI_GetSideIsTargetList(E_BTL_SIDE Side, TArray<int32>* List);
	void BI_IsDown(int32 PartyIndex, bool* IsDown);
	void BI_DelIsInFieldList(E_BTL_SIDE Side, int32 PartyIndex, bool* NoUse);
	void BI_ModeChange(int32 PartyIndex, int32 AfterDevilID, bool* Ret);
	void BI_GetEnemyLeaderIndex(int32* PartyIndex);
	void BI_EnemyInfoDrawSwitchAishouNoticeAll(int32 ActorIndex, TArray<E_ATTRIBUTE_TYPE>& DefenceAishou, bool IsShowAll, bool Sw, bool ForEnemy, bool ForFriend, bool Immediately, bool IsPenetration, bool* NoUse);
	void BI_GetEnableFirstPartyIndex(int32* PartyIndex);
	void BI_GetBattlePartyIndexByNkmIndex(int32 InNkmIndex, int32 InPlayerIndex, int32 InType, int32* OutPartyIndex);
	void BI_IsExistInParty(int32 CharaID, bool* IsExist);
	void BI_GetBattleEnemyNumber(int32* OutNumber);
	void BI_GetBattleEnemyPartyIndexByIndex(int32 InIndex, int32* OutPartyIndex);
	void BI_EnemyInfoSetEnableUpdatePosition(bool Enable, bool* NoUse);
	void BI_GetNameAddID(int32 PartyIndex, class FText* Param_Name);
	void BI_GetAllIsInFieldPartyData(bool IsTargetOnly, TArray<struct FBtlParty>* PartyData);
	void BI_GetAllIsTargetList(TArray<int32>* List);
	void BI_EnemyInfoDrawSwitchPartyAll(bool Sw, bool* NoUse);
	void BI_EnemyInfoClearAll(bool* NoUse);
	void BI_IsDeadDamage(int32 PartyIndex, int32 Damage, bool* Fatality);
	void BI_CheckBossFlag(int32 PartyIndex, E_BTL_BOSS_FLAG BossFlag, bool* IsTrue);
	void BI_GetPartyHomeTransform(int32 PartyIndex, struct FTransform* Home);
	void BI_IsAlreadyDead(int32 PartyIndex, bool* IsDead);
	void BI_CheckMitama(int32 PartyIndex, bool* Ret);
	void BI_GetMitamaAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetKuishibariCureHP(int32 PartyIndex, E_KUISHIBARI_LEVEL Level, int32* CureHp);
	void BI_EnemyInfoGetCurrentHP(int32 PartyIndex, int32* CurrentHP);
	void BI_IsGuest(int32 PartyIndex, bool* Valid);
	void BI_CheckMagatsuhiDevil(int32 PartyIndex, bool* Ret);
	void BI_GetMagatsuhiDevilAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetMagatsuhiDevilDropItemID(int32 PartyIndex, TArray<int32>* ItemIDArray);
	void BI_GetMagatsuhiDevilMagatsuhiSkill(int32 PartyIndex, TArray<int32>* SkillIDArray);
	void BI_UniqueSkill_ChangeTest(int32 SrcIndex, int32 DstIndex, bool* NoUse);
	void BI_GetStealMagatsuhiSkill(int32 PartyIndex, int32* SkillId);
	void BI_GetActCounter(int32 PartyIndex, int32* Counter);
	void BI_IsBossRushChallengeModeEnemy(int32 PartyIndex, bool* Ret);
	void BI_GetBossRushChallengeModeAnalyzeData(int32 PartyIndex, struct FAnalyzeData* AnalyzeData);
	void BI_GetPrevHPRatio(int32 PartyIndex, float* Ratio);
	void BI_IsPhisicsTaisei(int32 PartyIndex, E_ATTRIBUTE_TYPE Attr, bool* Ret);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleParty_C">();
	}
	static class IBPI_BattleParty_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleParty_C>();
	}
};
static_assert(alignof(IBPI_BattleParty_C) == 0x000008, "Wrong alignment on IBPI_BattleParty_C");
static_assert(sizeof(IBPI_BattleParty_C) == 0x000028, "Wrong size on IBPI_BattleParty_C");

}

