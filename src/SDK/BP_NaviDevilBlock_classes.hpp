#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NaviDevilBlock

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NaviDevilBlock.BP_NaviDevilBlock_C
// 0x0028 (0x0248 - 0x0220)
class ABP_NaviDevilBlock_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SM_DebugBox;                                       // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitSize;                                           // 0x0238(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitView;                                           // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void CheckHitIN(const struct FVector& Location, const struct FVector& OffsetSize, bool* In);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NaviDevilBlock_C">();
	}
	static class ABP_NaviDevilBlock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NaviDevilBlock_C>();
	}
};
static_assert(alignof(ABP_NaviDevilBlock_C) == 0x000008, "Wrong alignment on ABP_NaviDevilBlock_C");
static_assert(sizeof(ABP_NaviDevilBlock_C) == 0x000248, "Wrong size on ABP_NaviDevilBlock_C");
static_assert(offsetof(ABP_NaviDevilBlock_C, SM_DebugBox) == 0x000220, "Member 'ABP_NaviDevilBlock_C::SM_DebugBox' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilBlock_C, Box) == 0x000228, "Member 'ABP_NaviDevilBlock_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilBlock_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_NaviDevilBlock_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilBlock_C, HitSize) == 0x000238, "Member 'ABP_NaviDevilBlock_C::HitSize' has a wrong offset!");
static_assert(offsetof(ABP_NaviDevilBlock_C, HitView) == 0x000244, "Member 'ABP_NaviDevilBlock_C::HitView' has a wrong offset!");

}

