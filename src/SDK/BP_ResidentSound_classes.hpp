#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResidentSound

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ResidentSound.BP_ResidentSound_C
// 0x0030 (0x0250 - 0x0220)
class ABP_ResidentSound_C final : public AActor
{
public:
	class USphereComponent*                       CullRangePreview1;                                 // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CullRangePreview;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_ResidentSound_C*                   BPC_ResidentSound;                                 // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundAtomCue*                          Cue;                                               // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ResidentSound_C">();
	}
	static class ABP_ResidentSound_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ResidentSound_C>();
	}
};
static_assert(alignof(ABP_ResidentSound_C) == 0x000008, "Wrong alignment on ABP_ResidentSound_C");
static_assert(sizeof(ABP_ResidentSound_C) == 0x000250, "Wrong size on ABP_ResidentSound_C");
static_assert(offsetof(ABP_ResidentSound_C, CullRangePreview1) == 0x000220, "Member 'ABP_ResidentSound_C::CullRangePreview1' has a wrong offset!");
static_assert(offsetof(ABP_ResidentSound_C, CullRangePreview) == 0x000228, "Member 'ABP_ResidentSound_C::CullRangePreview' has a wrong offset!");
static_assert(offsetof(ABP_ResidentSound_C, BPC_ResidentSound) == 0x000230, "Member 'ABP_ResidentSound_C::BPC_ResidentSound' has a wrong offset!");
static_assert(offsetof(ABP_ResidentSound_C, Billboard) == 0x000238, "Member 'ABP_ResidentSound_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_ResidentSound_C, Root) == 0x000240, "Member 'ABP_ResidentSound_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_ResidentSound_C, Cue) == 0x000248, "Member 'ABP_ResidentSound_C::Cue' has a wrong offset!");

}

