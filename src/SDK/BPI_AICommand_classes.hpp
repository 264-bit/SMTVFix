#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AICommand

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_AICommand.BPI_AICommand_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_AICommand_C final : public IInterface
{
public:
	void BI_ActSkill(int32 SkillId, bool* RetValue);
	void BI_ActAttack(bool* RetValue);
	void BI_TarAI(bool* RetValue);
	void BI_TarAishouNotPlus(E_ATTRIBUTE_TYPE InValue, bool* RetValue);
	void BI_TarRandom(bool* RetValue);
	void BI_ChkMyHPPerc(int32 Perc, bool* RetValue);
	void BI_TempFlagOn(uint8 InValue, bool* RetValue);
	void BI_TempFlagOff(uint8 InValue, bool* RetValue);
	void BI_TempFlagCheck(uint8 InValue, bool* RetValue);
	void BI_TempFlagClear(bool* RetValue);
	void BI_ChkPLHPPerc(int32 InValue, bool* RetValue);
	void BI_ChkPLHPPercOver(int32 Perc, bool* RetValue);
	void BI_TarHPMin(bool* RetValue);
	void BI_TarHPMax(bool* RetValue);
	void BI_ChkENBstOver(E_BAD_STATUS bst, int32 InValue, bool* RetValue);
	void BI_ChkPLBstOver(E_BAD_STATUS bst, int32 InValue, bool* RetValue);
	void BI_TarNotBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_TarBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_OptNextCritical(bool* RetValue);
	void BI_OptNextMiss(bool* RetValue);
	void BI_GetMySkillID(int32 Slot, int32* RetValue);
	void BI_GetMySkillIDAttr(int32 Slot, E_ATTRIBUTE_TYPE* RetValue);
	void BI_ChkPLAishouPlus(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_ChkPLAishouFlat(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_ChkPLAishouMinus(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_TarAishouMinus(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_TarAishouNotMinus(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_TarHPPerc(int32 InHp, bool* RetValue);
	void BI_TarID(int32 InID, bool* RetValue);
	void BI_TarPartyIndex(int32 InPartyIndex, bool* RetValue);
	void BI_TarHero(bool* RetValue);
	void BI_TarNotHero(bool* RetValue);
	void BI_TarNotID(int32 InID, bool* RetValue);
	void BI_TarSelf(bool* RetValue);
	void BI_TarAishouFlat(E_ATTRIBUTE_TYPE InAishou, bool* RetValue);
	void BI_TarAishouNotFlat(E_ATTRIBUTE_TYPE InAishou, bool* RetValue);
	void BI_TarSelfSideOther(bool* RetValue);
	void BI_ChkENHPPerc(int32 Perc, bool* RetValue);
	void BI_ChkENHPPercOver(int32 Perc, bool* RetValue);
	void BI_ChkMyLvOver(int32 Level, bool* RetValue);
	void BI_ChkPLLvOver(int32 Level, bool* RetValue);
	void BI_ChkENLvOver(int32 Level, bool* RetValue);
	void BI_ChkENCnt(int32 Num, bool* RetValue);
	void BI_ChkMyBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_ChkPLBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_ChkENBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_ChkPLID(int32 ID, bool* RetValue);
	void BI_ChkENID(int32 ID, bool* RetValue);
	void BI_ChkENHojoPlusNum(E_AI_SERCH_AID InHojo, int32 InValue, bool* RetValue);
	void BI_ChkPLHojoPlusNum(E_AI_SERCH_AID InHojo, int32 InValue, bool* RetValue);
	void BI_ChkENHojoMinusNum(E_AI_SERCH_AID InHojo, int32 InValue, bool* RetValue);
	void BI_ChkPLHojoMinusNum(E_AI_SERCH_AID InHojo, int32 InValue, bool* RetValue);
	void BI_ChkMyUsedAttr(E_ATTRIBUTE_TYPE InAttr, bool* RetValue);
	void BI_ChkMyUsedSkillID(int32 InSkillId, bool* RetValue);
	void BI_ChkMyUsedSkillIDTurn(int32 InSkillId, int32 InTurn, bool* RetValue);
	void BI_ChkMyUsedSkillIDAct(int32 InSkillId, int32 InActNum, bool* IsUsed);
	void BI_ChkMyCharged(bool* RetValue);
	void BI_ChkMyKaishingan(bool* RetValue);
	void BI_Chk_PLNotBst(E_BAD_STATUS bst, bool* RetValue);
	void BI_Chk_PLCritical(bool* RetValue);
	void BI_Chk_ENIDHojoMinus(int32 InID, E_EFFICACY_BD N, int32 N2, bool* RetValue);
	void BI_ChkENIDHojoPlus(int32 InDevilId, E_EFFICACY_BD InHojo, int32 InValue, bool* RetValue);
	void BI_Chk_ENID(int32 DevilID, bool* RetValue);
	void BI_Tar_SetTargetHojoMIN(E_EFFICACY_BD Efficacy, bool* RetValue);
	void BI_GetENDevilID_AIAtkType(E_AI_ATK_TYPE AtkType, int32* DevilID);
	void BI_Test_AI();
	void BI_ActSummon(int32 DevilID_0, int32 DevilID_1, int32 DevilID_2, int32 DevilID_3, int32 SkillId, bool* RetValue);
	void BI_Chk_PLBstOver2(E_BAD_STATUS N, int32 Num, bool* RetValue);
	void BI_Chk_ENBstOver2(E_BAD_STATUS N, bool* RetValue);
	void BI_Chk_PLUsedSkillID(int32 SkillId, int32 TurnCnt, bool* RetValue);
	void BI_Chk_ENUsedSkillID(int32 SkillId, int32 TurnCnt, bool* RetValue);
	void BI_Chk_PLAllHP(int32 N, bool* RetValue);
	void BI_Chk_ENAllHP(int32 N, bool* RetValue);
	void BI_Chk_MyConsentrate(bool* RetValue);
	void BI_Tar_SetTargetHojoMAX(E_EFFICACY_BD N, bool* RetValue);
	void BI_TarNotBst2(E_BAD_STATUS N, int32 Num, bool* RetValue);
	void BI_SetTempValue(int32 InValue, int32 Param_Index, bool* RetValue);
	void _BI_ClearTempValue(int32 Param_Index, bool* RetValue);
	void BI_GetTempValue(int32 Param_Index, int32* RetValue);
	void BI_ClearTempValueAll(bool* RetValue);
	void BI_ChkPLCnt(int32 Num, bool* RetValue);
	void BI_GetMySkillTargetArea(int32 SkillIndex, E_SKILL_TARGET* RetValue);
	void BI_GetSkillHaveBst(int32 SkillId, E_BAD_STATUS* RetValue);
	void BI_Tar_AishouPlus(E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_GetMyHP(int32* RetValue);
	void BI_GetGlobalActNum(int32* RetValue);
	void BI_GetMyActNum(int32* RetValue);
	void BI_GetMyActPassNum(int32* RetValue);
	void BI_GetENBlockTargetNum(int32* RetValue);
	void BI_GetMyPartnerID(E_PARTNER_ID* RetValue);
	void BI_GetPartnerNum(int32* RetValue);
	void BI_GetMyBstNum(E_BAD_STATUS bst, int32* Value);
	void BI_GetTurnMod(int32 Mod, int32* Value);
	void BI_ChkAllTurn(int32 Value, bool* Ret);
	void BI_ChkActNum(int32 Value, bool* Ret);
	void BI_ChkENTargetAll(int32 TurnNum, bool* Ret);
	void BI_ChkMyUpLifting(bool* RetValue);
	void BI_ChkENUpLiftingStage(int32 GaugeValue, bool* RetValue);
	void BI_GetPress(int32* RetValue);
	void BI_GetPressFull(int32* RetValue);
	void BI_GetPressHalf(int32* RetValue);
	void BI_OptUpLifting(bool* RetValue);
	void BI_TarAishouReflection(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarAishouAbsorption(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarAishouBlock(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarAishouNotReflection(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarAishouNotAbsorption(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarAishouNotBlock(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_TarGuard(bool* Ret);
	void BI_TarNotGuard(bool* Ret);
	void BI_ChkPLAishouReflection(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkPLAishouAbsorption(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkPLAishouBlock(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkPLGuard(bool* Ret);
	void BI_ChkPLNotGuard(bool* Ret);
	void BI_ChkPLTetra(bool* Ret);
	void BI_TarNotTetra(bool* Ret);
	void BI_TarMakra(bool* Ret);
	void BI_TarNotMakra(bool* Ret);
	void BI_ChkPLNotTetra(bool* Ret);
	void BI_ChkPLMakra(bool* Ret);
	void BI_ChkPLNotMakra(bool* Ret);
	void BI_TarTetra(bool* Ret);
	void BI_OptUpLifting_TurnEnd(int32 DevilID, bool* Ret);
	void BI_GetElectrification(int32* RetValue);
	void BI_GetDown(int32 InID, int32* RetValue);
	void BI_ActSummonTsukuyomi(int32 DevilID_0, int32 DevilID_1, int32 DevilID_2, int32 DevilID_3, int32 SkillId, bool* RetValue);
	void BI_TarSummon(bool* Ret);
	void BI_GetPLAishouReflection(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_GetPLAishouAbsorption(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_GetPLAishouBlock(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_GetPLAishouPlus(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_GetPLAishouFlat(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_GetPLAishouMinus(E_ATTRIBUTE_TYPE Attr, int32* Ret);
	void BI_ChkPLChohatsu(bool* Ret);
	void BI_ChkMyAtcReflectionBefTurn(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkMyAtcAbsorptionBefTurn(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkMyAtcBlockBefTurn(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_ChkMyDmgAishouBefTurn(E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_GetMyDmgAishouMinusBefTurn(int32* Ret);
	void BI_GetMySkillIDByType(E_SKILL_TYPE SkillType, int32* SkillId);
	void BI_GetHojoSkillValidTarget(int32 SkillId, int32* Num);
	void BI_GetHPHealSkillID(int32* SkillId);
	void BI_GetUpliftProbability(int32* Probability);
	void BI_ChkEnemySurpriseTurn(bool* IsSurprise);
	void BI_GetAttackSkillID(bool IsAll, int32* SkillId);
	void BI_ChkEventEncount(bool* IsEventEncount);
	void BI_ChkMyFirstAct(bool* IsFirstAct);
	void BI_GetMyAidCounter(E_BTL_CNT AidCounter, int32* RetValue);
	bool BI_ChkENHPPercID(int32 DevilID, int32 Perc);
	void BI_Chk_ENIDUsedSkillIDTurn(int32 DevilID, int32 SkillId, int32 Turn, bool* Used);
	void BI_GetENIDAidCounter(E_BTL_CNT AidCounter, int32 DevilID, int32* RetValue);
	void BI_GetSelUseSkill(TArray<struct FBtlAISkillData>& AISkillData, int32* SkillId);
	void BI_GetHojoPlusTotal(E_BTL_SIDE Inside, E_AI_SERCH_AID InHojo, int32 InValue, int32* OutTotal);
	void BI_GetHojoMinusTotal(E_BTL_SIDE Inside, E_AI_SERCH_AID InHojo, int32 InValue, int32* OutTotal);
	void BI_Chk_SummonPositionDevilID(int32 SummonIndex, int32 DevilID, bool* Ret);
	void BI_TarSmart(bool* Ret);
	void BI_ChkENTetraID(int32 DevilID, bool* RetValue);
	void BI_ChkENMakraID(int32 DevilID, bool* RetValue);
	void BI_TarHPRatioMIN(bool* Ret);
	void BI_TarHPRatioMAX(bool* Ret);
	void BI_GetDekajaEffectiveTotal(int32* Total);
	void BI_GetDekundaEffectiveTotal(int32* Total);
	void BI_GetRandomIntegerInArray(TArray<struct FBtlAISkillData>& AISkillData, int32* Ret);
	void BI_GetPLBstCnt(int32* Cnt);
	void BI_GetPhysicalChargeEffectiveSkillID(int32* SkillId);
	void BI_GetMagicChargeEffectiveSkillID(int32* SkillId);
	void BI_ChkMyPhysicalCharge(bool* Ret);
	void BI_ChkMyMagicCharge(bool* Ret);
	void BI_GetChargeSkillID(int32* SkillId);
	void BI_GetHojoSkillIDNotCharge(int32* SkillId);
	void BI_GetSkillOverwriteBst(int32 SkillId, E_BAD_STATUS* bst);
	void BI_TarENAnalyze(bool* RetValue);
	void BI_GetTarIdPLChohatsu_ENAnalyze(int32* DevilID);
	void BI_GetPLNumVaildAttr_ENAnalyze(E_ATTRIBUTE_TYPE Attr, int32* Num);
	void BI_GetPLNumVaildSkill_ENAnalyze(int32 SkillId, int32* Num);
	void BI_ChkVaildAttrPLID_ENAnalyze(int32 DevilID, E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_ChkVaildSkillPLID_ENAnalyze(int32 DevilID, int32 SkillId, bool* RetValue);
	void BI_ChkDisabledAishou_ENAnalyze(TArray<int32>* CharaIdArray, TArray<bool>* FlagCheckArray);
	void BI_ActSummon_EmptyPos(int32 DevilID_0, int32 DevilID_1, int32 DevilID_2, int32 DevilID_3, int32 SkillId, bool IsExclusionLeader, bool* Success);
	void BI_TarWeak(bool* Ret);
	void BI_Chk_BattleEventFlag(bool* Ret);
	void BI_ChkENUsedSkillIDTurn(int32 SkillId, int32 Turn, bool* Used);
	void BI_Chk_BattleEventFlag2(bool* Ret);
	void BI_GetMyMagatsuhiSkillIDArray(TArray<int32>* SkillIDArray);
	void BI_GetMagatsuhiDevilNum(int32* Num);
	void BI_GetStealDevilID(int32* DevilID);
	void BI_GetDifficulty(E_GAME_DIFFICULTY* Difficulty);
	void BI_GetPLAishouShield(E_ATTRIBUTE_TYPE Attr, int32* Num);
	void BI_GetPLNumVaildSkill(int32 SkillId, int32* Num);
	void BI_GetPLNumVaildAttr(E_ATTRIBUTE_TYPE Attr, int32* Num);
	void BI_TarValidSkill(bool* Ret);
	void BI_TarChohatsu(bool* Ret);
	void BI_GetTarIdPLChohatsu(int32* Devil_id);
	void BI_ChkVaildSkillPLID(int32 DevilID, int32 SkillId, bool* Ret);
	void BI_ChkVaildAttrPLID(int32 DevilID, E_ATTRIBUTE_TYPE Attr, bool* Ret);
	void BI_GetMyAishouChangeThisTurn(TArray<E_ATTRIBUTE_TYPE>* List);
	void BI_GetMyAisyouChangeAll(TArray<E_ATTRIBUTE_TYPE>* List);
	void BI_TarENAnalyze2(bool* RetValue);
	void BI_GetPLNumVaildAttr_ENAnalyze2(E_ATTRIBUTE_TYPE Attr, int32* Num);
	void BI_GetPLNumVaildSkill_ENAnalyze2(int32 SkillId, int32* Num);
	void BI_ChkVaildAttrPLID_ENAnalyze2(int32 DevilID, E_ATTRIBUTE_TYPE Attr, bool* RetValue);
	void BI_ChkVaildSkillPLID_ENAnalyze2(int32 DevilID, int32 SkillId, bool* RetValue);
	void BI_ChkDisabledAishou_ENAnalyze2(TArray<int32>* CharaIdArray, TArray<bool>* FlagCheckArray);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_AICommand_C">();
	}
	static class IBPI_AICommand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_AICommand_C>();
	}
};
static_assert(alignof(IBPI_AICommand_C) == 0x000008, "Wrong alignment on IBPI_AICommand_C");
static_assert(sizeof(IBPI_AICommand_C) == 0x000028, "Wrong size on IBPI_AICommand_C");

}

