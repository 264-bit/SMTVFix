#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MakkaWindowCtrl2

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "E_MakkaWindowAnimState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_MakkaWindowCtrl2.BPI_MakkaWindowCtrl2_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_MakkaWindowCtrl2_C final : public IInterface
{
public:
	void BPI_OpenMoneyWindow2(bool IsSkipAnimation, bool IsSetPartyMakka, bool WithOpenTotalWindow, bool* NotUse);
	void BPI_OpenTotalWIndow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_OpenCostWIndow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseMoneyWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseTotalWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_CloseCostWindow2(bool IsSkipAnimation, bool* NotUse);
	void BPI_SetMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, bool* NotUse);
	void BPI_SetTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_SetCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_AddMoney(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool IsPlaySE, bool IsReflectGameData, bool* NotUse);
	void BPI_AddTotal(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_AddCost(int32 InNumber, bool IsPlayAnimation, float InDelayBeforeAnim, bool* NotUse);
	void BPI_SkipNumberAnim_Money(bool* NotUse);
	void BPI_SkipNumberAnim_Total(bool* NotUse);
	void BPI_SkipNumberAnim_Cost(bool* NotUse);
	void BPI_IsPlayingNumberAnim_Money(bool* IsPlaying);
	void BPI_IsPlayingNumberAnim_Total(bool* IsPlaying);
	void BPI_IsPlayingNumberAnim_Cost(bool* IsPlaying);
	void BPI_GetAnimState_Money(E_MakkaWindowAnimState* AnimState);
	void BPI_GetAnimState_Total(E_MakkaWindowAnimState* AnimState);
	void BPI_GetAnimState_Cost(E_MakkaWindowAnimState* AnimState);
	void BPI_SetCostColor(const struct FLinearColor& InColor, bool* NotUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_MakkaWindowCtrl2_C">();
	}
	static class IBPI_MakkaWindowCtrl2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_MakkaWindowCtrl2_C>();
	}
};
static_assert(alignof(IBPI_MakkaWindowCtrl2_C) == 0x000008, "Wrong alignment on IBPI_MakkaWindowCtrl2_C");
static_assert(sizeof(IBPI_MakkaWindowCtrl2_C) == 0x000028, "Wrong size on IBPI_MakkaWindowCtrl2_C");

}

