#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MapMakkaWinCtrl

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_OpenMapMakkaWin
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin final
{
public:
	int32                                         PrevMakka;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMakka;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin) == 0x000004, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin) == 0x000008, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin, PrevMakka) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin::PrevMakka' has a wrong offset!");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin, AddMakka) == 0x000004, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMakkaWin::AddMakka' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_SetPrevMakka_MakkaWindow
// 0x0004 (0x0004 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow final
{
public:
	int32                                         PrevMakka;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow) == 0x000004, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow) == 0x000004, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow, PrevMakka) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_SetPrevMakka_MakkaWindow::PrevMakka' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_SetLock_MapMakkaWin
// 0x0002 (0x0002 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnAreaName;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin) == 0x000002, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin, Lock) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin::Lock' has a wrong offset!");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin, ReturnAreaName) == 0x000001, "Member 'BPI_MapMakkaWinCtrl_C_BPI_SetLock_MapMakkaWin::ReturnAreaName' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_OpenMapMiitsuWin
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin final
{
public:
	int32                                         PrevMiitsu;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMiitsu;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin) == 0x000004, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin) == 0x000008, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin, PrevMiitsu) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin, AddMiitsu) == 0x000004, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin::AddMiitsu' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_SetPrevMiitsu_MiitsuWindow
// 0x0004 (0x0004 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow final
{
public:
	int32                                         PrevMiitsu;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow) == 0x000004, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow) == 0x000004, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow, PrevMiitsu) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_SetPrevMiitsu_MiitsuWindow::PrevMiitsu' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_CheckActive
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_CheckActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_CheckActive");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive) == 0x000001, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_CheckActive");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive, Active) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_CheckActive::Active' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_OpenMapMiitsuWin_ManualNext
// 0x0008 (0x0008 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext final
{
public:
	int32                                         PrevMiitsu;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddMiitsu;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext) == 0x000004, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext) == 0x000008, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext, PrevMiitsu) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext::PrevMiitsu' has a wrong offset!");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext, AddMiitsu) == 0x000004, "Member 'BPI_MapMakkaWinCtrl_C_BPI_OpenMapMiitsuWin_ManualNext::AddMiitsu' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_NextMapMiitsuWin
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin) == 0x000001, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin, Success) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_NextMapMiitsuWin::Success' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_CheckNext_MapMiitsuWin
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin final
{
public:
	bool                                          Next;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin) == 0x000001, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin, Next) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MapMiitsuWin::Next' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_CheckActive_Miitsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu) == 0x000001, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu, Active) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_CheckActive_Miitsu::Active' has a wrong offset!");

// Function BPI_MapMakkaWinCtrl.BPI_MapMakkaWinCtrl_C.BPI_CheckNext_MimanMiitsu
// 0x0001 (0x0001 - 0x0000)
struct BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu final
{
public:
	bool                                          Next;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu) == 0x000001, "Wrong alignment on BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu");
static_assert(sizeof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu) == 0x000001, "Wrong size on BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu");
static_assert(offsetof(BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu, Next) == 0x000000, "Member 'BPI_MapMakkaWinCtrl_C_BPI_CheckNext_MimanMiitsu::Next' has a wrong offset!");

}

