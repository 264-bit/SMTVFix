#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialAnimCoreComponent

#include "Basic.hpp"

#include "MaterialAnimCoreComponent_classes.hpp"
#include "MaterialAnimCoreComponent_parameters.hpp"


namespace SDK
{

// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.OnFinishDitherRate__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_ACTION_TYPE                     CharaAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::OnFinishDitherRate__DelegateSignature(E_CHARA_ACTION_TYPE CharaAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "OnFinishDitherRate__DelegateSignature");

	Params::MaterialAnimCoreComponent_C_OnFinishDitherRate__DelegateSignature Parms{};

	Parms.CharaAction = CharaAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.ExecuteUbergraph_MaterialAnimCoreComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::ExecuteUbergraph_MaterialAnimCoreComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "ExecuteUbergraph_MaterialAnimCoreComponent");

	Params::MaterialAnimCoreComponent_C_ExecuteUbergraph_MaterialAnimCoreComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "ReceiveTick");

	Params::MaterialAnimCoreComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UMaterialAnimCoreComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.CreateMeshMID
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   MeshComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::CreateMeshMID(class UMeshComponent* MeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "CreateMeshMID");

	Params::MaterialAnimCoreComponent_C_CreateMeshMID Parms{};

	Parms.MeshComp = MeshComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.ApplyInitialize
// (Private, BlueprintCallable, BlueprintEvent)

void UMaterialAnimCoreComponent_C::ApplyInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "ApplyInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_GetAllMID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Mid                                                    (Parm, OutParm)

void UMaterialAnimCoreComponent_C::BI_GetAllMID(TArray<class UMaterialInstanceDynamic*>* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_GetAllMID");

	Params::MaterialAnimCoreComponent_C_BI_GetAllMID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mid != nullptr)
		*Mid = std::move(Parms.Mid);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetScalarParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamNames                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Val                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetScalarParam(const TArray<class FName>& ParamNames, const float Val, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetScalarParam");

	Params::MaterialAnimCoreComponent_C_BI_SetScalarParam Parms{};

	Parms.ParamNames = std::move(ParamNames);
	Parms.Val = Val;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_IsDitherEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_IsDitherEnable(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_IsDitherEnable");

	Params::MaterialAnimCoreComponent_C_BI_IsDitherEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_ResetScalarParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamNmaes                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_ResetScalarParam(const TArray<class FName>& ParamNmaes, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_ResetScalarParam");

	Params::MaterialAnimCoreComponent_C_BI_ResetScalarParam Parms{};

	Parms.ParamNmaes = std::move(ParamNmaes);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetVectorParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamNames                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FLinearColor                     Val                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetVectorParam(const TArray<class FName>& ParamNames, const struct FLinearColor& Val, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetVectorParam");

	Params::MaterialAnimCoreComponent_C_BI_SetVectorParam Parms{};

	Parms.ParamNames = std::move(ParamNames);
	Parms.Val = std::move(Val);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetScalarParamByArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Materials                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     ParamNames                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Val                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetScalarParamByArray(const TArray<class UMaterialInstanceDynamic*>& Materials, const TArray<class FName>& ParamNames, const float Val, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetScalarParamByArray");

	Params::MaterialAnimCoreComponent_C_BI_SetScalarParamByArray Parms{};

	Parms.Materials = std::move(Materials);
	Parms.ParamNames = std::move(ParamNames);
	Parms.Val = Val;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetVectorParamByArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Materials                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     ParamNames                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FLinearColor                     Val                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetVectorParamByArray(const TArray<class UMaterialInstanceDynamic*>& Materials, const TArray<class FName>& ParamNames, const struct FLinearColor& Val, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetVectorParamByArray");

	Params::MaterialAnimCoreComponent_C_BI_SetVectorParamByArray Parms{};

	Parms.Materials = std::move(Materials);
	Parms.ParamNames = std::move(ParamNames);
	Parms.Val = std::move(Val);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_OutLineSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_OutLineSwitch(bool Value, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_OutLineSwitch");

	Params::MaterialAnimCoreComponent_C_BI_OutLineSwitch Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SelectFresnelSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SelectFresnelSwitch(bool Value, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SelectFresnelSwitch");

	Params::MaterialAnimCoreComponent_C_BI_SelectFresnelSwitch Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SelectSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SelectSwitch(const bool Value, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SelectSwitch");

	Params::MaterialAnimCoreComponent_C_BI_SelectSwitch Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetDitherEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetDitherEnable(bool IsEnable, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetDitherEnable");

	Params::MaterialAnimCoreComponent_C_BI_SetDitherEnable Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetDitherDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetDitherDistance(float Distance, float InterpSec, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetDitherDistance");

	Params::MaterialAnimCoreComponent_C_BI_SetDitherDistance Parms{};

	Parms.Distance = Distance;
	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_ResetDitherDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_ResetDitherDistance(float InterpSec, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_ResetDitherDistance");

	Params::MaterialAnimCoreComponent_C_BI_ResetDitherDistance Parms{};

	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_UpdateDither
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentDitherRate                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::BI_UpdateDither(float DeltaTime, float* CurrentDitherRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_UpdateDither");

	Params::MaterialAnimCoreComponent_C_BI_UpdateDither Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentDitherRate != nullptr)
		*CurrentDitherRate = Parms.CurrentDitherRate;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_SetDitherRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_SetDitherRate(float Rate, float InterpSec, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_SetDitherRate");

	Params::MaterialAnimCoreComponent_C_BI_SetDitherRate Parms{};

	Parms.Rate = Rate;
	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_ResetDitherRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_ResetDitherRate(float InterpSec, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_ResetDitherRate");

	Params::MaterialAnimCoreComponent_C_BI_ResetDitherRate Parms{};

	Parms.InterpSec = InterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_ToggleDitherEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_ToggleDitherEnable(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_ToggleDitherEnable");

	Params::MaterialAnimCoreComponent_C_BI_ToggleDitherEnable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_RetrieveMIDs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           ElementNo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UMaterialInstanceDynamic*> Materials                                              (Parm, OutParm)

void UMaterialAnimCoreComponent_C::BI_RetrieveMIDs(const TArray<int32>& ElementNo, TArray<class UMaterialInstanceDynamic*>* Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_RetrieveMIDs");

	Params::MaterialAnimCoreComponent_C_BI_RetrieveMIDs Parms{};

	Parms.ElementNo = std::move(ElementNo);

	UObject::ProcessEvent(Func, &Parms);

	if (Materials != nullptr)
		*Materials = std::move(Parms.Materials);
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_CalcMaterialAnimSettingSec
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSettings                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Sec                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::BI_CalcMaterialAnimSettingSec(const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, float* Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_CalcMaterialAnimSettingSec");

	Params::MaterialAnimCoreComponent_C_BI_CalcMaterialAnimSettingSec Parms{};

	Parms.MaterialAnimSettings = std::move(MaterialAnimSettings);

	UObject::ProcessEvent(Func, &Parms);

	if (Sec != nullptr)
		*Sec = Parms.Sec;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_InitializeMaterial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_InitializeMaterial(class UMeshComponent* Mesh, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_InitializeMaterial");

	Params::MaterialAnimCoreComponent_C_BI_InitializeMaterial Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_GetDitherRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DitherRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::BI_GetDitherRate(float* DitherRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_GetDitherRate");

	Params::MaterialAnimCoreComponent_C_BI_GetDitherRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DitherRate != nullptr)
		*DitherRate = Parms.DitherRate;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_GetDitherDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DitherDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMaterialAnimCoreComponent_C::BI_GetDitherDistance(float* DitherDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_GetDitherDistance");

	Params::MaterialAnimCoreComponent_C_BI_GetDitherDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DitherDistance != nullptr)
		*DitherDistance = Parms.DitherDistance;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_MultiMeshInitializeMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>           Meshes                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_MultiMeshInitializeMaterial(const TArray<class UMeshComponent*>& Meshes, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_MultiMeshInitializeMaterial");

	Params::MaterialAnimCoreComponent_C_BI_MultiMeshInitializeMaterial Parms{};

	Parms.Meshes = std::move(Meshes);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_ResetAllParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_ResetAllParam(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_ResetAllParam");

	Params::MaterialAnimCoreComponent_C_BI_ResetAllParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function MaterialAnimCoreComponent.MaterialAnimCoreComponent_C.BI_AddMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   MeshComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMaterialAnimCoreComponent_C::BI_AddMaterial(class UMeshComponent* MeshComponent, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialAnimCoreComponent_C", "BI_AddMaterial");

	Params::MaterialAnimCoreComponent_C_BI_AddMaterial Parms{};

	Parms.MeshComponent = MeshComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

