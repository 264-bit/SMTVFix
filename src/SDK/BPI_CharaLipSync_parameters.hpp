#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaLipSync

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_CharaLipSync.BPI_CharaLipSync_C.PlayLipSync
// 0x0010 (0x0010 - 0x0000)
struct BPI_CharaLipSync_C_PlayLipSync final
{
public:
	class UCharaLipSync*                          Param_PlayLipSync;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaLipSync_C_PlayLipSync) == 0x000008, "Wrong alignment on BPI_CharaLipSync_C_PlayLipSync");
static_assert(sizeof(BPI_CharaLipSync_C_PlayLipSync) == 0x000010, "Wrong size on BPI_CharaLipSync_C_PlayLipSync");
static_assert(offsetof(BPI_CharaLipSync_C_PlayLipSync, Param_PlayLipSync) == 0x000000, "Member 'BPI_CharaLipSync_C_PlayLipSync::Param_PlayLipSync' has a wrong offset!");
static_assert(offsetof(BPI_CharaLipSync_C_PlayLipSync, IsLoop) == 0x000008, "Member 'BPI_CharaLipSync_C_PlayLipSync::IsLoop' has a wrong offset!");

// Function BPI_CharaLipSync.BPI_CharaLipSync_C.BI_SetNPCCollision
// 0x0001 (0x0001 - 0x0000)
struct BPI_CharaLipSync_C_BI_SetNPCCollision final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CharaLipSync_C_BI_SetNPCCollision) == 0x000001, "Wrong alignment on BPI_CharaLipSync_C_BI_SetNPCCollision");
static_assert(sizeof(BPI_CharaLipSync_C_BI_SetNPCCollision) == 0x000001, "Wrong size on BPI_CharaLipSync_C_BI_SetNPCCollision");
static_assert(offsetof(BPI_CharaLipSync_C_BI_SetNPCCollision, Ret) == 0x000000, "Member 'BPI_CharaLipSync_C_BI_SetNPCCollision::Ret' has a wrong offset!");

// Function BPI_CharaLipSync.BPI_CharaLipSync_C.BI_SetHeadIKSpeed
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaLipSync_C_BI_SetHeadIKSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaLipSync_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong alignment on BPI_CharaLipSync_C_BI_SetHeadIKSpeed");
static_assert(sizeof(BPI_CharaLipSync_C_BI_SetHeadIKSpeed) == 0x000004, "Wrong size on BPI_CharaLipSync_C_BI_SetHeadIKSpeed");
static_assert(offsetof(BPI_CharaLipSync_C_BI_SetHeadIKSpeed, Speed) == 0x000000, "Member 'BPI_CharaLipSync_C_BI_SetHeadIKSpeed::Speed' has a wrong offset!");

// Function BPI_CharaLipSync.BPI_CharaLipSync_C.BI_SetLipClearDelay
// 0x0004 (0x0004 - 0x0000)
struct BPI_CharaLipSync_C_BI_SetLipClearDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CharaLipSync_C_BI_SetLipClearDelay) == 0x000004, "Wrong alignment on BPI_CharaLipSync_C_BI_SetLipClearDelay");
static_assert(sizeof(BPI_CharaLipSync_C_BI_SetLipClearDelay) == 0x000004, "Wrong size on BPI_CharaLipSync_C_BI_SetLipClearDelay");
static_assert(offsetof(BPI_CharaLipSync_C_BI_SetLipClearDelay, Delay) == 0x000000, "Member 'BPI_CharaLipSync_C_BI_SetLipClearDelay::Delay' has a wrong offset!");

}

