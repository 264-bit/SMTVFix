#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleParticleManager

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleParticleManager.BPI_BattleParticleManager_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleParticleManager_C final : public IInterface
{
public:
	void BIAddParticle(class UObject* ParticleObject, const struct FTransform& SpawnTransform, const struct FTransform& RelativeTransform, int32 TranslucencyPriority, const struct FSkillEffectPairSetting& PairSetting, class AActor* TargetActor, const class FString& AttachSocketName, bool AllowPositionUpdate, class USkeletalMesh* ModSkeltal, class UAnimSequenceBase* ModAnim, class FName ModSocketName, class FString* HashID, bool* IsValid);
	void BIIsAlive(const class FString& HashID, bool* IsAlive);
	void BISetBeamParameter(const class FString& HashID, int32 Target, int32 Source, bool* IsValid);
	void BISetProjectileParameter(const class FString& HashID, int32 Target, int32 Source, float Speed, float Tangent, bool* IsValid);
	void BIAddParticle2(TScriptInterface<class IBPI_BattleParty_C> IPartySystem, class UObject* ParticleObject, const struct FBtlTaskDesc& Desc, class FString* HashID, bool* IsValid);
	void BIResetTransrateCache(bool* NoUse);
	void BISetDecalParameter(const class FString& HashID, class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotRandMin, float RotRandMax, const struct FVector& Size, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, bool* IsValid);
	void BI_DestroyAll(bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleParticleManager_C">();
	}
	static class IBPI_BattleParticleManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleParticleManager_C>();
	}
};
static_assert(alignof(IBPI_BattleParticleManager_C) == 0x000008, "Wrong alignment on IBPI_BattleParticleManager_C");
static_assert(sizeof(IBPI_BattleParticleManager_C) == 0x000028, "Wrong size on IBPI_BattleParticleManager_C");

}

