#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharaBaseAccessor

#include "Basic.hpp"

#include "BPI_CharaBaseAccessor_classes.hpp"
#include "BPI_CharaBaseAccessor_parameters.hpp"


namespace SDK
{

// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   MeshComp                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetMeshComponent(class UMeshComponent** MeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetMeshComponent");

	Params::BPI_CharaBaseAccessor_C_BI_GetMeshComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComp != nullptr)
		*MeshComp = Parms.MeshComp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetPlayRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetPlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetPlayRate");

	Params::BPI_CharaBaseAccessor_C_BI_GetPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetEffectScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   EffectScale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetEffectScale(float* EffectScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetEffectScale");

	Params::BPI_CharaBaseAccessor_C_BI_GetEffectScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EffectScale != nullptr)
		*EffectScale = Parms.EffectScale;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCharaParamComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharaParamComponent*             Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetCharaParamComponent(class UCharaParamComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetCharaParamComponent");

	Params::BPI_CharaBaseAccessor_C_BI_GetCharaParamComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCapsuleComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCapsuleComponent*                Param                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetCapsuleComponent(class UCapsuleComponent** Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetCapsuleComponent");

	Params::BPI_CharaBaseAccessor_C_BI_GetCapsuleComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param != nullptr)
		*Param = Parms.Param;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetActorRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetActorRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetActorRotation");

	Params::BPI_CharaBaseAccessor_C_BI_GetActorRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetScalarParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     ParamNames                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUs                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ResetScalarParam(TArray<class FName>& ParamNames, bool* NoUs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ResetScalarParam");

	Params::BPI_CharaBaseAccessor_C_BI_ResetScalarParam Parms{};

	Parms.ParamNames = std::move(ParamNames);

	UObject::ProcessEvent(Func, &Parms);

	ParamNames = std::move(Parms.ParamNames);

	if (NoUs != nullptr)
		*NoUs = Parms.NoUs;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BadStatusMaterialOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_BAD_STATUS>                    OnBadStatus                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_BadStatusMaterialOn(TArray<E_BAD_STATUS>& OnBadStatus, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_BadStatusMaterialOn");

	Params::BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOn Parms{};

	Parms.OnBadStatus = std::move(OnBadStatus);

	UObject::ProcessEvent(Func, &Parms);

	OnBadStatus = std::move(Parms.OnBadStatus);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BadStatusMaterialOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_BAD_STATUS>                    OffBadStatus                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_BadStatusMaterialOff(const TArray<E_BAD_STATUS>& OffBadStatus, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_BadStatusMaterialOff");

	Params::BPI_CharaBaseAccessor_C_BI_BadStatusMaterialOff Parms{};

	Parms.OffBadStatus = std::move(OffBadStatus);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EvtResetEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_EvtResetEffect(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_EvtResetEffect");

	Params::BPI_CharaBaseAccessor_C_BI_EvtResetEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EvtResetBadStatusMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_EvtResetBadStatusMaterial(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_EvtResetBadStatusMaterial");

	Params::BPI_CharaBaseAccessor_C_BI_EvtResetBadStatusMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetActionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_ACTION_TYPE                     InAction                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetActionState(const E_CHARA_ACTION_TYPE InAction, uint8 State, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetActionState");

	Params::BPI_CharaBaseAccessor_C_BI_SetActionState Parms{};

	Parms.InAction = InAction;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateBadStatusPSComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystemComponent*         PSComp                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_CreateBadStatusPSComp(class UParticleSystemComponent** PSComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CreateBadStatusPSComp");

	Params::BPI_CharaBaseAccessor_C_BI_CreateBadStatusPSComp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PSComp != nullptr)
		*PSComp = Parms.PSComp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ResetState(int32 State, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ResetState");

	Params::BPI_CharaBaseAccessor_C_BI_ResetState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyApplyHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_ANIM_NOTIFY_APPLY_HIT_TYPE            NotifyType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifyApplyHit(bool IsNotified, E_ANIM_NOTIFY_APPLY_HIT_TYPE NotifyType, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifyApplyHit");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifyApplyHit Parms{};

	Parms.IsNotified = IsNotified;
	Parms.NotifyType = NotifyType;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvalidIKEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_InvalidIKEnd(class FName Param_Name, int32 Param_Index, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_InvalidIKEnd");

	Params::BPI_CharaBaseAccessor_C_BI_InvalidIKEnd Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SpawnMaterialAnimDecalAttached
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstance*                DecalMaterial                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSettings                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMaterialAnimDecalComponent_C*    Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_SpawnMaterialAnimDecalAttached(const class UMaterialInstance*& DecalMaterial, const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, class UMaterialAnimDecalComponent_C** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SpawnMaterialAnimDecalAttached");

	Params::BPI_CharaBaseAccessor_C_BI_SpawnMaterialAnimDecalAttached Parms{};

	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSettings = std::move(MaterialAnimSettings);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAlreadyChangeEnableDecal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChanged                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetAlreadyChangeEnableDecal(class FName Key, bool* IsChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetAlreadyChangeEnableDecal");

	Params::BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableDecal Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (IsChanged != nullptr)
		*IsChanged = Parms.IsChanged;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAlreadyChangeEnableDecal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetAlreadyChangeEnableDecal(class FName Key, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetAlreadyChangeEnableDecal");

	Params::BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableDecal Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAlreadyChangeEnableEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsChanged                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetAlreadyChangeEnableEffect(class FName Key, bool* IsChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetAlreadyChangeEnableEffect");

	Params::BPI_CharaBaseAccessor_C_BI_GetAlreadyChangeEnableEffect Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (IsChanged != nullptr)
		*IsChanged = Parms.IsChanged;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAlreadyChangeEnableEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetAlreadyChangeEnableEffect(class FName Key, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetAlreadyChangeEnableEffect");

	Params::BPI_CharaBaseAccessor_C_BI_SetAlreadyChangeEnableEffect Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseBlendTimeOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTimeOverride                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PlayMotion(E_CHARA_MOTION_ID MotionID, bool IsUseDuration, float Duration, bool IsUseBlendTimeOverride, float BlendTimeOverride, float StartOffsetTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_PlayMotion Parms{};

	Parms.MotionID = MotionID;
	Parms.IsUseDuration = IsUseDuration;
	Parms.Duration = Duration;
	Parms.IsUseBlendTimeOverride = IsUseBlendTimeOverride;
	Parms.BlendTimeOverride = BlendTimeOverride;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyDeadTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifyDeadTiming(bool IsNotified, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifyDeadTiming");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifyDeadTiming Parms{};

	Parms.IsNotified = IsNotified;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InstantMaterialAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MATERIAL_ANIMATION_SLOT         Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ElementNo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSettings                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsForward                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOnlyFirstTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_InstantMaterialAnimation(E_CHARA_MATERIAL_ANIMATION_SLOT Slot, const TArray<int32>& ElementNo, const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, bool IsForward, bool IsOnlyFirstTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_InstantMaterialAnimation");

	Params::BPI_CharaBaseAccessor_C_BI_InstantMaterialAnimation Parms{};

	Parms.Slot = Slot;
	Parms.ElementNo = std::move(ElementNo);
	Parms.MaterialAnimSettings = std::move(MaterialAnimSettings);
	Parms.IsForward = IsForward;
	Parms.IsOnlyFirstTime = IsOnlyFirstTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AttachClockingParticleSystem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AutoDestroy                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_AttachClockingParticleSystem(const class UParticleSystem*& EmitterTemplate, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, uint8 LocationType, const bool IsCastShadow, const bool AutoDestroy, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_AttachClockingParticleSystem");

	Params::BPI_CharaBaseAccessor_C_BI_AttachClockingParticleSystem Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.LocationType = LocationType;
	Parms.IsCastShadow = IsCastShadow;
	Parms.AutoDestroy = AutoDestroy;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifySkillFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifySkillFire(bool IsNotified, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifySkillFire");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifySkillFire Parms{};

	Parms.IsNotified = IsNotified;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyWarpTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifyWarpTiming(bool IsNotified, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifyWarpTiming");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifyWarpTiming Parms{};

	Parms.IsNotified = IsNotified;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PerchEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PerchEnd(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PerchEnd");

	Params::BPI_CharaBaseAccessor_C_BI_PerchEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PerchBegin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PerchBegin(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PerchBegin");

	Params::BPI_CharaBaseAccessor_C_BI_PerchBegin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_WatchOnesStepEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_WatchOnesStepEnd(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_WatchOnesStepEnd");

	Params::BPI_CharaBaseAccessor_C_BI_WatchOnesStepEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_WatchOnesStepBegin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_WatchOnesStepBegin(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_WatchOnesStepBegin");

	Params::BPI_CharaBaseAccessor_C_BI_WatchOnesStepBegin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvalidIKBegin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_InvalidIKBegin(class FName Param_Name, int32 Param_Index, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_InvalidIKBegin");

	Params::BPI_CharaBaseAccessor_C_BI_InvalidIKBegin Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetParticleTemplate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystemComponent*         TargetParticleSys                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Template                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetParticleTemplate(const class UParticleSystemComponent*& TargetParticleSys, class UParticleSystem* Template, float Scale, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetParticleTemplate");

	Params::BPI_CharaBaseAccessor_C_BI_SetParticleTemplate Parms{};

	Parms.TargetParticleSys = TargetParticleSys;
	Parms.Template = Template;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetCurrentSurfaceStatusMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_BAD_STATUS>                    CurrentSurface                                         (Parm, OutParm)

void IBPI_CharaBaseAccessor_C::BI_GetCurrentSurfaceStatusMaterial(TArray<E_BAD_STATUS>* CurrentSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetCurrentSurfaceStatusMaterial");

	Params::BPI_CharaBaseAccessor_C_BI_GetCurrentSurfaceStatusMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentSurface != nullptr)
		*CurrentSurface = std::move(Parms.CurrentSurface);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetActionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_ACTION_TYPE                     InAction                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetActionState(E_CHARA_ACTION_TYPE InAction, uint8* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetActionState");

	Params::BPI_CharaBaseAccessor_C_BI_GetActionState Parms{};

	Parms.InAction = InAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EventPlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_EventPlayMotion(class UAnimSequenceBase* Animation, bool Loop, float BlendTime, float StartOffsetTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_EventPlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_EventPlayMotion Parms{};

	Parms.Animation = Animation;
	Parms.Loop = Loop;
	Parms.BlendTime = BlendTime;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetCompletelyDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetCompletelyDead(bool IsDead, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetCompletelyDead");

	Params::BPI_CharaBaseAccessor_C_BI_SetCompletelyDead Parms{};

	Parms.IsDead = IsDead;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAllVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetAllVisibility(bool IsVisible, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetAllVisibility");

	Params::BPI_CharaBaseAccessor_C_BI_SetAllVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InitializeMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_InitializeMaterial(bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_InitializeMaterial");

	Params::BPI_CharaBaseAccessor_C_BI_InitializeMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CommonEffectOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_CommonEffectOff(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CommonEffectOff");

	Params::BPI_CharaBaseAccessor_C_BI_CommonEffectOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PauseMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PauseMotion(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PauseMotion");

	Params::BPI_CharaBaseAccessor_C_BI_PauseMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_UpdateSurfaceBadStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentStatus                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_UpdateSurfaceBadStatus(int32 CurrentStatus, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_UpdateSurfaceBadStatus");

	Params::BPI_CharaBaseAccessor_C_BI_UpdateSurfaceBadStatus Parms{};

	Parms.CurrentStatus = CurrentStatus;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetScalarParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Param_Names                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetScalarParam(const TArray<class FName>& Param_Names, float Value, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetScalarParam");

	Params::BPI_CharaBaseAccessor_C_BI_SetScalarParam Parms{};

	Parms.Param_Names = std::move(Param_Names);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetScalarParamByArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> Material                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     Param_Names                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetScalarParamByArray(const TArray<class UMaterialInstanceDynamic*>& Material, const TArray<class FName>& Param_Names, const float Value, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetScalarParamByArray");

	Params::BPI_CharaBaseAccessor_C_BI_SetScalarParamByArray Parms{};

	Parms.Material = std::move(Material);
	Parms.Param_Names = std::move(Param_Names);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSocketTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RetVal                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetSocketTransform(class FName SocketName, struct FTransform* RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetSocketTransform");

	Params::BPI_CharaBaseAccessor_C_BI_GetSocketTransform Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (RetVal != nullptr)
		*RetVal = std::move(Parms.RetVal);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsNotifyDeadTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IsNotifyDeadTiming(bool* IsNotified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IsNotifyDeadTiming");

	Params::BPI_CharaBaseAccessor_C_BI_IsNotifyDeadTiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotified != nullptr)
		*IsNotified = Parms.IsNotified;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshRelativeScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetMeshRelativeScale(float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetMeshRelativeScale");

	Params::BPI_CharaBaseAccessor_C_BI_GetMeshRelativeScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetMeshRelativeScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewBoundsScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetMeshRelativeScale(float NewScale, float NewBoundsScale, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetMeshRelativeScale");

	Params::BPI_CharaBaseAccessor_C_BI_SetMeshRelativeScale Parms{};

	Parms.NewScale = NewScale;
	Parms.NewBoundsScale = NewBoundsScale;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetBadStatusEffectScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetBadStatusEffectScale(float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetBadStatusEffectScale");

	Params::BPI_CharaBaseAccessor_C_BI_GetBadStatusEffectScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyRapidReturnTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifyRapidReturnTiming(bool IsNotified, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifyRapidReturnTiming");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifyRapidReturnTiming Parms{};

	Parms.IsNotified = IsNotified;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsNotifyRapidReturnTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotified                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IsNotifyRapidReturnTiming(bool* IsNotified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IsNotifyRapidReturnTiming");

	Params::BPI_CharaBaseAccessor_C_BI_IsNotifyRapidReturnTiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotified != nullptr)
		*IsNotified = Parms.IsNotified;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ApplyMaterialParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialParameterApplier*        ParamApplier                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ApplyMaterialParam(class UMaterialParameterApplier* ParamApplier, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ApplyMaterialParam");

	Params::BPI_CharaBaseAccessor_C_BI_ApplyMaterialParam Parms{};

	Parms.ParamApplier = ParamApplier;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetTimeLineComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_DEAD_EFFECT                       DeadEffect                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTimelineComponent*               Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetTimeLineComponent(E_BTL_DEAD_EFFECT DeadEffect, class UTimelineComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetTimeLineComponent");

	Params::BPI_CharaBaseAccessor_C_BI_GetTimeLineComponent Parms{};

	Parms.DeadEffect = DeadEffect;

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVectorParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Param_Names                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FLinearColor                     Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetVectorParam(TArray<class FName>& Param_Names, const struct FLinearColor& Vector, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetVectorParam");

	Params::BPI_CharaBaseAccessor_C_BI_SetVectorParam Parms{};

	Parms.Param_Names = std::move(Param_Names);
	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	Param_Names = std::move(Parms.Param_Names);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_LookAt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_LookAt(class USceneComponent* Point, class FName Socket, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_LookAt");

	Params::BPI_CharaBaseAccessor_C_BI_LookAt Parms{};

	Parms.Point = Point;
	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkeletalMeshComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USkeletalMeshComponent*>   Meshes                                                 (Parm, OutParm, ContainsInstancedReference)

void IBPI_CharaBaseAccessor_C::BI_GetSkeletalMeshComponents(TArray<class USkeletalMeshComponent*>* Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetSkeletalMeshComponents");

	Params::BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Meshes != nullptr)
		*Meshes = std::move(Parms.Meshes);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetNotifyDeadVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Voice                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetNotifyDeadVoice(class USoundAtomCue* Voice, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetNotifyDeadVoice");

	Params::BPI_CharaBaseAccessor_C_BI_SetNotifyDeadVoice Parms{};

	Parms.Voice = Voice;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetNotifyDeadVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Voice                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetNotifyDeadVoice(class USoundAtomCue** Voice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetNotifyDeadVoice");

	Params::BPI_CharaBaseAccessor_C_BI_GetNotifyDeadVoice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Voice != nullptr)
		*Voice = Parms.Voice;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_RetrieveMotionNotifyNames
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Names                                                  (Parm, OutParm)

void IBPI_CharaBaseAccessor_C::BI_RetrieveMotionNotifyNames(E_CHARA_MOTION_ID Motion, TArray<class FString>* Names)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_RetrieveMotionNotifyNames");

	Params::BPI_CharaBaseAccessor_C_BI_RetrieveMotionNotifyNames Parms{};

	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);

	if (Names != nullptr)
		*Names = std::move(Parms.Names);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CalcBattleCameraScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_CalcBattleCameraScale(float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CalcBattleCameraScale");

	Params::BPI_CharaBaseAccessor_C_BI_CalcBattleCameraScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayStartEffect
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharaBaseAccessor_C::BI_PlayStartEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PlayStartEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMeshComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>           Meshes                                                 (Parm, OutParm, ContainsInstancedReference)

void IBPI_CharaBaseAccessor_C::BI_GetMeshComponents(TArray<class UMeshComponent*>* Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetMeshComponents");

	Params::BPI_CharaBaseAccessor_C_BI_GetMeshComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Meshes != nullptr)
		*Meshes = std::move(Parms.Meshes);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayDefaultBlink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PlayDefaultBlink(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PlayDefaultBlink");

	Params::BPI_CharaBaseAccessor_C_BI_PlayDefaultBlink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopDefaultBlink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_StopDefaultBlink(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_StopDefaultBlink");

	Params::BPI_CharaBaseAccessor_C_BI_StopDefaultBlink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StackPlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_StackPlayMotion(class UAnimSequenceBase* Animation, bool Loop, float BlendTime, float StartOffsetTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_StackPlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_StackPlayMotion Parms{};

	Parms.Animation = Animation;
	Parms.Loop = Loop;
	Parms.BlendTime = BlendTime;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetAllParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ResetAllParam(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ResetAllParam");

	Params::BPI_CharaBaseAccessor_C_BI_ResetAllParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_StopMotion(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_StopMotion");

	Params::BPI_CharaBaseAccessor_C_BI_StopMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetMotionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharaMotionPlayerComponent*      MotionComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetMotionComponent(class UCharaMotionPlayerComponent** MotionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetMotionComponent");

	Params::BPI_CharaBaseAccessor_C_BI_GetMotionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MotionComponent != nullptr)
		*MotionComponent = Parms.MotionComponent;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetEnableChangeMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetEnableChangeMotion(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetEnableChangeMotion");

	Params::BPI_CharaBaseAccessor_C_BI_GetEnableChangeMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetEnableChangeMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetEnableChangeMotion(bool Enable, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetEnableChangeMotion");

	Params::BPI_CharaBaseAccessor_C_BI_SetEnableChangeMotion Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetSkillPerformDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTrue                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetSkillPerformDuration(bool IsTrue, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetSkillPerformDuration");

	Params::BPI_CharaBaseAccessor_C_BI_SetSkillPerformDuration Parms{};

	Parms.IsTrue = IsTrue;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkillPerformDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTrue                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetSkillPerformDuration(bool* IsTrue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetSkillPerformDuration");

	Params::BPI_CharaBaseAccessor_C_BI_GetSkillPerformDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTrue != nullptr)
		*IsTrue = Parms.IsTrue;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetPlayBlink
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetPlayBlink(bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetPlayBlink");

	Params::BPI_CharaBaseAccessor_C_BI_GetPlayBlink Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_PlayBlinkToNotify
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_PlayBlinkToNotify(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_PlayBlinkToNotify");

	Params::BPI_CharaBaseAccessor_C_BI_PlayBlinkToNotify Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopBlinkToNotify
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_StopBlinkToNotify(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_StopBlinkToNotify");

	Params::BPI_CharaBaseAccessor_C_BI_StopBlinkToNotify Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TYPE                            Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetVoiceSkillType(E_SKILL_TYPE Type, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetVoiceSkillType");

	Params::BPI_CharaBaseAccessor_C_BI_SetVoiceSkillType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TYPE                            Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetVoiceSkillType(E_SKILL_TYPE* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetVoiceSkillType");

	Params::BPI_CharaBaseAccessor_C_BI_GetVoiceSkillType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetElectrification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetElectrification(bool Enable, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetElectrification");

	Params::BPI_CharaBaseAccessor_C_BI_SetElectrification Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDitherEnable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetDitherEnable(bool Enable, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetDitherEnable");

	Params::BPI_CharaBaseAccessor_C_BI_SetDitherEnable Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDitherRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InRate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InInterpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetDitherRate(float InRate, float InInterpSec, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetDitherRate");

	Params::BPI_CharaBaseAccessor_C_BI_SetDitherRate Parms{};

	Parms.InRate = InRate;
	Parms.InInterpSec = InInterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ResetDitherRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InInterpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    No_Use                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ResetDitherRate(float InInterpSec, bool* No_Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ResetDitherRate");

	Params::BPI_CharaBaseAccessor_C_BI_ResetDitherRate Parms{};

	Parms.InInterpSec = InInterpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (No_Use != nullptr)
		*No_Use = Parms.No_Use;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillAttr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ATTRIBUTE_TYPE                        SkillAttr                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetVoiceSkillAttr(E_ATTRIBUTE_TYPE SkillAttr, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetVoiceSkillAttr");

	Params::BPI_CharaBaseAccessor_C_BI_SetVoiceSkillAttr Parms{};

	Parms.SkillAttr = SkillAttr;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillAttr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ATTRIBUTE_TYPE                        SkillAttr                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetVoiceSkillAttr(E_ATTRIBUTE_TYPE* SkillAttr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetVoiceSkillAttr");

	Params::BPI_CharaBaseAccessor_C_BI_GetVoiceSkillAttr Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillAttr != nullptr)
		*SkillAttr = Parms.SkillAttr;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsPlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IsPlayMotion(E_CHARA_MOTION_ID MotionID, bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IsPlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_IsPlayMotion Parms{};

	Parms.MotionID = MotionID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetFacial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Facial                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTimeOverride                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotUse                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetFacial(class FName Facial, float BlendTimeOverride, bool* NotUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetFacial");

	Params::BPI_CharaBaseAccessor_C_BI_SetFacial Parms{};

	Parms.Facial = Facial;
	Parms.BlendTimeOverride = BlendTimeOverride;

	UObject::ProcessEvent(Func, &Parms);

	if (NotUse != nullptr)
		*NotUse = Parms.NotUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetDefaultAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetDefaultAnimation(class UAnimSequenceBase** Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetDefaultAnimation");

	Params::BPI_CharaBaseAccessor_C_BI_GetDefaultAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetAnimInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetAnimInstance(class UAnimInstance** Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetAnimInstance");

	Params::BPI_CharaBaseAccessor_C_BI_GetAnimInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_InvokeLookAtIKImmediately
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IncludeEyeIK                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_InvokeLookAtIKImmediately(bool IncludeEyeIK, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_InvokeLookAtIKImmediately");

	Params::BPI_CharaBaseAccessor_C_BI_InvokeLookAtIKImmediately Parms{};

	Parms.IncludeEyeIK = IncludeEyeIK;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IKEnableFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_IK_TYPE_LIST                          Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IKEnableFlag(E_IK_TYPE_LIST Type, bool Enable, bool Immediately, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IKEnableFlag");

	Params::BPI_CharaBaseAccessor_C_BI_IKEnableFlag Parms{};

	Parms.Type = Type;
	Parms.Enable = Enable;
	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CalcEffectScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_CalcEffectScale(float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CalcEffectScale");

	Params::BPI_CharaBaseAccessor_C_BI_CalcEffectScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TARGET                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetVoiceSkillTarget(E_SKILL_TARGET Target, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetVoiceSkillTarget");

	Params::BPI_CharaBaseAccessor_C_BI_SetVoiceSkillTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SKILL_TARGET                          Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetVoiceSkillTarget(E_SKILL_TARGET* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetVoiceSkillTarget");

	Params::BPI_CharaBaseAccessor_C_BI_GetVoiceSkillTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetDefaultIdleMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       Motion                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetDefaultIdleMotion(E_CHARA_MOTION_ID* Motion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetDefaultIdleMotion");

	Params::BPI_CharaBaseAccessor_C_BI_GetDefaultIdleMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Motion != nullptr)
		*Motion = Parms.Motion;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDefaultIdleMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetDefaultIdleMotion(E_CHARA_MOTION_ID Motion, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetDefaultIdleMotion");

	Params::BPI_CharaBaseAccessor_C_BI_SetDefaultIdleMotion Parms{};

	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetEnableCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetEnableCollision(bool Enable, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetEnableCollision");

	Params::BPI_CharaBaseAccessor_C_BI_SetEnableCollision Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetCollisionObjectType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECollisionChannel                       Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetCollisionObjectType(ECollisionChannel Channel, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetCollisionObjectType");

	Params::BPI_CharaBaseAccessor_C_BI_SetCollisionObjectType Parms{};

	Parms.Channel = Channel;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsCharaShaking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Shaking                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IsCharaShaking(bool* Shaking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IsCharaShaking");

	Params::BPI_CharaBaseAccessor_C_BI_IsCharaShaking Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Shaking != nullptr)
		*Shaking = Parms.Shaking;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_StopCharaShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_StopCharaShake(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_StopCharaShake");

	Params::BPI_CharaBaseAccessor_C_BI_StopCharaShake Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetForceRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetForceRotate(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetForceRotate");

	Params::BPI_CharaBaseAccessor_C_BI_GetForceRotate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BattlePlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseBlendTimeOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   BlendTimeOverride                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_BattlePlayMotion(E_CHARA_MOTION_ID MotionID, bool IsUseDuration, float Duration, bool IsUseBlendTimeOverride, float BlendTimeOverride, float StartOffsetTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_BattlePlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_BattlePlayMotion Parms{};

	Parms.MotionID = MotionID;
	Parms.IsUseDuration = IsUseDuration;
	Parms.Duration = Duration;
	Parms.IsUseBlendTimeOverride = IsUseBlendTimeOverride;
	Parms.BlendTimeOverride = BlendTimeOverride;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_BattleStopMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_BattleStopMotion(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_BattleStopMotion");

	Params::BPI_CharaBaseAccessor_C_BI_BattleStopMotion Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_EnableSilhouette
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_EnableSilhouette(bool IsEnable, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_EnableSilhouette");

	Params::BPI_CharaBaseAccessor_C_BI_EnableSilhouette Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_IsSilhouetteEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_IsSilhouetteEnabled(bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_IsSilhouetteEnabled");

	Params::BPI_CharaBaseAccessor_C_BI_IsSilhouetteEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_FloatNoRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_FloatNoRotation(bool NoRotation, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_FloatNoRotation");

	Params::BPI_CharaBaseAccessor_C_BI_FloatNoRotation Parms{};

	Parms.NoRotation = NoRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetParentChara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_CharaBaseAccessor_C>Parent                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GetParentChara(TScriptInterface<class IBPI_CharaBaseAccessor_C>* Parent, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetParentChara");

	Params::BPI_CharaBaseAccessor_C_BI_GetParentChara Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Parent != nullptr)
		*Parent = Parms.Parent;

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetDevilRootMotion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetDevilRootMotion(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetDevilRootMotion");

	Params::BPI_CharaBaseAccessor_C_BI_SetDevilRootMotion Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AdjustMeshScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_AdjustMeshScale(bool IsReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_AdjustMeshScale");

	Params::BPI_CharaBaseAccessor_C_BI_AdjustMeshScale Parms{};

	Parms.IsReset = IsReset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GuestBattleInitialize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dither100                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_GuestBattleInitialize(bool Dither100)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GuestBattleInitialize");

	Params::BPI_CharaBaseAccessor_C_BI_GuestBattleInitialize Parms{};

	Parms.Dither100 = Dither100;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GuestBattleFinalize
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharaBaseAccessor_C::BI_GuestBattleFinalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GuestBattleFinalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_AddIgnoreAtomComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAtomComponent*                   IgnoreComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_AddIgnoreAtomComp(class UAtomComponent*& IgnoreComp, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_AddIgnoreAtomComp");

	Params::BPI_CharaBaseAccessor_C_BI_AddIgnoreAtomComp Parms{};

	Parms.IgnoreComp = IgnoreComp;

	UObject::ProcessEvent(Func, &Parms);

	IgnoreComp = Parms.IgnoreComp;

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CheckIgnoreAtomComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAtomComponent*                   IgnoreComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_CheckIgnoreAtomComp(class UAtomComponent*& IgnoreComp, bool* IsIgnoreID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CheckIgnoreAtomComp");

	Params::BPI_CharaBaseAccessor_C_BI_CheckIgnoreAtomComp Parms{};

	Parms.IgnoreComp = IgnoreComp;

	UObject::ProcessEvent(Func, &Parms);

	IgnoreComp = Parms.IgnoreComp;

	if (IsIgnoreID != nullptr)
		*IsIgnoreID = Parms.IsIgnoreID;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_TempToggleCameraDitherState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceDitherOff                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_TempToggleCameraDitherState(bool ForceDitherOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_TempToggleCameraDitherState");

	Params::BPI_CharaBaseAccessor_C_BI_TempToggleCameraDitherState Parms{};

	Parms.ForceDitherOff = ForceDitherOff;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateSkeletalMeshComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkelMeshComp                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_CreateSkeletalMeshComp(class USkeletalMeshComponent** SkelMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CreateSkeletalMeshComp");

	Params::BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshComp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkelMeshComp != nullptr)
		*SkelMeshComp = Parms.SkelMeshComp;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DestroySkeletalMeshComp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkelMeshComp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_DestroySkeletalMeshComp(class USkeletalMeshComponent* SkelMeshComp, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_DestroySkeletalMeshComp");

	Params::BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshComp Parms{};

	Parms.SkelMeshComp = SkelMeshComp;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_RemoveAllMaterialAnimDecalAttached
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_RemoveAllMaterialAnimDecalAttached(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_RemoveAllMaterialAnimDecalAttached");

	Params::BPI_CharaBaseAccessor_C_BI_RemoveAllMaterialAnimDecalAttached Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_CreateSkeletalMeshActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASkeletalMeshActor*               SkelMeshActor                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_CreateSkeletalMeshActor(class ASkeletalMeshActor** SkelMeshActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_CreateSkeletalMeshActor");

	Params::BPI_CharaBaseAccessor_C_BI_CreateSkeletalMeshActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkelMeshActor != nullptr)
		*SkelMeshActor = Parms.SkelMeshActor;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetAnimBP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetAnimBP(class UAnimInstance* AnimInstance, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetAnimBP");

	Params::BPI_CharaBaseAccessor_C_BI_SetAnimBP Parms{};

	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DestroySkeletalMeshActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASkeletalMeshActor*               SkelActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_DestroySkeletalMeshActor(class ASkeletalMeshActor* SkelActor, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_DestroySkeletalMeshActor");

	Params::BPI_CharaBaseAccessor_C_BI_DestroySkeletalMeshActor Parms{};

	Parms.SkelActor = SkelActor;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetSkeletalMeshActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASkeletalMeshActor*>       SkelMeshActors                                         (Parm, OutParm)

void IBPI_CharaBaseAccessor_C::BI_GetSkeletalMeshActors(TArray<class ASkeletalMeshActor*>* SkelMeshActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetSkeletalMeshActors");

	Params::BPI_CharaBaseAccessor_C_BI_GetSkeletalMeshActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkelMeshActors != nullptr)
		*SkelMeshActors = std::move(Parms.SkelMeshActors);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DeactivateAttachedParticles
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoDestroyComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_DeactivateAttachedParticles(bool NoDestroyComponent, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_DeactivateAttachedParticles");

	Params::BPI_CharaBaseAccessor_C_BI_DeactivateAttachedParticles Parms{};

	Parms.NoDestroyComponent = NoDestroyComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ActivateAttachedParticles
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ActivateAttachedParticles(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ActivateAttachedParticles");

	Params::BPI_CharaBaseAccessor_C_BI_ActivateAttachedParticles Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetVoiceSkillID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetVoiceSkillID(int32 SkillId, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetVoiceSkillID");

	Params::BPI_CharaBaseAccessor_C_BI_SetVoiceSkillID Parms{};

	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_GetVoiceSkillID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharaBaseAccessor_C::BI_GetVoiceSkillID(int32* SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_GetVoiceSkillID");

	Params::BPI_CharaBaseAccessor_C_BI_GetVoiceSkillID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillId != nullptr)
		*SkillId = Parms.SkillId;
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetLimitLookAtRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetLimitLookAtRange(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetLimitLookAtRange");

	Params::BPI_CharaBaseAccessor_C_BI_SetLimitLookAtRange Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_ForceDisableLimitLookAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_ForceDisableLimitLookAt(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_ForceDisableLimitLookAt");

	Params::BPI_CharaBaseAccessor_C_BI_ForceDisableLimitLookAt Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_SetForceUpdateLookAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForceUpdate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_SetForceUpdateLookAt(bool IsForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_SetForceUpdateLookAt");

	Params::BPI_CharaBaseAccessor_C_BI_SetForceUpdateLookAt Parms{};

	Parms.IsForceUpdate = IsForceUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_CharaBaseAccessor.BPI_CharaBaseAccessor_C.BI_DirectPlayMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                DefaultAnim                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                LoopAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionBlendTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartOffsetTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CharaBaseAccessor_C::BI_DirectPlayMotion(class UAnimSequenceBase* DefaultAnim, class UAnimSequenceBase* LoopAnim, float MotionBlendTime, float StartOffsetTime, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_CharaBaseAccessor_C", "BI_DirectPlayMotion");

	Params::BPI_CharaBaseAccessor_C_BI_DirectPlayMotion Parms{};

	Parms.DefaultAnim = DefaultAnim;
	Parms.LoopAnim = LoopAnim;
	Parms.MotionBlendTime = MotionBlendTime;
	Parms.StartOffsetTime = StartOffsetTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

