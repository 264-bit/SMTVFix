#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MsgCtrl

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_MsgCtrl.BPI_MsgCtrl_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_MsgCtrl_C final : public IInterface
{
public:
	void IMsgWindowIn(E_WIDGET_PRIO InPriority);
	void ICanSetMsg(bool* OutFinished);
	void ISetMsgText(class UScriptMessageAsset* ArgScriptMessageAsset, class FName ArgLabel, bool ArgExecutionText, bool ArgShowPageIconAfterCompleted);
	void IMsgWindowOut();
	void IExecutionMsgWindowIn(E_WIDGET_PRIO InPriority);
	void IIsFinishedWindowOut(bool* OutFinished);
	void IMsgSelectMenuOff();
	void ISetMsgSelectMenu(int32 InMenuNumber, int32 InInitCursorPosition, class UScriptMessageAsset* InScriptMessageAsset, const TArray<class FName>& InSelectItemName, bool InUseNewIcon, const TArray<bool>& InSelectItemNewIcon, const TArray<bool>& InSelectTextDisabledColor);
	void IMoveSelectCursor(const int32 InParam);
	void IGetSelectedCursorPosition(int32* OutIndex);
	void ISetMsgTextByIndex(class UScriptMessageAsset* ArgScriptMessageAsset, int32 Argindex, bool ArgExecutionText, bool ArgShowPageIconAfterCompleted);
	void ISetMsgSelectMenuByIndex(int32 InMenuNumber, int32 InInitCursorPosition, class UScriptMessageAsset* InScriptMessageAsset, const TArray<int32>& InSelectItemIndex, bool InUseNewIcon, const TArray<bool>& InSelectItemNewIcon, TArray<bool>& InSelectTextDisabledColor);
	void IClearMsgText();
	void IIsFinishedWindowIn(bool* OutFinished);
	void IExecutionMsgWindowOut();
	void IIsCompletedMsg(bool* OutFinished);
	void IExecutionMsgText();
	void IMsgWindowPageIconOff();
	void ISetRichMsgTextByLable(class UScriptMessageAsset* InScriptMessageAsset, class FName InLabel, bool InExecutionText, bool InShowPageIconAfterCompleted, bool InBuildText);
	void ISetRichMsgTextByIndex(class UScriptMessageAsset* InScriptMessageAsset, int32 InIndex, bool InExecutionText, bool InShowPageIconAfterCompleted, bool InBuildText);
	void ISetRichMsgBuildText();
	void IMsgWindowVoiceOn();
	void IMsgWindowVoiceOff();
	void IMsgWindowSettings(int32 InType);
	void IMsgWindowGetCentering(bool* OutCentering);
	void IMsgWindowGetVoiceCompornent(class UAtomComponent** OutVoiceCompornent);
	void ISetMsgSelectMenuByIndexAfterBuild(int32 InMenuNumber, int32 InInitCursorPosition, class UScriptMessageAsset* InScriptMessageAsset, const TArray<int32>& NSelectItemIndex, bool InUseNewIcon, const TArray<bool>& InSelectItemNewIcon, TArray<bool>& InSelectTextDisabledColor, bool InBuildTextLater);
	void ISetMsgSelectBuildText();
	void ISetMsgSelectMenuByLabelAfterBuild(int32 InMenuNumber, int32 InInitCursorPosition, class UScriptMessageAsset* InScriptMessageAsset, const TArray<class FName>& InSelectItemName, const bool InUseNewIcon, const TArray<bool>& InSelectItemNewIcon, TArray<bool>& InSelectTextDisabledColor, const bool InBuildTextLater);
	void ISetMsgEventFlag(bool InEventFlag);
	void IMsgSetRichSelectTextValueParam(int32 InSelectIndex, int32 InValueIndex, int32 InValueParam);
	void IMsgSetRichTextValueParam(int32 InIndex, int32 InValueParam);
	int32 IMsgGetDrawStrLen();
	void IMsgSetRichTextProgramValue(int32 InIndex, const class FString& InValue);
	void IIsCompletedPage(bool* IsFinish);
	void IClearSelectWindow();
	void IIsVisibleWindow(bool* IsVisible);
	void ISetWindowVisibility(bool IsVisible, bool* RerurnVisible);
	void IMsgSetSelectCursorMin(bool* OutParam);
	void IMsgSetSelectCursorMax(bool* OutParam);
	void IGetSelectCursorNum(int32* OutCursorNum);
	void IMsgGetStrLenExcludingTag(int32* StrLen);
	void IMsgWindowIsNextPageIconClicked(bool* OutClicked);
	void IMsgWindowIsConfirmedMouse(bool* OutFinished, int32* OutSelectedIndex);
	void IMsgWindowIsMovedCursorMouse(bool* OutMoved);
	void IMsgSetGardenTalkIcon(int32 InCursorIndex, bool* OutParam);
	void IMsgResetGardenTalkIcon(int32 InCursorIndex, bool* OutParam);
	void IMsgCtrl_GetIsMacroEnd(bool* IsEnd);
	void IMsgCtrl_DrawCommonMsgTextIndex(class UScriptMessageAsset* MessageAsset, int32 Param_Index, bool ExecutionText, bool ShowPageIconAfterCompleted, class AActor* SpeakingActor, bool FullvoiceText);
	void IMsgCtrl_DrawCommonMsgTextLabel(class UScriptMessageAsset* ScriptMessageAsset, class FName Label, bool ExecutionText, bool ShowPageIconAfterCompleted, class AActor* SpeakingActor, bool FullvoiceText);
	void IMsgCtrl_DrawCommonMsgTextLipSync(class UScriptMessageAsset* ScriptMessageAsset, class FName Label, bool ExecutionText, bool ShowPageIconAfterCompleted, class AActor* SpeakingActor);
	void IMsgCtrl_DrawCommonMsgSelectEx(class UScriptMessageAsset* SelectAsset, const TArray<class FName>& SelectArray, int32 SelectNum, int32 CursorPosition, const TArray<bool>& GrayText, bool EnterDelay, bool UseCancel);
	void IMsgCtrl_DrawCommonMsgSelectExIndex(class UScriptMessageAsset* SelectAsset, const TArray<int32>& SelectArray, int32 SelectNum, int32 CursorPosition, const TArray<bool>& GrayText, bool EnterDelay, bool UseCancel);
	void IMsgCtrl_GetValueMacroEnd(int32* Return);
	void IMsgWindowResetConfirmedMouse(bool* OutParam);
	void IMsgWindowStopVoicePlay();
	void IMsg_Select_Menu_Hover_Off(bool* OutParam);
	void IMsgSetMouseMaskFlag(bool InMaskOn, bool* OutParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_MsgCtrl_C">();
	}
	static class IBPI_MsgCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_MsgCtrl_C>();
	}
};
static_assert(alignof(IBPI_MsgCtrl_C) == 0x000008, "Wrong alignment on IBPI_MsgCtrl_C");
static_assert(sizeof(IBPI_MsgCtrl_C) == 0x000028, "Wrong size on IBPI_MsgCtrl_C");

}

