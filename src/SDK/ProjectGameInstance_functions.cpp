#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectGameInstance

#include "Basic.hpp"

#include "ProjectGameInstance_classes.hpp"
#include "ProjectGameInstance_parameters.hpp"


namespace SDK
{

// Function ProjectGameInstance.ProjectGameInstance_C.ExecuteUbergraph_ProjectGameInstance
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::ExecuteUbergraph_ProjectGameInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "ExecuteUbergraph_ProjectGameInstance");

	Params::ProjectGameInstance_C_ExecuteUbergraph_ProjectGameInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ClearPreloadLevelList
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_ClearPreloadLevelList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ClearPreloadLevelList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetPreloadLevelList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          Param_PreloadLevelList                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UProjectGameInstance_C::BPI_SetPreloadLevelList(const TArray<struct FPrimaryAssetId>& Param_PreloadLevelList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetPreloadLevelList");

	Params::ProjectGameInstance_C_BPI_SetPreloadLevelList Parms{};

	Parms.Param_PreloadLevelList = std::move(Param_PreloadLevelList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetMapUICtrl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MapUICommon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetMapUICtrl(class AActor* MapUICommon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetMapUICtrl");

	Params::ProjectGameInstance_C_BPI_SetMapUICtrl Parms{};

	Parms.MapUICommon = MapUICommon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_SetMapChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapChange                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FromEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherMapReturn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_SetMapChange(bool Param_IsMapChange, int32 WarpPoint, int32 FromEvent, int32 OtherMapReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_SetMapChange");

	Params::ProjectGameInstance_C_BI_SetMapChange Parms{};

	Parms.Param_IsMapChange = Param_IsMapChange;
	Parms.WarpPoint = WarpPoint;
	Parms.FromEvent = FromEvent;
	Parms.OtherMapReturn = OtherMapReturn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.JsonCounterAdd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountAdd                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagatukaNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::JsonCounterAdd(int32 EncountAdd, int32 MagatukaNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "JsonCounterAdd");

	Params::ProjectGameInstance_C_JsonCounterAdd Parms{};

	Parms.EncountAdd = EncountAdd;
	Parms.MagatukaNum = MagatukaNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_SetDevilAssetTable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          CharaTable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_SetDevilAssetTable(class UObject* CharaTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_SetDevilAssetTable");

	Params::ProjectGameInstance_C_BI_SetDevilAssetTable Parms{};

	Parms.CharaTable = CharaTable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetJsonFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetJsonFile(const class FString& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetJsonFile");

	Params::ProjectGameInstance_C_SetJsonFile Parms{};

	Parms.Json = std::move(Json);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetJsonData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJsonDataCtrl*                    Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetJsonData(class UJsonDataCtrl* Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetJsonData");

	Params::ProjectGameInstance_C_SetJsonData Parms{};

	Parms.Json = Json;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.StartDebugGameTrace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::StartDebugGameTrace(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "StartDebugGameTrace");

	Params::ProjectGameInstance_C_StartDebugGameTrace Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.OnDestroyed_§ŸÛ»_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::OnDestroyed______0(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "OnDestroyed_§ŸÛ»_0");

	Params::ProjectGameInstance_C_OnDestroyed______0 Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetGamePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APawn*>                    In                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UProjectGameInstance_C::BPI_SetGamePlayer(const TArray<class APawn*>& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetGamePlayer");

	Params::ProjectGameInstance_C_BPI_SetGamePlayer Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.GameFirstInitEvent
// (Event, Public, BlueprintEvent)

void UProjectGameInstance_C::GameFirstInitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GameFirstInitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetLoadLevelGame
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetLoadLevelGame(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetLoadLevelGame");

	Params::ProjectGameInstance_C_SetLoadLevelGame Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetMapStartLoadFlag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetMapStartLoadFlag(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetMapStartLoadFlag");

	Params::ProjectGameInstance_C_SetMapStartLoadFlag Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetNextMapStartList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          LevelList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     LevelNameList                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetNextMapStartList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& LevelNameList, int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetNextMapStartList");

	Params::ProjectGameInstance_C_SetNextMapStartList Parms{};

	Parms.LevelList = std::move(LevelList);
	Parms.LevelNameList = std::move(LevelNameList);
	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.DeleteNextMapAssetList
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::DeleteNextMapAssetList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "DeleteNextMapAssetList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetNextMapLoadEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetNextMapLoadEnd(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetNextMapLoadEnd");

	Params::ProjectGameInstance_C_SetNextMapLoadEnd Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetNextMapLoadStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetNextMapLoadStart(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetNextMapLoadStart");

	Params::ProjectGameInstance_C_SetNextMapLoadStart Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetNextMapAssetList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          LevelList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     NameList                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetNextMapAssetList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& NameList, int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetNextMapAssetList");

	Params::ProjectGameInstance_C_SetNextMapAssetList Parms{};

	Parms.LevelList = std::move(LevelList);
	Parms.NameList = std::move(NameList);
	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEventReserv
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetEventReserv(int32 MapEventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEventReserv");

	Params::ProjectGameInstance_C_BPI_SetEventReserv Parms{};

	Parms.MapEventID = MapEventID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_SetCharaTable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          CharaTable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_SetCharaTable(class UObject* CharaTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_SetCharaTable");

	Params::ProjectGameInstance_C_BI_SetCharaTable Parms{};

	Parms.CharaTable = CharaTable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_SetBattleMain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BattleMain                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_SetBattleMain(class AActor* BattleMain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_SetBattleMain");

	Params::ProjectGameInstance_C_BI_SetBattleMain Parms{};

	Parms.BattleMain = BattleMain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetMapCommon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetMapCommon(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetMapCommon");

	Params::ProjectGameInstance_C_BPI_SetMapCommon Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_LoadMapBridgeMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextMapId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextAreaId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FadeCancel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_LoadMapBridgeMode(int32 NextMapId, int32 NextAreaId, bool FadeCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_LoadMapBridgeMode");

	Params::ProjectGameInstance_C_BPI_LoadMapBridgeMode Parms{};

	Parms.NextMapId = NextMapId;
	Parms.NextAreaId = NextAreaId;
	Parms.FadeCancel = FadeCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.EnvChange_Immediate
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::EnvChange_Immediate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "EnvChange_Immediate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_RequestNaviDevilVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_RequestNaviDevilVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_RequestNaviDevilVisible");

	Params::ProjectGameInstance_C_BPI_RequestNaviDevilVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEventEncount_BossRush
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextEventID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NowEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ChallengeMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallEventEncount_BossRush(int32 EventEncountId, int32 NextEventID, int32 NowEventID, bool Manual, bool ChallengeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEventEncount_BossRush");

	Params::ProjectGameInstance_C_BPI_CallEventEncount_BossRush Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.NextEventID = NextEventID;
	Parms.NowEventID = NowEventID;
	Parms.Manual = Manual;
	Parms.ChallengeMode = ChallengeMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI Tokyo Large Map Add Icon Mission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_Tokyo_Large_Map_Add_Icon_Mission(const struct FVector& ActorLocation, int32 MissionId, class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI Tokyo Large Map Add Icon Mission");

	Params::ProjectGameInstance_C_BPI_Tokyo_Large_Map_Add_Icon_Mission Parms{};

	Parms.ActorLocation = std::move(ActorLocation);
	Parms.MissionId = MissionId;
	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GardenUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GardenUnload(float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GardenUnload");

	Params::ProjectGameInstance_C_BPI_GardenUnload Parms{};

	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GardenLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GardenLoad(int32 WarpPoint, float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GardenLoad");

	Params::ProjectGameInstance_C_BPI_GardenLoad Parms{};

	Parms.WarpPoint = WarpPoint;
	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_TokyoLargeMapHidePlace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DataId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_TokyoLargeMapHidePlace(int32 DataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_TokyoLargeMapHidePlace");

	Params::ProjectGameInstance_C_BPI_TokyoLargeMapHidePlace Parms{};

	Parms.DataId = DataId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_TokyoLargeMapShowPlace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DataId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_TokyoLargeMapShowPlace(int32 DataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_TokyoLargeMapShowPlace");

	Params::ProjectGameInstance_C_BPI_TokyoLargeMapShowPlace Parms{};

	Parms.DataId = DataId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_EndMagatsuka_ForSimpleEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_EndMagatsuka_ForSimpleEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_EndMagatsuka_ForSimpleEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_PreSystemLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Enum                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_PreSystemLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_PreSystemLoad");

	Params::ProjectGameInstance_C_BPI_PreSystemLoad Parms{};

	Parms.MapId = MapId;
	Parms.Enum = Enum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_NaviGimmickTutorial_ForOuter
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_NaviGimmickTutorial_ForOuter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_NaviGimmickTutorial_ForOuter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_NaviGimmickTutorial_ForInner
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_NaviGimmickTutorial_ForInner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_NaviGimmickTutorial_ForInner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEventEncountForMagatsuka
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SafeZoeID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallEventEncountForMagatsuka(int32 EventEncountId, int32 SafeZoeID, bool ManualSafeZone, bool HitMapAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEventEncountForMagatsuka");

	Params::ProjectGameInstance_C_BPI_CallEventEncountForMagatsuka Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SafeZoeID = SafeZoeID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.HitMapAttack = HitMapAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEventEncount_ForUniqueSymbol
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_CallEventEncount_ForUniqueSymbol(int32 EventEncountId, const struct FTransform& SpawnTransform, bool ManualWhenNotEscape, bool HitMapAttack, E_BTL_SYMBOL_ENCOUNT EncountType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEventEncount_ForUniqueSymbol");

	Params::ProjectGameInstance_C_BPI_CallEventEncount_ForUniqueSymbol Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.HitMapAttack = HitMapAttack;
	Parms.EncountType = EncountType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEncountForDebug
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_CallEncountForDebug(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEncountForDebug");

	Params::ProjectGameInstance_C_BPI_CallEncountForDebug Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.EncountType = EncountType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_TokyoLargeMapDeleteIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_TokyoLargeMapDeleteIcon(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_TokyoLargeMapDeleteIcon");

	Params::ProjectGameInstance_C_BPI_TokyoLargeMapDeleteIcon Parms{};

	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_TokyoLargeMapAddIconTalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InactiveFlag                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_TokyoLargeMapAddIconTalk(const struct FVector& ActorLocation, class FName InactiveFlag, class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_TokyoLargeMapAddIconTalk");

	Params::ProjectGameInstance_C_BPI_TokyoLargeMapAddIconTalk Parms{};

	Parms.ActorLocation = std::move(ActorLocation);
	Parms.InactiveFlag = InactiveFlag;
	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.Env_ChangeSpecial_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::Env_ChangeSpecial_Play(int32 Param_Index, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "Env_ChangeSpecial_Play");

	Params::ProjectGameInstance_C_Env_ChangeSpecial_Play Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_HideObjects_WhenExitMap
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_HideObjects_WhenExitMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_HideObjects_WhenExitMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ShowObjects_WhenReturnMap
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_ShowObjects_WhenReturnMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ShowObjects_WhenReturnMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_EndTakara_ForSimpleEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TakaraID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_EndTakara_ForSimpleEvent(int32 TakaraID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_EndTakara_ForSimpleEvent");

	Params::ProjectGameInstance_C_BPI_EndTakara_ForSimpleEvent Parms{};

	Parms.TakaraID = TakaraID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.ResetEventBattleActor
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::ResetEventBattleActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "ResetEventBattleActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.EnvChangeMagatuka_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::EnvChangeMagatuka_Play(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "EnvChangeMagatuka_Play");

	Params::ProjectGameInstance_C_EnvChangeMagatuka_Play Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapStart_SimpleEventEnable
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_MapStart_SimpleEventEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapStart_SimpleEventEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_EntryNaviDevillGimmick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_EntryNaviDevillGimmick(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_EntryNaviDevillGimmick");

	Params::ProjectGameInstance_C_BPI_EntryNaviDevillGimmick Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEncountForNaviDevil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerFirst                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallEncountForNaviDevil(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi, bool PlayerFirst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEncountForNaviDevil");

	Params::ProjectGameInstance_C_BPI_CallEncountForNaviDevil Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;
	Parms.PlayerFirst = PlayerFirst;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ChangeArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextAreaId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeInTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_ChangeArea(int32 NextAreaId, int32 WarpPoint, float FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ChangeArea");

	Params::ProjectGameInstance_C_BPI_ChangeArea Parms{};

	Parms.NextAreaId = NextAreaId;
	Parms.WarpPoint = WarpPoint;
	Parms.FadeInTime = FadeInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.EnvChange_Reverse
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::EnvChange_Reverse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "EnvChange_Reverse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.EnvChange_Play
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FST_LightParam                   Next                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_LightParam                   Prev                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::EnvChange_Play(const struct FST_LightParam& Next, const struct FST_LightParam& Prev)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "EnvChange_Play");

	Params::ProjectGameInstance_C_EnvChange_Play Parms{};

	Parms.Next = std::move(Next);
	Parms.Prev = std::move(Prev);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ReturnMapFromOutside
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AutoSave                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnPlayerPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UI_Immediate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_ReturnMapFromOutside(bool AutoSave, bool ReturnPlayerPosition, bool UI_Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ReturnMapFromOutside");

	Params::ProjectGameInstance_C_BPI_ReturnMapFromOutside Parms{};

	Parms.AutoSave = AutoSave;
	Parms.ReturnPlayerPosition = ReturnPlayerPosition;
	Parms.UI_Immediate = UI_Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEncountForMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EnemyList                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   SafeZoneID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualSafeZone                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_BTL_SYMBOL_ENCOUNT                    EncountType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallEncountForMagatsuka(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType, bool HitMapAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEncountForMagatsuka");

	Params::ProjectGameInstance_C_BPI_CallEncountForMagatsuka Parms{};

	Parms.EncountID = EncountID;
	Parms.EnemyList = std::move(EnemyList);
	Parms.SafeZoneID = SafeZoneID;
	Parms.ManualSafeZone = ManualSafeZone;
	Parms.EncountType = EncountType;
	Parms.HitMapAttack = HitMapAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallMapEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReStartPoint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BattlePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InitFade                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WaitEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallMapEvent(int32 MapEventID_, class AActor* ReStartPoint, class AActor* BattlePoint, bool InitFade, bool WaitEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallMapEvent");

	Params::ProjectGameInstance_C_BPI_CallMapEvent Parms{};

	Parms.MapEventID_ = MapEventID_;
	Parms.ReStartPoint = ReStartPoint;
	Parms.BattlePoint = BattlePoint;
	Parms.InitFade = InitFade;
	Parms.WaitEvent = WaitEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEncountActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetEncountActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEncountActor");

	Params::ProjectGameInstance_C_BPI_SetEncountActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetEventBattleActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FEventBattleListStruct>   BTLActor                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       PlayerPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetEventBattleActor(const TArray<struct FEventBattleListStruct>& BTLActor, const struct FTransform& PlayerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetEventBattleActor");

	Params::ProjectGameInstance_C_SetEventBattleActor Parms{};

	Parms.BTLActor = std::move(BTLActor);
	Parms.PlayerPos = std::move(PlayerPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.MapInit
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::MapInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "MapInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_HeroChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFade                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_MAP_PLAYER_TYPE                       Hero                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_HeroChange(bool IsFade, E_MAP_PLAYER_TYPE Hero)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_HeroChange");

	Params::ProjectGameInstance_C_BPI_HeroChange Parms{};

	Parms.IsFade = IsFade;
	Parms.Hero = Hero;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ForceSafeEncount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_ForceSafeEncount(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ForceSafeEncount");

	Params::ProjectGameInstance_C_BPI_ForceSafeEncount Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapAttackEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapAttackEnd(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapAttackEnd");

	Params::ProjectGameInstance_C_BPI_MapAttackEnd Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_OpenSkyTerminal
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_OpenSkyTerminal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_OpenSkyTerminal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallKokubouEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           RestarPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BattlePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_CallKokubouEvent(int32 EventId, class AActor* RestarPoint, class AActor* BattlePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallKokubouEvent");

	Params::ProjectGameInstance_C_BPI_CallKokubouEvent Parms{};

	Parms.EventId = EventId;
	Parms.RestarPoint = RestarPoint;
	Parms.BattlePoint = BattlePoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_PlayerON
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_PlayerON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_PlayerON");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_PlayerOFF
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_PlayerOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_PlayerOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CallEventEncount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EventEncountId                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   NextEventID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NowEventID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CallEventEncount(int32 EventEncountId, const struct FTransform& SpawnTransform, int32 NextEventID, int32 NowEventID, bool Manual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CallEventEncount");

	Params::ProjectGameInstance_C_BPI_CallEventEncount Parms{};

	Parms.EventEncountId = EventEncountId;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.NextEventID = NextEventID;
	Parms.NowEventID = NowEventID;
	Parms.Manual = Manual;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MissionCheckDisable                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StartSymbolAIDisable                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnPlayerPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UI_Immediate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapStart(bool MissionCheckDisable, bool StartSymbolAIDisable, bool ReturnPlayerPosition, bool UI_Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapStart");

	Params::ProjectGameInstance_C_BPI_MapStart Parms{};

	Parms.MissionCheckDisable = MissionCheckDisable;
	Parms.StartSymbolAIDisable = StartSymbolAIDisable;
	Parms.ReturnPlayerPosition = ReturnPlayerPosition;
	Parms.UI_Immediate = UI_Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayerMoveEnable                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerCameraEnable                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayerVisible                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MoonTimeEnable                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SymbolEnable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllMapStop                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AllObjectHidden                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TopCamera                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapPause(bool PlayerMoveEnable, bool PlayerCameraEnable, bool PlayerVisible, bool MoonTimeEnable, bool SymbolEnable, bool AllMapStop, bool AllObjectHidden, bool TopCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapPause");

	Params::ProjectGameInstance_C_BPI_MapPause Parms{};

	Parms.PlayerMoveEnable = PlayerMoveEnable;
	Parms.PlayerCameraEnable = PlayerCameraEnable;
	Parms.PlayerVisible = PlayerVisible;
	Parms.MoonTimeEnable = MoonTimeEnable;
	Parms.SymbolEnable = SymbolEnable;
	Parms.AllMapStop = AllMapStop;
	Parms.AllObjectHidden = AllObjectHidden;
	Parms.TopCamera = TopCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_DebugMesWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MAP_DEBUG_MES_TYPE                    MesType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_DebugMesWindow(E_MAP_DEBUG_MES_TYPE MesType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_DebugMesWindow");

	Params::ProjectGameInstance_C_BPI_DebugMesWindow Parms{};

	Parms.MesType = MesType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_DebugChangeChar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MAP_PLAYER_TYPE                       Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_DebugChangeChar(E_MAP_PLAYER_TYPE Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_DebugChangeChar");

	Params::ProjectGameInstance_C_BPI_DebugChangeChar Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_AddSpawnEnemyCount
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_AddSpawnEnemyCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_AddSpawnEnemyCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_LoadMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InFadeCancel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_LoadMap(bool InFadeCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_LoadMap");

	Params::ProjectGameInstance_C_BPI_LoadMap Parms{};

	Parms.InFadeCancel = InFadeCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapPlayerStop
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Stop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapPlayerStop(bool Stop, bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapPlayerStop");

	Params::ProjectGameInstance_C_BPI_MapPlayerStop Parms{};

	Parms.Stop = Stop;
	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEncountON
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_SetEncountON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEncountON");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEncountOff
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_SetEncountOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEncountOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ReturnFromBtl
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BPI_ReturnFromBtl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ReturnFromBtl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SpawnEncountActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           EnemyIdList                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class AActor*                           EncountPawn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SYMBOL_ENCOUNT                    SymbolEncountType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SpawnEncountActor(const TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SpawnEncountActor");

	Params::ProjectGameInstance_C_BPI_SpawnEncountActor Parms{};

	Parms.EnemyIdList = std::move(EnemyIdList);
	Parms.EncountID = EncountID;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.EncountPawn = EncountPawn;
	Parms.SymbolEncountType = SymbolEncountType;
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.HitMapAttack = HitMapAttack;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetMapCharaPanelCtrlUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetMapCharaPanelCtrlUI(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetMapCharaPanelCtrlUI");

	Params::ProjectGameInstance_C_BPI_SetMapCharaPanelCtrlUI Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetContlrolActivePawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerBase_C*                    Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PLAYER_MANAGER_TYPE                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_SetContlrolActivePawn(class APlayerBase_C* Pawn, E_PLAYER_MANAGER_TYPE Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetContlrolActivePawn");

	Params::ProjectGameInstance_C_BPI_SetContlrolActivePawn Parms{};

	Parms.Pawn = Pawn;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetActive");

	Params::ProjectGameInstance_C_BPI_SetActive Parms{};

	Parms.PlayerType = PlayerType;
	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetDeactiveLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, const struct FTransform& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetDeactiveLocation");

	Params::ProjectGameInstance_C_BPI_SetDeactiveLocation Parms{};

	Parms.PlayerType = PlayerType;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.IsBattleEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::IsBattleEnd(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "IsBattleEnd");

	Params::ProjectGameInstance_C_IsBattleEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.EncountStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           EnemyIdList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class AActor*                           EncountPawn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SYMBOL_ENCOUNT                    SymbolEncountType                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ManualWhenNotEscape                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitMapAttack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FChainEncountInfo                ChainEncountInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::EncountStart(TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "EncountStart");

	Params::ProjectGameInstance_C_EncountStart Parms{};

	Parms.EnemyIdList = std::move(EnemyIdList);
	Parms.EncountID = EncountID;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.EncountPawn = EncountPawn;
	Parms.SymbolEncountType = SymbolEncountType;
	Parms.ManualWhenNotEscape = ManualWhenNotEscape;
	Parms.HitMapAttack = HitMapAttack;
	Parms.ChainEncountInfo = std::move(ChainEncountInfo);
	Parms.Magatsuhi = Magatsuhi;

	UObject::ProcessEvent(Func, &Parms);

	EnemyIdList = std::move(Parms.EnemyIdList);
}


// Function ProjectGameInstance.ProjectGameInstance_C.ReturnMapFromBtl
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::ReturnMapFromBtl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "ReturnMapFromBtl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BattleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::BattleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BattleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.ReturnMapCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       FainalCameraPos                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       SetBtlResultCameraPos_0                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::ReturnMapCamera(const struct FTransform& FainalCameraPos, const struct FTransform& SetBtlResultCameraPos_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "ReturnMapCamera");

	Params::ProjectGameInstance_C_ReturnMapCamera Parms{};

	Parms.FainalCameraPos = std::move(FainalCameraPos);
	Parms.SetBtlResultCameraPos_0 = std::move(SetBtlResultCameraPos_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetMapCommon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetMapCommon(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetMapCommon");

	Params::ProjectGameInstance_C_SetMapCommon Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetMapCommon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetMapCommon(class AActor** Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetMapCommon");

	Params::ProjectGameInstance_C_GetMapCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetMapChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapChange                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_M_WarpPoint                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_M_FromEvent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_M_OtherMapReturn                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetMapChange(bool Param_IsMapChange, int32 Param_M_WarpPoint, int32 Param_M_FromEvent, int32 Param_M_OtherMapReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetMapChange");

	Params::ProjectGameInstance_C_SetMapChange Parms{};

	Parms.Param_IsMapChange = Param_IsMapChange;
	Parms.Param_M_WarpPoint = Param_M_WarpPoint;
	Parms.Param_M_FromEvent = Param_M_FromEvent;
	Parms.Param_M_OtherMapReturn = Param_M_OtherMapReturn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetMapChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsMapChange                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_M_WarpPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_M_FromEvent                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_M_OtherMapReturn                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetMapChange(bool* Param_IsMapChange, int32* Param_M_WarpPoint, int32* Param_M_FromEvent, int32* Param_M_OtherMapReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetMapChange");

	Params::ProjectGameInstance_C_GetMapChange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsMapChange != nullptr)
		*Param_IsMapChange = Parms.Param_IsMapChange;

	if (Param_M_WarpPoint != nullptr)
		*Param_M_WarpPoint = Parms.Param_M_WarpPoint;

	if (Param_M_FromEvent != nullptr)
		*Param_M_FromEvent = Parms.Param_M_FromEvent;

	if (Param_M_OtherMapReturn != nullptr)
		*Param_M_OtherMapReturn = Parms.Param_M_OtherMapReturn;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetLoadMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsLoadMap                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetLoadMap(bool* Param_IsLoadMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetLoadMap");

	Params::ProjectGameInstance_C_GetLoadMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsLoadMap != nullptr)
		*Param_IsLoadMap = Parms.Param_IsLoadMap;
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetLoadMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsLoadMap                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::SetLoadMap(bool Param_IsLoadMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetLoadMap");

	Params::ProjectGameInstance_C_SetLoadMap Parms{};

	Parms.Param_IsLoadMap = Param_IsLoadMap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BattleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlDescData                     Desc                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// class USoundAtomCue*                    PrevBattleBGM                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BattleStart(const struct FBtlDescData& Desc, class USoundAtomCue* PrevBattleBGM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BattleStart");

	Params::ProjectGameInstance_C_BattleStart Parms{};

	Parms.Desc = std::move(Desc);
	Parms.PrevBattleBGM = PrevBattleBGM;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetKeyFreeEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetKeyFreeEvent(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetKeyFreeEvent");

	Params::ProjectGameInstance_C_SetKeyFreeEvent Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.StopKeyFreeEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::StopKeyFreeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "StopKeyFreeEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.AutomationEventStart
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::AutomationEventStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "AutomationEventStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.AutomationEventEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::AutomationEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "AutomationEventEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.RegisterMinimapIconTableAll
// (Public, BlueprintCallable, BlueprintEvent)

void UProjectGameInstance_C::RegisterMinimapIconTableAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "RegisterMinimapIconTableAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProjectGameInstance.ProjectGameInstance_C.SetMapBEffectParamType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMapBEffectParamType                    Next                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::SetMapBEffectParamType(EMapBEffectParamType Next)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "SetMapBEffectParamType");

	Params::ProjectGameInstance_C_SetMapBEffectParamType Parms{};

	Parms.Next = Next;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetTextureBoostMapWarpPoint
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AMapWarpPoint*>            MapWarpPoints                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AMapWarpPoint*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AMapWarpPoint* UProjectGameInstance_C::GetTextureBoostMapWarpPoint(const TArray<class AMapWarpPoint*>& MapWarpPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetTextureBoostMapWarpPoint");

	Params::ProjectGameInstance_C_GetTextureBoostMapWarpPoint Parms{};

	Parms.MapWarpPoints = std::move(MapWarpPoints);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetEventBase
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AEventBase*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AEventBase* UProjectGameInstance_C::GetEventBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetEventBase");

	Params::ProjectGameInstance_C_GetEventBase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetSystemMessage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UScriptMessageAsset* UProjectGameInstance_C::GetSystemMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetSystemMessage");

	Params::ProjectGameInstance_C_GetSystemMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetDeviceNotifyViewAssets
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               OutMaterial                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFont*                            OutFont                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetDeviceNotifyViewAssets(class UMaterialInterface** OutMaterial, class UFont** OutFont)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetDeviceNotifyViewAssets");

	Params::ProjectGameInstance_C_GetDeviceNotifyViewAssets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutMaterial != nullptr)
		*OutMaterial = Parms.OutMaterial;

	if (OutFont != nullptr)
		*OutFont = Parms.OutFont;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetDeviceNotifySoundAssets
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Cue                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetDeviceNotifySoundAssets(class USoundAtomCue** Cue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetDeviceNotifySoundAssets");

	Params::ProjectGameInstance_C_GetDeviceNotifySoundAssets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cue != nullptr)
		*Cue = Parms.Cue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetSonySaveMessage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UScriptMessageAsset* UProjectGameInstance_C::GetSonySaveMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetSonySaveMessage");

	Params::ProjectGameInstance_C_GetSonySaveMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetDifficultyMessage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UScriptMessageAsset*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UScriptMessageAsset* UProjectGameInstance_C::GetDifficultyMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetDifficultyMessage");

	Params::ProjectGameInstance_C_GetDifficultyMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetBattleMain
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class AActor* UProjectGameInstance_C::GetBattleMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetBattleMain");

	Params::ProjectGameInstance_C_GetBattleMain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapCommon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Rerutn                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMapCommon(class AActor** Rerutn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapCommon");

	Params::ProjectGameInstance_C_BPI_GetMapCommon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rerutn != nullptr)
		*Rerutn = Parms.Rerutn;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsSpawnSymbol
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsSpawnSymbol(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsSpawnSymbol");

	Params::ProjectGameInstance_C_BPI_IsSpawnSymbol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetcurrentLevelCustom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetcurrentLevelCustom(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetcurrentLevelCustom");

	Params::ProjectGameInstance_C_GetcurrentLevelCustom Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetIsBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBattle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetIsBattle(bool* IsBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetIsBattle");

	Params::ProjectGameInstance_C_GetIsBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattle != nullptr)
		*IsBattle = Parms.IsBattle;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetBuddyPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetBuddyPawn(class APawn** Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetBuddyPawn");

	Params::ProjectGameInstance_C_BPI_GetBuddyPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckMapPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckMapPause(bool* IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckMapPause");

	Params::ProjectGameInstance_C_BPI_CheckMapPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPause != nullptr)
		*IsPause = Parms.IsPause;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetSavingWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Widget                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetSavingWidget(bool* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetSavingWidget");

	Params::ProjectGameInstance_C_GetSavingWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function ProjectGameInstance.ProjectGameInstance_C.IsEventHitOff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::IsEventHitOff(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "IsEventHitOff");

	Params::ProjectGameInstance_C_IsEventHitOff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_CheckEncountOn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EncountOn                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BI_CheckEncountOn(bool* EncountOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_CheckEncountOn");

	Params::ProjectGameInstance_C_BI_CheckEncountOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EncountOn != nullptr)
		*EncountOn = Parms.EncountOn;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetEventReserv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapEventID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetEventReserv(int32* MapEventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetEventReserv");

	Params::ProjectGameInstance_C_BPI_GetEventReserv Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapEventID != nullptr)
		*MapEventID = Parms.MapEventID;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsEventPlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsEventPlay(bool* IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsEventPlay");

	Params::ProjectGameInstance_C_BPI_IsEventPlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlay != nullptr)
		*IsPlay = Parms.IsPlay;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetNextMapAssetList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLoadOnlyResident_ST>     LevelList                                              (Parm, OutParm)

void UProjectGameInstance_C::GetNextMapAssetList(TArray<struct FLoadOnlyResident_ST>* LevelList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetNextMapAssetList");

	Params::ProjectGameInstance_C_GetNextMapAssetList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelList != nullptr)
		*LevelList = std::move(Parms.LevelList);
}


// Function ProjectGameInstance.ProjectGameInstance_C.IsNextMapLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::IsNextMapLoadEnd(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "IsNextMapLoadEnd");

	Params::ProjectGameInstance_C_IsNextMapLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function ProjectGameInstance.ProjectGameInstance_C.IsNextMapLoadStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::IsNextMapLoadStart(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "IsNextMapLoadStart");

	Params::ProjectGameInstance_C_IsNextMapLoadStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetNextMapStartList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLoadOnlyResident_ST             Return                                                 (Parm, OutParm, HasGetValueTypeHash)

void UProjectGameInstance_C::GetNextMapStartList(struct FLoadOnlyResident_ST* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetNextMapStartList");

	Params::ProjectGameInstance_C_GetNextMapStartList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetMapStartLoadFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetMapStartLoadFlag(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetMapStartLoadFlag");

	Params::ProjectGameInstance_C_GetMapStartLoadFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function ProjectGameInstance.ProjectGameInstance_C.IsLoadLevelGame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::IsLoadLevelGame(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "IsLoadLevelGame");

	Params::ProjectGameInstance_C_IsLoadLevelGame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetEventBattleActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   List                                                   (Parm, OutParm)

void UProjectGameInstance_C::GetEventBattleActor(TArray<class AActor*>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetEventBattleActor");

	Params::ProjectGameInstance_C_GetEventBattleActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MakeUpLessEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MakeUpLessEvent(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MakeUpLessEvent");

	Params::ProjectGameInstance_C_BPI_MakeUpLessEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetDebugGameTrace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::GetDebugGameTrace(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetDebugGameTrace");

	Params::ProjectGameInstance_C_GetDebugGameTrace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetJsonData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJsonDataCtrl*                    Json                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetJsonData(class UJsonDataCtrl** Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetJsonData");

	Params::ProjectGameInstance_C_GetJsonData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Json != nullptr)
		*Json = Parms.Json;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetJsonFileName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetJsonFileName(class FString* Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetJsonFileName");

	Params::ProjectGameInstance_C_GetJsonFileName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapGimmickTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMapGimmickTrigger(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapGimmickTrigger");

	Params::ProjectGameInstance_C_BPI_GetMapGimmickTrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.JsonCounterGet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountNum                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagatukaNum                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::JsonCounterGet(int32* EncountNum, int32* MagatukaNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "JsonCounterGet");

	Params::ProjectGameInstance_C_JsonCounterGet Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EncountNum != nullptr)
		*EncountNum = Parms.EncountNum;

	if (MagatukaNum != nullptr)
		*MagatukaNum = Parms.MagatukaNum;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_GetDaathIntensityEff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Intensity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_GetDaathIntensityEff(struct FLinearColor* Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_GetDaathIntensityEff");

	Params::ProjectGameInstance_C_BI_GetDaathIntensityEff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Intensity != nullptr)
		*Intensity = std::move(Parms.Intensity);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_IsEventView
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsEventView                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BI_IsEventView(bool* Param_IsEventView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_IsEventView");

	Params::ProjectGameInstance_C_BI_IsEventView Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsEventView != nullptr)
		*Param_IsEventView = Parms.Param_IsEventView;
}


// Function ProjectGameInstance.ProjectGameInstance_C.GetGShopCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraActor*                     Cam                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::GetGShopCamera(class ACameraActor** Cam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "GetGShopCamera");

	Params::ProjectGameInstance_C_GetGShopCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cam != nullptr)
		*Cam = Parms.Cam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckSymbolPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckSymbolPause(bool* Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckSymbolPause");

	Params::ProjectGameInstance_C_BPI_CheckSymbolPause Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pause != nullptr)
		*Pause = Parms.Pause;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetDebugOverrideBattleMapDarkID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapDarkID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetDebugOverrideBattleMapDarkID(int32 MapDarkID, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetDebugOverrideBattleMapDarkID");

	Params::ProjectGameInstance_C_BPI_SetDebugOverrideBattleMapDarkID Parms{};

	Parms.MapDarkID = MapDarkID;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MapTimer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMapTimer(float* MapTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapTimer");

	Params::ProjectGameInstance_C_BPI_GetMapTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapTimer != nullptr)
		*MapTimer = Parms.MapTimer;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_AddMagatsukaDiscoveryCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Add                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_AddMagatsukaDiscoveryCnt(int32 Add, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_AddMagatsukaDiscoveryCnt");

	Params::ProjectGameInstance_C_BPI_AddMagatsukaDiscoveryCnt Parms{};

	Parms.Add = Add;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckMagatsukaDiscoveryCnt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Discovery                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckMagatsukaDiscoveryCnt(bool* Discovery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckMagatsukaDiscoveryCnt");

	Params::ProjectGameInstance_C_BPI_CheckMagatsukaDiscoveryCnt Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Discovery != nullptr)
		*Discovery = Parms.Discovery;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetNaviDevilPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetNaviDevilPawn(class APawn* Pawn, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetNaviDevilPawn");

	Params::ProjectGameInstance_C_BPI_SetNaviDevilPawn Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetNaviDevilPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetNaviDevilPawn(class APawn** Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetNaviDevilPawn");

	Params::ProjectGameInstance_C_BPI_GetNaviDevilPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetNaviDevilCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetNaviDevilCtrl(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetNaviDevilCtrl");

	Params::ProjectGameInstance_C_BPI_GetNaviDevilCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetAActionLock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           AActionActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetAActionLock(bool Lock, class AActor* AActionActor, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetAActionLock");

	Params::ProjectGameInstance_C_BPI_SetAActionLock Parms{};

	Parms.Lock = Lock;
	Parms.AActionActor = AActionActor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckAActionLock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           AActionActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_CheckAActionLock(bool* Lock, class AActor** AActionActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckAActionLock");

	Params::ProjectGameInstance_C_BPI_CheckAActionLock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Lock != nullptr)
		*Lock = Parms.Lock;

	if (AActionActor != nullptr)
		*AActionActor = Parms.AActionActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckMapEnableCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckMapEnableCamera(bool* IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckMapEnableCamera");

	Params::ProjectGameInstance_C_BPI_CheckMapEnableCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPause != nullptr)
		*IsPause = Parms.IsPause;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsTokyoLargeMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTokyoLargeMap                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsTokyoLargeMap(bool* IsTokyoLargeMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsTokyoLargeMap");

	Params::ProjectGameInstance_C_BPI_IsTokyoLargeMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTokyoLargeMap != nullptr)
		*IsTokyoLargeMap = Parms.IsTokyoLargeMap;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapButtonHelpType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTN_HELP_SET                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMapButtonHelpType(E_BTN_HELP_SET* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapButtonHelpType");

	Params::ProjectGameInstance_C_BPI_GetMapButtonHelpType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ShowMapButtonHelp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_ShowMapButtonHelp(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ShowMapButtonHelp");

	Params::ProjectGameInstance_C_BPI_ShowMapButtonHelp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_RegisterMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_RegisterMagatsuka(class AActor* Actor, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_RegisterMagatsuka");

	Params::ProjectGameInstance_C_BPI_RegisterMagatsuka Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_UnregisterMagatsuka
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_UnregisterMagatsuka(class AActor* Actor, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_UnregisterMagatsuka");

	Params::ProjectGameInstance_C_BPI_UnregisterMagatsuka Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_UpdateUniqueSymbolBGM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_UpdateUniqueSymbolBGM(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_UpdateUniqueSymbolBGM");

	Params::ProjectGameInstance_C_BPI_UpdateUniqueSymbolBGM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetEncountAreaAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (Parm, OutParm)

void UProjectGameInstance_C::BPI_GetEncountAreaAll(TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetEncountAreaAll");

	Params::ProjectGameInstance_C_BPI_GetEncountAreaAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_UpdateLevelVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Updated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_UpdateLevelVisibility(const struct FVector& NewLocation, bool* Updated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_UpdateLevelVisibility");

	Params::ProjectGameInstance_C_BPI_UpdateLevelVisibility Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Updated != nullptr)
		*Updated = Parms.Updated;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetStatusMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStatusMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetStatusMode(bool IsStatusMode, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetStatusMode");

	Params::ProjectGameInstance_C_BPI_SetStatusMode Parms{};

	Parms.IsStatusMode = IsStatusMode;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsStatusMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStatusMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsStatusMode(bool* IsStatusMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsStatusMode");

	Params::ProjectGameInstance_C_BPI_IsStatusMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStatusMode != nullptr)
		*IsStatusMode = Parms.IsStatusMode;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetLevelVisibilityEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetLevelVisibilityEnabled(bool Enable, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetLevelVisibilityEnabled");

	Params::ProjectGameInstance_C_BPI_SetLevelVisibilityEnabled Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetBossRushFieldCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetBossRushFieldCtrl(class AActor* Actor, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetBossRushFieldCtrl");

	Params::ProjectGameInstance_C_BPI_SetBossRushFieldCtrl Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetBossRushFieldCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetBossRushFieldCtrl(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetBossRushFieldCtrl");

	Params::ProjectGameInstance_C_BPI_GetBossRushFieldCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_AddEncountAreaList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountArea                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_AddEncountAreaList(class AActor* EncountArea, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_AddEncountAreaList");

	Params::ProjectGameInstance_C_BPI_AddEncountAreaList Parms{};

	Parms.EncountArea = EncountArea;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_RemoveEncountAreaList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           EncountArea                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_RemoveEncountAreaList(class AActor* EncountArea, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_RemoveEncountAreaList");

	Params::ProjectGameInstance_C_BPI_RemoveEncountAreaList Parms{};

	Parms.EncountArea = EncountArea;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetOptionFieldBrightnessCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetOptionFieldBrightnessCtrl(class UActorComponent** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetOptionFieldBrightnessCtrl");

	Params::ProjectGameInstance_C_BPI_GetOptionFieldBrightnessCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IgnoreEstomaEffectPause
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IgnoreEstomaEffectPause(bool Ignore, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IgnoreEstomaEffectPause");

	Params::ProjectGameInstance_C_BPI_IgnoreEstomaEffectPause Parms{};

	Parms.Ignore = Ignore;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapTopCameraOnStartTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapTopCameraOnStartTop(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapTopCameraOnStartTop");

	Params::ProjectGameInstance_C_BPI_MapTopCameraOnStartTop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MapTopCameraOnFinishTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_MapTopCameraOnFinishTop(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MapTopCameraOnFinishTop");

	Params::ProjectGameInstance_C_BPI_MapTopCameraOnFinishTop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_UpdateOptionFieldBrightness
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_UpdateOptionFieldBrightness(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_UpdateOptionFieldBrightness");

	Params::ProjectGameInstance_C_BPI_UpdateOptionFieldBrightness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckAfterLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AfterLoaded                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckAfterLoaded(bool* AfterLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckAfterLoaded");

	Params::ProjectGameInstance_C_BPI_CheckAfterLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AfterLoaded != nullptr)
		*AfterLoaded = Parms.AfterLoaded;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckHide_WhenBattleOrEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckHide_WhenBattleOrEvent(bool* Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckHide_WhenBattleOrEvent");

	Params::ProjectGameInstance_C_BPI_CheckHide_WhenBattleOrEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hide != nullptr)
		*Hide = Parms.Hide;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckAgratField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Inside                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckAgratField(bool* Inside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckAgratField");

	Params::ProjectGameInstance_C_BPI_CheckAgratField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inside != nullptr)
		*Inside = Parms.Inside;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetAgratField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Inside                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetAgratField(bool Inside, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetAgratField");

	Params::ProjectGameInstance_C_BPI_SetAgratField Parms{};

	Parms.Inside = Inside;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_GetBattleMain
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_GetBattleMain(class AActor** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_GetBattleMain");

	Params::ProjectGameInstance_C_BI_GetBattleMain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_GetCharaTable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_GetCharaTable(class UObject** Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_GetCharaTable");

	Params::ProjectGameInstance_C_BI_GetCharaTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Instance != nullptr)
		*Instance = Parms.Instance;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetScreenFadeWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetScreenFadeWidget(class UObject** Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetScreenFadeWidget");

	Params::ProjectGameInstance_C_BPI_GetScreenFadeWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Obj != nullptr)
		*Obj = Parms.Obj;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetUIManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UProjectUIManager*                Param_UIManager                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetUIManager(class UProjectUIManager** Param_UIManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetUIManager");

	Params::ProjectGameInstance_C_BPI_GetUIManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_UIManager != nullptr)
		*Param_UIManager = Parms.Param_UIManager;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetCommonWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_CommonWindowCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetCommonWindowCtrl(TScriptInterface<class IBPI_CommonWindowCtrl_C>* OutActor, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetCommonWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetCommonWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMsgCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMsgCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMsgCtrl");

	Params::ProjectGameInstance_C_BPI_GetMsgCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetCommonHelpWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_CommonHelpWindowCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetCommonHelpWindowCtrl(TScriptInterface<class IBPI_CommonHelpWindowCtrl_C>* OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetCommonHelpWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetCommonHelpWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetDialogWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_DialogCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetDialogWindowCtrl(TScriptInterface<class IBPI_DialogCtrl_C>* OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetDialogWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetDialogWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetInfoWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_InfoWindowCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetInfoWindowCtrl(TScriptInterface<class IBPI_InfoWindowCtrl_C>* OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetInfoWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetInfoWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapCharaPanelCtrlUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_MapCharaPanelCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetMapCharaPanelCtrlUI(TScriptInterface<class IBPI_MapCharaPanelCtrl_C>* OutActor, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapCharaPanelCtrlUI");

	Params::ProjectGameInstance_C_BPI_GetMapCharaPanelCtrlUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetItemWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_ItemWindowCtrl_C>OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetItemWindowCtrl(TScriptInterface<class IBPI_ItemWindowCtrl_C>* OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetItemWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetItemWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_MoonAgeCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_MoonAgeCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_MoonAgeCtrl");

	Params::ProjectGameInstance_C_BPI_MoonAgeCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CategoryWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_CategoryWindowCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CategoryWindowCtrl");

	Params::ProjectGameInstance_C_BPI_CategoryWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_ScreeTransitionCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_ScreeTransitionCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_ScreeTransitionCtrl");

	Params::ProjectGameInstance_C_BPI_ScreeTransitionCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_LocationWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_LocationWindowCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_LocationWindowCtrl");

	Params::ProjectGameInstance_C_BPI_LocationWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMiitsuWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMiitsuWindowCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMiitsuWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetMiitsuWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetButtonHelpCtrl2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetButtonHelpCtrl2(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetButtonHelpCtrl2");

	Params::ProjectGameInstance_C_BPI_GetButtonHelpCtrl2 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetTutorialWIndowCtrl2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetTutorialWIndowCtrl2(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetTutorialWIndowCtrl2");

	Params::ProjectGameInstance_C_BPI_GetTutorialWIndowCtrl2 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetSortWindowCtrl2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetSortWindowCtrl2(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetSortWindowCtrl2");

	Params::ProjectGameInstance_C_BPI_GetSortWindowCtrl2 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMakkaWindowCtrl2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMakkaWindowCtrl2(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMakkaWindowCtrl2");

	Params::ProjectGameInstance_C_BPI_GetMakkaWindowCtrl2 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetSkillSearchWindowCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetSkillSearchWindowCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetSkillSearchWindowCtrl");

	Params::ProjectGameInstance_C_BPI_GetSkillSearchWindowCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMagatsuhiGaugeCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMagatsuhiGaugeCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMagatsuhiGaugeCtrl");

	Params::ProjectGameInstance_C_BPI_GetMagatsuhiGaugeCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetDLCAnnouncer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetDLCAnnouncer(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetDLCAnnouncer");

	Params::ProjectGameInstance_C_BPI_GetDLCAnnouncer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetCommonUI_EventCtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OutActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetCommonUI_EventCtrl(class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetCommonUI_EventCtrl");

	Params::ProjectGameInstance_C_BPI_GetCommonUI_EventCtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsSpawnedUiCtrlActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Complete                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsSpawnedUiCtrlActors(bool* Complete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsSpawnedUiCtrlActors");

	Params::ProjectGameInstance_C_BPI_IsSpawnedUiCtrlActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Complete != nullptr)
		*Complete = Parms.Complete;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetGamePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APawn*>                    List                                                   (Parm, OutParm)

void UProjectGameInstance_C::BPI_GetGamePlayer(TArray<class APawn*>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetGamePlayer");

	Params::ProjectGameInstance_C_BPI_GetGamePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetDeactiveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, struct FTransform* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetDeactiveLocation");

	Params::ProjectGameInstance_C_BPI_GetDeactiveLocation Parms{};

	Parms.PlayerType = PlayerType;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_GetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetActive");

	Params::ProjectGameInstance_C_BPI_GetActive Parms{};

	Parms.PlayerType = PlayerType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetContlrolActivePawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerBase_C*                    Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PLAYER_MANAGER_TYPE                   Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetContlrolActivePawn(class APlayerBase_C** Pawn, E_PLAYER_MANAGER_TYPE* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetContlrolActivePawn");

	Params::ProjectGameInstance_C_BPI_GetContlrolActivePawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BI_GetDevilAssetTable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BI_GetDevilAssetTable(class UObject** Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BI_GetDevilAssetTable");

	Params::ProjectGameInstance_C_BI_GetDevilAssetTable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Instance != nullptr)
		*Instance = Parms.Instance;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetMapUICtrl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           MapUICommon                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetMapUICtrl(class AActor** MapUICommon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetMapUICtrl");

	Params::ProjectGameInstance_C_BPI_GetMapUICtrl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapUICommon != nullptr)
		*MapUICommon = Parms.MapUICommon;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_IsScreenShot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_IsScreenShot(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_IsScreenShot");

	Params::ProjectGameInstance_C_BPI_IsScreenShot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEncountScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_EncountScene                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetEncountScene(class AActor* Param_EncountScene, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEncountScene");

	Params::ProjectGameInstance_C_BPI_SetEncountScene Parms{};

	Parms.Param_EncountScene = Param_EncountScene;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetEncountScene
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_EncountScene                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetEncountScene(class AActor** Param_EncountScene)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetEncountScene");

	Params::ProjectGameInstance_C_BPI_GetEncountScene Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EncountScene != nullptr)
		*Param_EncountScene = Parms.Param_EncountScene;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetDaathLightType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDaathTypeList                          LightType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetDaathLightType(EDaathTypeList* LightType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetDaathLightType");

	Params::ProjectGameInstance_C_BPI_GetDaathLightType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LightType != nullptr)
		*LightType = Parms.LightType;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_CheckLoadMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LoadMap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_CheckLoadMap(bool* LoadMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_CheckLoadMap");

	Params::ProjectGameInstance_C_BPI_CheckLoadMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LoadMap != nullptr)
		*LoadMap = Parms.LoadMap;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetDlcCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDlcTableData*                    DlcTableData                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetDlcCheck(class UDlcTableData** DlcTableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetDlcCheck");

	Params::ProjectGameInstance_C_BPI_GetDlcCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DlcTableData != nullptr)
		*DlcTableData = Parms.DlcTableData;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetEventBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AEventBase*                       Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UProjectGameInstance_C::BPI_GetEventBase(class AEventBase** Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetEventBase");

	Params::ProjectGameInstance_C_BPI_GetEventBase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_SetEventBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AEventBase*                       Base                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UProjectGameInstance_C::BPI_SetEventBase(class AEventBase* Base, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_SetEventBase");

	Params::ProjectGameInstance_C_BPI_SetEventBase Parms{};

	Parms.Base = Base;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function ProjectGameInstance.ProjectGameInstance_C.BPI_GetPreloadLevelList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<struct FPrimaryAssetId>          Param_PreloadLevelList                                 (Parm, OutParm)

void UProjectGameInstance_C::BPI_GetPreloadLevelList(TArray<struct FPrimaryAssetId>* Param_PreloadLevelList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectGameInstance_C", "BPI_GetPreloadLevelList");

	Params::ProjectGameInstance_C_BPI_GetPreloadLevelList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PreloadLevelList != nullptr)
		*Param_PreloadLevelList = std::move(Parms.Param_PreloadLevelList);
}

}

