#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleSkillActionBase

#include "Basic.hpp"

#include "BattleSkillActionBase_classes.hpp"
#include "BattleSkillActionBase_parameters.hpp"


namespace SDK
{

// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Introduction__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Introduction__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Introduction__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Hit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Hit__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Hit__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Critical__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Critical__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Critical__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Counter__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Counter__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Counter__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Dead__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Dead__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Dead__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Idle__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Idle__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Idle__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Finish__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Finish__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Finish__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_Finalize__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_Finalize__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_Finalize__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_UpdateState__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Evt_UpdateState__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_UpdateState__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_SkillPerformance__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Evt_SkillPerformance__DelegateSignature(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_SkillPerformance__DelegateSignature");

	Params::BattleSkillActionBase_C_Evt_SkillPerformance__DelegateSignature Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.EvT_ItemIntroduction__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::EvT_ItemIntroduction__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "EvT_ItemIntroduction__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ExecuteUbergraph_BattleSkillActionBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ExecuteUbergraph_BattleSkillActionBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ExecuteUbergraph_BattleSkillActionBase");

	Params::BattleSkillActionBase_C_ExecuteUbergraph_BattleSkillActionBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_FirstSetting
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::BI_FirstSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_FirstSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.End_HitStop
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::End_HitStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "End_HitStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_BeginHitStop
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::BI_BeginHitStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_BeginHitStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_AddPointLight_Auto
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   SkillLightData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BI_AddPointLight_Auto(const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& SkillLightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_AddPointLight_Auto");

	Params::BattleSkillActionBase_C_BI_AddPointLight_Auto Parms{};

	Parms.SkillLightData = std::move(SkillLightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_BlinkHitLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BI_BlinkHitLight(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_BlinkHitLight");

	Params::BattleSkillActionBase_C_BI_BlinkHitLight Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_CallEvt_SkillPerformance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BI_CallEvt_SkillPerformance(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_CallEvt_SkillPerformance");

	Params::BattleSkillActionBase_C_BI_CallEvt_SkillPerformance Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Begin_HitStop
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Begin_HitStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Begin_HitStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ReceiveEndPlay");

	Params::BattleSkillActionBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Event_CallHit
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Event_CallHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Event_CallHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_UpdateState
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_UpdateState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Finalize
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Finalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Finish
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Idle
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Dead
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Dead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Dead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Counter
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Counter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Counter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Critical
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Critical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Critical");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Hit
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Hit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Hit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Seq_Introduction
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Seq_Introduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Seq_Introduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ReceiveTick");

	Params::BattleSkillActionBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABattleSkillActionBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Evt_ApplyHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HitEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyBlur                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartBlurAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndBlurAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurStartKeepSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurLerpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleMain_C>MainWork                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Evt_ApplyHit(int32 WaitCommandIndex, int32 HitEffect, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotRandMin, float RotRandMax, bool ApplyBlur, float StartBlurAmount, float EndBlurAmount, float BlurStartKeepSec, float BlurLerpSec, TScriptInterface<class IBPI_BattleMain_C> MainWork, TScriptInterface<class IBPI_BattleParty_C> PartySystem, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Evt_ApplyHit");

	Params::BattleSkillActionBase_C_Evt_ApplyHit Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.HitEffect = HitEffect;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotRandMin = RotRandMin;
	Parms.RotRandMax = RotRandMax;
	Parms.ApplyBlur = ApplyBlur;
	Parms.StartBlurAmount = StartBlurAmount;
	Parms.EndBlurAmount = EndBlurAmount;
	Parms.BlurStartKeepSec = BlurStartKeepSec;
	Parms.BlurLerpSec = BlurLerpSec;
	Parms.MainWork = MainWork;
	Parms.PartySystem = PartySystem;
	Parms.TaskFactory = TaskFactory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.LoadLightFuncMaterials
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::LoadLightFuncMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "LoadLightFuncMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Add Target Party PointLight Impl
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           PartyIndex                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Add_Target_Party_PointLight_Impl(const TArray<int32>& PartyIndex, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Add Target Party PointLight Impl");

	Params::BattleSkillActionBase_C_Add_Target_Party_PointLight_Impl Parms{};

	Parms.PartyIndex = std::move(PartyIndex);
	Parms.LightData = std::move(LightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.TargetPointLightAutoUpdate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::TargetPointLightAutoUpdate(int32 GroupID, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "TargetPointLightAutoUpdate");

	Params::BattleSkillActionBase_C_TargetPointLightAutoUpdate Parms{};

	Parms.GroupID = GroupID;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActorPointLightAutoUpdate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ActorPointLightAutoUpdate(int32 GroupID, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActorPointLightAutoUpdate");

	Params::BattleSkillActionBase_C_ActorPointLightAutoUpdate Parms{};

	Parms.GroupID = GroupID;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BlinkHitLight_Impl
// (BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::BlinkHitLight_Impl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BlinkHitLight_Impl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Add Target Point Light Impl
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           PartyIndex                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Add_Target_Point_Light_Impl(const TArray<int32>& PartyIndex, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Add Target Point Light Impl");

	Params::BattleSkillActionBase_C_Add_Target_Point_Light_Impl Parms{};

	Parms.PartyIndex = std::move(PartyIndex);
	Parms.LightData = std::move(LightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Add Actor Point Light Impl
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           PartyIndex                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Add_Actor_Point_Light_Impl(const TArray<int32>& PartyIndex, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Add Actor Point Light Impl");

	Params::BattleSkillActionBase_C_Add_Actor_Point_Light_Impl Parms{};

	Parms.PartyIndex = std::move(PartyIndex);
	Parms.LightData = std::move(LightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OnLoaded_DAB82F5B47E17575A75C0C8219BE5104
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::OnLoaded_DAB82F5B47E17575A75C0C8219BE5104(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OnLoaded_DAB82F5B47E17575A75C0C8219BE5104");

	Params::BattleSkillActionBase_C_OnLoaded_DAB82F5B47E17575A75C0C8219BE5104 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.TargetLightUpdater__UpdateFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::TargetLightUpdater__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "TargetLightUpdater__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.TargetLightUpdater__FinishedFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::TargetLightUpdater__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "TargetLightUpdater__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActorLightUpdater__UpdateFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::ActorLightUpdater__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActorLightUpdater__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActorLightUpdater__FinishedFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::ActorLightUpdater__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActorLightUpdater__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.LightBlinker__UpdateFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::LightBlinker__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "LightBlinker__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.LightBlinker__FinishedFunc
// (BlueprintEvent)

void ABattleSkillActionBase_C::LightBlinker__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "LightBlinker__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CallEvent
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CallEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CallEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IntroductionFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::IntroductionFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IntroductionFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.HitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::HitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "HitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CriticalFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CriticalFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CriticalFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CounterFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CounterFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CounterFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.DeadFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::DeadFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "DeadFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorSetMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMotionFinished                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorSetMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID MotionID, bool WaitMotionFinished, float StartPosition, bool IsPlayOneScale, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorSetMotion");

	Params::BattleSkillActionBase_C_Com_ActorSetMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.MotionID = MotionID;
	Parms.WaitMotionFinished = WaitMotionFinished;
	Parms.StartPosition = StartPosition;
	Parms.IsPlayOneScale = IsPlayOneScale;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Initialize
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsValidCommandIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsValidCommandIndex(int32 Param_Index, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsValidCommandIndex");

	Params::BattleSkillActionBase_C_IsValidCommandIndex Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddComandID
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddComandID(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddComandID");

	Params::BattleSkillActionBase_C_AddComandID Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_End
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetCamActorRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    WaitHokan                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetCamActorRelative(int32 WaitCommandIndex, const class FString& CameraName, bool WaitHokan, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetCamActorRelative");

	Params::BattleSkillActionBase_C_Com_SetCamActorRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.WaitHokan = WaitHokan;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetComandID
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetComandID(int32 Param_Index, int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetComandID");

	Params::BattleSkillActionBase_C_GetComandID Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectActor(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, bool IsIgnoreSideScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectActor");

	Params::BattleSkillActionBase_C_Com_PlayEffectActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectTarget(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, bool HideInReflection, bool HideInAbsorbAndBlock, bool IsIgnoreSideScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectTarget");

	Params::BattleSkillActionBase_C_Com_PlayEffectTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_WaitTime
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_WaitTime(int32 WaitCommandIndex, float DeltaTime, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_WaitTime");

	Params::BattleSkillActionBase_C_Com_WaitTime Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IdleFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::IdleFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IdleFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckIntroduction
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckIntroduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckIntroduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CamShake
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CamShakeTableIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultiHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCheckHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CamShake(int32 WaitCommandIndex, int32 CamShakeTableIndex, float ShakeScale, bool IsMultiHit, bool IsCheckHit, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CamShake");

	Params::BattleSkillActionBase_C_Com_CamShake Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CamShakeTableIndex = CamShakeTableIndex;
	Parms.ShakeScale = ShakeScale;
	Parms.IsMultiHit = IsMultiHit;
	Parms.IsCheckHit = IsCheckHit;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_RadialBlurTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_RadialBlurTarget(int32 WaitCommandIndex, const class FString& SocketName, const struct FVector& Offset, float DamageValue, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, bool HideInReflection, bool HideInAbsorbAndBlock, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_RadialBlurTarget");

	Params::BattleSkillActionBase_C_Com_RadialBlurTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Offset = std::move(Offset);
	Parms.DamageValue = DamageValue;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_RadialBlurOff
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_RadialBlurOff(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_RadialBlurOff");

	Params::BattleSkillActionBase_C_Com_RadialBlurOff Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetBeforCommandIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetComIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetBeforCommandIndex(int32* RetComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetBeforCommandIndex");

	Params::BattleSkillActionBase_C_GetBeforCommandIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetComIndex != nullptr)
		*RetComIndex = Parms.RetComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckHit
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_DeadTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_DeadTarget(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_DeadTarget");

	Params::BattleSkillActionBase_C_Com_DeadTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.checkDead
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "checkDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.FinishFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::FinishFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "FinishFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsFinished(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsFinished");

	Params::BattleSkillActionBase_C_IsFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckCounter
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AttackMoveActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AttackMoveActor(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AttackMoveActor");

	Params::BattleSkillActionBase_C_Com_AttackMoveActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetCamTargetRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    WaitHokan                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsConsiderActorLocation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ResetCharaParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetCamTargetRelative(int32 WaitCommandIndex, const class FString& CameraName, bool WaitHokan, bool IsConsiderActorLocation, bool ResetCharaParticle, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetCamTargetRelative");

	Params::BattleSkillActionBase_C_Com_SetCamTargetRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.WaitHokan = WaitHokan;
	Parms.IsConsiderActorLocation = IsConsiderActorLocation;
	Parms.ResetCharaParticle = ResetCharaParticle;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsUnitMotionEndAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsUnitMotionEndAll(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsUnitMotionEndAll");

	Params::BattleSkillActionBase_C_IsUnitMotionEndAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MessageShowSkillName
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MessageShowSkillName(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MessageShowSkillName");

	Params::BattleSkillActionBase_C_Com_MessageShowSkillName Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MessageHide
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MessageHide(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MessageHide");

	Params::BattleSkillActionBase_C_Com_MessageHide Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.FinalizeFunc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::FinalizeFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "FinalizeFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckFinish
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyHit_One
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkillActionTargetInfo           InTarget                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   HitEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TransPrio                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyBlur                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartBlurAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndBlurAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurStartKeepSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurLerpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleMain_C>MainWork                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsReflection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           WaitTaskList2                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           RetComIDs                                              (Parm, OutParm)
// TArray<int32>                           RetNecessaryWaitComID                                  (Parm, OutParm)

void ABattleSkillActionBase_C::ApplyHit_One(const struct FSkillActionTargetInfo& InTarget, int32 HitEffect, TArray<int32>& WaitTaskList, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TransPrio, float RotRandMin, float RotRandMax, bool ApplyBlur, float StartBlurAmount, float EndBlurAmount, float BlurStartKeepSec, float BlurLerpSec, TScriptInterface<class IBPI_BattleMain_C> MainWork, TScriptInterface<class IBPI_BattleParty_C> PartySystem, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, bool IsReflection, TArray<int32>& WaitTaskList2, TArray<int32>* RetComIDs, TArray<int32>* RetNecessaryWaitComID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyHit_One");

	Params::BattleSkillActionBase_C_ApplyHit_One Parms{};

	Parms.InTarget = std::move(InTarget);
	Parms.HitEffect = HitEffect;
	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TransPrio = TransPrio;
	Parms.RotRandMin = RotRandMin;
	Parms.RotRandMax = RotRandMax;
	Parms.ApplyBlur = ApplyBlur;
	Parms.StartBlurAmount = StartBlurAmount;
	Parms.EndBlurAmount = EndBlurAmount;
	Parms.BlurStartKeepSec = BlurStartKeepSec;
	Parms.BlurLerpSec = BlurLerpSec;
	Parms.MainWork = MainWork;
	Parms.PartySystem = PartySystem;
	Parms.TaskFactory = TaskFactory;
	Parms.IsReflection = IsReflection;
	Parms.WaitTaskList2 = std::move(WaitTaskList2);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	WaitTaskList2 = std::move(Parms.WaitTaskList2);

	if (RetComIDs != nullptr)
		*RetComIDs = std::move(Parms.RetComIDs);

	if (RetNecessaryWaitComID != nullptr)
		*RetNecessaryWaitComID = std::move(Parms.RetNecessaryWaitComID);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ApplyHit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HitEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyBlur                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartBlurAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndBlurAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurStartKeepSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurLerpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ApplyHit(int32 WaitCommandIndex, int32 HitEffect, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, bool ApplyBlur, float StartBlurAmount, float EndBlurAmount, float BlurStartKeepSec, float BlurLerpSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ApplyHit");

	Params::BattleSkillActionBase_C_Com_ApplyHit Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.HitEffect = HitEffect;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;
	Parms.ApplyBlur = ApplyBlur;
	Parms.StartBlurAmount = StartBlurAmount;
	Parms.EndBlurAmount = EndBlurAmount;
	Parms.BlurStartKeepSec = BlurStartKeepSec;
	Parms.BlurLerpSec = BlurLerpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffect
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransforn                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RorYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffect(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransforn, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RorYawRandMax, bool IsIgnoreSideScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffect");

	Params::BattleSkillActionBase_C_Com_PlayEffect Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransforn = std::move(RelativeTransforn);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RorYawRandMax = RorYawRandMax;
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyStateFunc
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ApplyStateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyStateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyUnitState
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ApplyUnitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyUnitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckApplyUnitState
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckApplyUnitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckApplyUnitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.HitPrevFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::HitPrevFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "HitPrevFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_ApplyHitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::AnimNotify_ApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_ApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CallApplyHitFunc
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CallApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CallApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ReserveApplyHit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ReserveApplyHit(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ReserveApplyHit");

	Params::BattleSkillActionBase_C_Com_ReserveApplyHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyPartyPanel
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ApplyPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyPartyPanel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.FindUnit
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharaBase_C*                     Unit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::FindUnit(int32 PartyIndex, class ACharaBase_C** Unit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "FindUnit");

	Params::BattleSkillActionBase_C_FindUnit Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Unit != nullptr)
		*Unit = Parms.Unit;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectPair
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_EFFECT_TYPE                       EfffectType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_EFFECT_FORM                       EffectForm                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ActorSocketName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       ActorSocketRelative                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FString                           TargetSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   BulletSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BulletTangentDeg                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ExtensionDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    KeepBallEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectID                                               (Parm, OutParm)

void ABattleSkillActionBase_C::Com_PlayEffectPair(int32 WaitCommandIndex, int32 PlayIndex, float LifeSec, int32 TranslucencyPriority, E_BTL_EFFECT_TYPE EfffectType, E_BTL_EFFECT_FORM EffectForm, const class FString& ActorSocketName, const struct FTransform& ActorSocketRelative, const class FString& TargetSocketName, float BulletSpeed, int32 BulletTangentDeg, float Gravity, float ExtensionDistance, bool HideInReflection, bool HideInAbsorbAndBlock, bool KeepBallEffect, int32* ComIndex, TArray<int32>* EffectID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectPair");

	Params::BattleSkillActionBase_C_Com_PlayEffectPair Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.EfffectType = EfffectType;
	Parms.EffectForm = EffectForm;
	Parms.ActorSocketName = std::move(ActorSocketName);
	Parms.ActorSocketRelative = std::move(ActorSocketRelative);
	Parms.TargetSocketName = std::move(TargetSocketName);
	Parms.BulletSpeed = BulletSpeed;
	Parms.BulletTangentDeg = BulletTangentDeg;
	Parms.Gravity = Gravity;
	Parms.ExtensionDistance = ExtensionDistance;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;
	Parms.KeepBallEffect = KeepBallEffect;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;

	if (EffectID != nullptr)
		*EffectID = std::move(Parms.EffectID);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetMainWork
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetMainWork(TScriptInterface<class IBPI_BattleMain_C>* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetMainWork");

	Params::BattleSkillActionBase_C_BIGetMainWork Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyDamageMotion
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MotionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ApplyDamageMotion(TArray<int32>& WaitTaskList, int32 PartyIndex, TScriptInterface<class IBPI_BattleParty_C> PartySystem, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, int32 MotionType, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyDamageMotion");

	Params::BattleSkillActionBase_C_ApplyDamageMotion Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.PartyIndex = PartyIndex;
	Parms.PartySystem = PartySystem;
	Parms.TaskFactory = TaskFactory;
	Parms.MotionType = MotionType;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorAction
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_ACTION_TYPE                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorAction(int32 WaitCommandIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorAction");

	Params::BattleSkillActionBase_C_Com_ActorAction Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Action = Action;
	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetCamOriginRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    WaitHokan                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetCamOriginRelative(int32 WaitCommandIndex, const class FString& CameraName, bool WaitHokan, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetCamOriginRelative");

	Params::BattleSkillActionBase_C_Com_SetCamOriginRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.WaitHokan = WaitHokan;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Finish
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckAnimNotify
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckAnimNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckAnimNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_DamageMotion
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitComIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectWaitPecIDs                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EnableShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AnimNotify_DamageMotion(int32 WaitComIndex, TArray<int32>& EffectWaitPecIDs, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, bool EnableShake, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_DamageMotion");

	Params::BattleSkillActionBase_C_AnimNotify_DamageMotion Parms{};

	Parms.WaitComIndex = WaitComIndex;
	Parms.EffectWaitPecIDs = std::move(EffectWaitPecIDs);
	Parms.TaskFactory = TaskFactory;
	Parms.EnableShake = EnableShake;

	UObject::ProcessEvent(Func, &Parms);

	EffectWaitPecIDs = std::move(Parms.EffectWaitPecIDs);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_Effect
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitComIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayEffectID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPrio                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleMain_C>MainWork                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           WaitPecIDs                                             (Parm, OutParm)

void ABattleSkillActionBase_C::AnimNotify_Effect(int32 WaitComIndex, int32 PlayEffectID, int32 TranslucencyPrio, const struct FTransform& OffsetTransform, TScriptInterface<class IBPI_BattleMain_C> MainWork, TScriptInterface<class IBPI_BattleParty_C> PartySystem, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, int32* ComIndex, TArray<int32>* WaitPecIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_Effect");

	Params::BattleSkillActionBase_C_AnimNotify_Effect Parms{};

	Parms.WaitComIndex = WaitComIndex;
	Parms.PlayEffectID = PlayEffectID;
	Parms.TranslucencyPrio = TranslucencyPrio;
	Parms.OffsetTransform = std::move(OffsetTransform);
	Parms.MainWork = MainWork;
	Parms.PartySystem = PartySystem;
	Parms.TaskFactory = TaskFactory;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;

	if (WaitPecIDs != nullptr)
		*WaitPecIDs = std::move(Parms.WaitPecIDs);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_Reset
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::AnimNotify_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_IsHit
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<E_BTL_REFLECT_RES_TYPE>          NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsHit                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::AnimNotify_IsHit(TArray<E_BTL_REFLECT_RES_TYPE>& NewParam, bool* IsHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_IsHit");

	Params::BattleSkillActionBase_C_AnimNotify_IsHit Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (IsHit != nullptr)
		*IsHit = Parms.IsHit;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimNotifyEffect
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EffectID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPrio                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimNotifyEffect(int32 EffectID, int32 TranslucencyPrio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimNotifyEffect");

	Params::BattleSkillActionBase_C_Com_SetAnimNotifyEffect Parms{};

	Parms.EffectID = EffectID;
	Parms.TranslucencyPrio = TranslucencyPrio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetBiAttackWaitTime
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetBiAttackWaitTime(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetBiAttackWaitTime");

	Params::BattleSkillActionBase_C_Com_SetBiAttackWaitTime Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetTaskFactory
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleTaskFactory_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetTaskFactory(TScriptInterface<class IBPI_BattleTaskFactory_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetTaskFactory");

	Params::BattleSkillActionBase_C_BIGetTaskFactory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPartySystem
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleParty_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPartySystem(TScriptInterface<class IBPI_BattleParty_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPartySystem");

	Params::BattleSkillActionBase_C_BIGetPartySystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddActorPointLight
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Com_AddActorPointLight(class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, bool IsCharaOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddActorPointLight");

	Params::BattleSkillActionBase_C_Com_AddActorPointLight Parms{};

	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_UpdateActorPointLight
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRadius                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LightFalloffExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_UpdateActorPointLight(int32 GroupID, const struct FLinearColor& Color, float Intensity, float AttenuationRadius, float LightFalloffExponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_UpdateActorPointLight");

	Params::BattleSkillActionBase_C_Com_UpdateActorPointLight Parms{};

	Parms.GroupID = GroupID;
	Parms.Color = std::move(Color);
	Parms.Intensity = Intensity;
	Parms.AttenuationRadius = AttenuationRadius;
	Parms.LightFalloffExponent = LightFalloffExponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddTargetPointLight
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSocket                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Com_AddTargetPointLight(class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSocket, bool HideInReflection, bool HideInAbsorbAndBlock, bool IsCharaOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddTargetPointLight");

	Params::BattleSkillActionBase_C_Com_AddTargetPointLight Parms{};

	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSocket = IsFollowSocket;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_UpdateTargetPointLight
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttenuationRadius                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LightFalloutExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_UpdateTargetPointLight(int32 GroupID, const struct FLinearColor& Color, float Intensity, float AttenuationRadius, float LightFalloutExponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_UpdateTargetPointLight");

	Params::BattleSkillActionBase_C_Com_UpdateTargetPointLight Parms{};

	Parms.GroupID = GroupID;
	Parms.Color = std::move(Color);
	Parms.Intensity = Intensity;
	Parms.AttenuationRadius = AttenuationRadius;
	Parms.LightFalloutExponent = LightFalloutExponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.InitAllPointLight
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::InitAllPointLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "InitAllPointLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OnApplyHitFunc
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::OnApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OnApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_InitActorPointLight
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_InitActorPointLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_InitActorPointLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.InitPointLight
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASkillActionPointLight_C*> PointLights                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::InitPointLight(TArray<class ASkillActionPointLight_C*>& PointLights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "InitPointLight");

	Params::BattleSkillActionBase_C_InitPointLight Parms{};

	Parms.PointLights = std::move(PointLights);

	UObject::ProcessEvent(Func, &Parms);

	PointLights = std::move(Parms.PointLights);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_InitTargetPointLight
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_InitTargetPointLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_InitTargetPointLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UpdatePointLight
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASkillActionPointLight_C*> LightArray                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FLinearColor                     NewLightColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewIntensity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewRadius                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewLightFalloffExponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::UpdatePointLight(TArray<class ASkillActionPointLight_C*>& LightArray, const struct FLinearColor& NewLightColor, float NewIntensity, float NewRadius, float NewLightFalloffExponent, int32 GroupID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UpdatePointLight");

	Params::BattleSkillActionBase_C_UpdatePointLight Parms{};

	Parms.LightArray = std::move(LightArray);
	Parms.NewLightColor = std::move(NewLightColor);
	Parms.NewIntensity = NewIntensity;
	Parms.NewRadius = NewRadius;
	Parms.NewLightFalloffExponent = NewLightFalloffExponent;
	Parms.GroupID = GroupID;

	UObject::ProcessEvent(Func, &Parms);

	LightArray = std::move(Parms.LightArray);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddPointLight
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ASkillActionPointLight_C*> TargetArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UMaterialInterface*               LightFuncMaterial                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFollowSocket                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLightForBlink                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPartyCentor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsMagatsuhi                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckSocketExist                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ASkillActionPointLight_C*         AddedLight                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddPointLight(class FName SocketName, int32 PartyIndex, TArray<class ASkillActionPointLight_C*>& TargetArray, class UMaterialInterface* LightFuncMaterial, bool IsCastShadow, const struct FVector& OffsetPos, bool IsFollowSocket, int32 GroupID, bool IsLightForBlink, bool IsPartyCentor, bool IsMagatsuhi, bool CheckSocketExist, class ASkillActionPointLight_C** AddedLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddPointLight");

	Params::BattleSkillActionBase_C_AddPointLight Parms{};

	Parms.SocketName = SocketName;
	Parms.PartyIndex = PartyIndex;
	Parms.TargetArray = std::move(TargetArray);
	Parms.LightFuncMaterial = LightFuncMaterial;
	Parms.IsCastShadow = IsCastShadow;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.IsFollowSocket = IsFollowSocket;
	Parms.GroupID = GroupID;
	Parms.IsLightForBlink = IsLightForBlink;
	Parms.IsPartyCentor = IsPartyCentor;
	Parms.IsMagatsuhi = IsMagatsuhi;
	Parms.CheckSocketExist = CheckSocketExist;

	UObject::ProcessEvent(Func, &Parms);

	TargetArray = std::move(Parms.TargetArray);

	if (AddedLight != nullptr)
		*AddedLight = Parms.AddedLight;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PutOnRadialForce
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PutOnRadialForce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PutOnRadialForce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActivateRadialForce
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ActivateRadialForce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActivateRadialForce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyDrain
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           WaitTaskList2                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           RetComIDs                                              (Parm, OutParm)

void ABattleSkillActionBase_C::ApplyDrain(TArray<int32>& WaitTaskList, TArray<int32>& WaitTaskList2, TArray<int32>* RetComIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyDrain");

	Params::BattleSkillActionBase_C_ApplyDrain Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.WaitTaskList2 = std::move(WaitTaskList2);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	WaitTaskList2 = std::move(Parms.WaitTaskList2);

	if (RetComIDs != nullptr)
		*RetComIDs = std::move(Parms.RetComIDs);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Skill Info Mess Task
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_SKILL_INFO_MESS_TIMING                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHandleAllSkills                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   TaSKID                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Skill_Info_Mess_Task(TArray<int32>& WaitTaskList, E_SKILL_INFO_MESS_TIMING Timing, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, bool IsHandleAllSkills, int32* TaSKID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Skill Info Mess Task");

	Params::BattleSkillActionBase_C_Skill_Info_Mess_Task Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.Timing = Timing;
	Parms.TaskFactory = TaskFactory;
	Parms.IsHandleAllSkills = IsHandleAllSkills;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (TaSKID != nullptr)
		*TaSKID = Parms.TaSKID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SkillMasterEffectTask
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           ComIndex                                               (Parm, OutParm)

void ABattleSkillActionBase_C::SkillMasterEffectTask(TArray<int32>& WaitTaskList, TArray<int32>* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SkillMasterEffectTask");

	Params::BattleSkillActionBase_C_SkillMasterEffectTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (ComIndex != nullptr)
		*ComIndex = std::move(Parms.ComIndex);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ReservePerform_OnApplyHitFunc
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitCommandList                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::ReservePerform_OnApplyHitFunc(TArray<int32>& WaitCommandList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ReservePerform_OnApplyHitFunc");

	Params::BattleSkillActionBase_C_ReservePerform_OnApplyHitFunc Parms{};

	Parms.WaitCommandList = std::move(WaitCommandList);

	UObject::ProcessEvent(Func, &Parms);

	WaitCommandList = std::move(Parms.WaitCommandList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Supervise_OnApplyHitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Supervise_OnApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Supervise_OnApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CallMainAction
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CallMainAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CallMainAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcAvoidDirection
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_AVOID_DIRECTION                       RetVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcAvoidDirection(int32 TargetIndex, E_AVOID_DIRECTION* RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcAvoidDirection");

	Params::BattleSkillActionBase_C_CalcAvoidDirection Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetVal != nullptr)
		*RetVal = Parms.RetVal;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsAnyHit
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsAnyHit(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsAnyHit");

	Params::BattleSkillActionBase_C_IsAnyHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetSound
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleSoundManager_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetSound(TScriptInterface<class IBPI_BattleSoundManager_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetSound");

	Params::BattleSkillActionBase_C_BIGetSound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsBstAny
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsBstAny(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsBstAny");

	Params::BattleSkillActionBase_C_IsBstAny Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamActorRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             OriginTransSocket                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ResetCharaParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamActorRelative(int32 WaitCommandIndex, class UCameraAnimationAsset* Asset, float BlendInTime, float BlendOutTime, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, class FName OriginTransSocket, const struct FTransform& OffsetTrans, bool HaveToCleanUp, bool IsPlayOneScale, bool ResetCharaParticle, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamActorRelative");

	Params::BattleSkillActionBase_C_Com_SetAnimCamActorRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = Asset;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.OriginTransSocket = OriginTransSocket;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.IsPlayOneScale = IsPlayOneScale;
	Parms.ResetCharaParticle = ResetCharaParticle;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamTargetRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             OriginTransSocket                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ResetCharaParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamTargetRelative(int32 WaitCommandIndex, class UCameraAnimationAsset* Asset, float BlendInTime, float BlendOutTime, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, class FName OriginTransSocket, const struct FTransform& OffsetTrans, bool HaveToCleanUp, bool ResetCharaParticle, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamTargetRelative");

	Params::BattleSkillActionBase_C_Com_SetAnimCamTargetRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = Asset;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.OriginTransSocket = OriginTransSocket;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.ResetCharaParticle = ResetCharaParticle;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamOriginRelative
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamOriginRelative(int32 WaitCommandIndex, class UCameraAnimationAsset* Asset, float BlendInTime, float BlendOutTime, const struct FTransform& OffsetTrans, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, bool HaveToCleanUp, bool IsPlayOneScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamOriginRelative");

	Params::BattleSkillActionBase_C_Com_SetAnimCamOriginRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = Asset;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.IsPlayOneScale = IsPlayOneScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.RetrieveHitEffect
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_DAMAGE_HIT_TYPE                   DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CriticalLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAnimNotify                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPlaySkillEffect                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleMain_C>MainWork                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsReflection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSkillActionEffect               SkillEffect                                            (Parm, OutParm)
// bool                                    IsHitStamp                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCritical                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAddCriticalSE                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::RetrieveHitEffect(E_BTL_DAMAGE_HIT_TYPE DamageType, int32 EffectIndex, int32 CriticalLevel, bool IsAnimNotify, bool IsPlaySkillEffect, TScriptInterface<class IBPI_BattleMain_C> MainWork, TScriptInterface<class IBPI_BattleParty_C> PartySystem, bool IsReflection, struct FSkillActionEffect* SkillEffect, bool* IsHitStamp, bool* IsCritical, bool* IsAddCriticalSE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "RetrieveHitEffect");

	Params::BattleSkillActionBase_C_RetrieveHitEffect Parms{};

	Parms.DamageType = DamageType;
	Parms.EffectIndex = EffectIndex;
	Parms.CriticalLevel = CriticalLevel;
	Parms.IsAnimNotify = IsAnimNotify;
	Parms.IsPlaySkillEffect = IsPlaySkillEffect;
	Parms.MainWork = MainWork;
	Parms.PartySystem = PartySystem;
	Parms.IsReflection = IsReflection;

	UObject::ProcessEvent(Func, &Parms);

	if (SkillEffect != nullptr)
		*SkillEffect = std::move(Parms.SkillEffect);

	if (IsHitStamp != nullptr)
		*IsHitStamp = Parms.IsHitStamp;

	if (IsCritical != nullptr)
		*IsCritical = Parms.IsCritical;

	if (IsAddCriticalSE != nullptr)
		*IsAddCriticalSE = Parms.IsAddCriticalSE;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddRandomRoll
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABattleSkillActionBase_C::AddRandomRoll(struct FTransform& InTransform, float Min, float Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddRandomRoll");

	Params::BattleSkillActionBase_C_AddRandomRoll Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.Min = Min;
	Parms.Max = Max;

	UObject::ProcessEvent(Func, &Parms);

	InTransform = std::move(Parms.InTransform);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectActorParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectActorParty(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectActorParty");

	Params::BattleSkillActionBase_C_Com_PlayEffectActorParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetPartyCenter
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Forward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetPartyCenter(int32 PartyIndex, class FName SocketName, TScriptInterface<class IBPI_BattleParty_C> PartySystem, struct FVector* Pos, struct FVector* Normal, struct FVector* Forward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetPartyCenter");

	Params::BattleSkillActionBase_C_GetPartyCenter Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.SocketName = SocketName;
	Parms.PartySystem = PartySystem;

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Forward != nullptr)
		*Forward = std::move(Parms.Forward);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectTargetParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectTargetParty(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectTargetParty");

	Params::BattleSkillActionBase_C_Com_PlayEffectTargetParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CallSkillPerformance
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PerformanceStep                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RemainSec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CallSkillPerformance(int32 WaitCommandIndex, int32 PerformanceStep, float RemainSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CallSkillPerformance");

	Params::BattleSkillActionBase_C_Com_CallSkillPerformance Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PerformanceStep = PerformanceStep;
	Parms.RemainSec = RemainSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetTargetPartyIndex
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Param_Index                                            (Parm, OutParm)

void ABattleSkillActionBase_C::GetTargetPartyIndex(TArray<int32>* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetTargetPartyIndex");

	Params::BattleSkillActionBase_C_GetTargetPartyIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = std::move(Parms.Param_Index);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetTargetCenter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForMagatsuhiSkill                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Forward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DefenseArea                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetTargetCenter(TArray<int32>& PartyIndex, class FName SocketName, TScriptInterface<class IBPI_BattleParty_C> PartySystem, bool ForMagatsuhiSkill, struct FVector* Pos, struct FVector* Normal, struct FVector* Forward, float* DefenseArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetTargetCenter");

	Params::BattleSkillActionBase_C_GetTargetCenter Parms{};

	Parms.PartyIndex = std::move(PartyIndex);
	Parms.SocketName = SocketName;
	Parms.PartySystem = PartySystem;
	Parms.ForMagatsuhiSkill = ForMagatsuhiSkill;

	UObject::ProcessEvent(Func, &Parms);

	PartyIndex = std::move(Parms.PartyIndex);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Forward != nullptr)
		*Forward = std::move(Parms.Forward);

	if (DefenseArea != nullptr)
		*DefenseArea = Parms.DefenseArea;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayerEscape
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMoveFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayerEscape(int32 WaitCommandIndex, float Length, float MoveTime, bool WaitMoveFinish, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayerEscape");

	Params::BattleSkillActionBase_C_Com_PlayerEscape Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Length = Length;
	Parms.MoveTime = MoveTime;
	Parms.WaitMoveFinish = WaitMoveFinish;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MemberAction
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_ACTION_TYPE                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MemberAction(int32 WaitCommandIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MemberAction");

	Params::BattleSkillActionBase_C_Com_MemberAction Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Action = Action;
	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MessageShowCommonMessage
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CommonMsgID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MessageShowCommonMessage(int32 WaitCommandIndex, int32 CommonMsgID, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MessageShowCommonMessage");

	Params::BattleSkillActionBase_C_Com_MessageShowCommonMessage Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CommonMsgID = CommonMsgID;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_IgnoreCounterStop
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_IgnoreCounterStop(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_IgnoreCounterStop");

	Params::BattleSkillActionBase_C_Com_IgnoreCounterStop Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPostProcess
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattlePostProcessCtrl_C>RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPostProcess(TScriptInterface<class IBPI_BattlePostProcessCtrl_C>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPostProcess");

	Params::BattleSkillActionBase_C_BIGetPostProcess Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorMoveToTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistanceFromTarget                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMoveFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckTargetDefenseArea                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckActorAttackReach                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ConsiderActorScale                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreCharaCollision                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorMoveToTarget(int32 WaitCommandIndex, float DistanceFromTarget, float MoveTime, bool WaitMoveFinish, bool CheckTargetDefenseArea, bool CheckActorAttackReach, bool ConsiderActorScale, bool IgnoreCharaCollision, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorMoveToTarget");

	Params::BattleSkillActionBase_C_Com_ActorMoveToTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DistanceFromTarget = DistanceFromTarget;
	Parms.MoveTime = MoveTime;
	Parms.WaitMoveFinish = WaitMoveFinish;
	Parms.CheckTargetDefenseArea = CheckTargetDefenseArea;
	Parms.CheckActorAttackReach = CheckActorAttackReach;
	Parms.ConsiderActorScale = ConsiderActorScale;
	Parms.IgnoreCharaCollision = IgnoreCharaCollision;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetShakeScale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetPartyIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetShakeScale(int32 TargetPartyIndex, float* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetShakeScale");

	Params::BattleSkillActionBase_C_GetShakeScale Parms{};

	Parms.TargetPartyIndex = TargetPartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OnSkillHitFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::OnSkillHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OnSkillHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_ApplyHit_OnPlayEffectFunc
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::AnimNotify_ApplyHit_OnPlayEffectFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_ApplyHit_OnPlayEffectFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotify_AvoidTiming
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitComIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AnimNotify_AvoidTiming(int32 WaitComIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotify_AvoidTiming");

	Params::BattleSkillActionBase_C_AnimNotify_AvoidTiming Parms{};

	Parms.WaitComIndex = WaitComIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CallApplyHit_OnPlayEffectFunc
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CallApplyHit_OnPlayEffectFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CallApplyHit_OnPlayEffectFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_FadeOut
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWhite                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_FadeOut(int32 WaitCommandIndex, bool IsWhite, float DurationSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_FadeOut");

	Params::BattleSkillActionBase_C_Com_FadeOut Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.IsWhite = IsWhite;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_FadeIn
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsWhite                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_FadeIn(int32 WaitCommandIndex, bool IsWhite, float DurationSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_FadeIn");

	Params::BattleSkillActionBase_C_Com_FadeIn Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.IsWhite = IsWhite;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsWaitComDone
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           WaitComIDs                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsDone                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsWaitComDone(TArray<int32>& WaitComIDs, bool* IsDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsWaitComDone");

	Params::BattleSkillActionBase_C_IsWaitComDone Parms{};

	Parms.WaitComIDs = std::move(WaitComIDs);

	UObject::ProcessEvent(Func, &Parms);

	WaitComIDs = std::move(Parms.WaitComIDs);

	if (IsDone != nullptr)
		*IsDone = Parms.IsDone;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttachLocation                         LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalActor(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, EAttachLocation LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalActor");

	Params::BattleSkillActionBase_C_Com_AddDecalActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttachLocation                         LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RetPecID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalTarget(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, EAttachLocation LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool HideInReflection, bool HideInAbsorbAndBlock, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* RetPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalTarget");

	Params::BattleSkillActionBase_C_Com_AddDecalTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (RetPecID != nullptr)
		*RetPecID = Parms.RetPecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalActorParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalActorParty(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalActorParty");

	Params::BattleSkillActionBase_C_Com_AddDecalActorParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalTargetParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalTargetParty(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalTargetParty");

	Params::BattleSkillActionBase_C_Com_AddDecalTargetParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BlinkHitLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BlinkHitLight(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BlinkHitLight");

	Params::BattleSkillActionBase_C_BlinkHitLight Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetHitLightData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FBattleSkillLight_t              LightData                                              (Parm, OutParm, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetHitLightData(bool* IsValid, struct FBattleSkillLight_t* LightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetHitLightData");

	Params::BattleSkillActionBase_C_GetHitLightData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (LightData != nullptr)
		*LightData = std::move(Parms.LightData);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.LoadBattleSkillLightList
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::LoadBattleSkillLightList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "LoadBattleSkillLightList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetPlayRate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::SetPlayRate(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetPlayRate");

	Params::BattleSkillActionBase_C_SetPlayRate Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetPlayRate
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetPlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetPlayRate");

	Params::BattleSkillActionBase_C_GetPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CamShakeByRowName
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           TableRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultiHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCheckHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CamShakeByRowName(int32 WaitCommandIndex, const class FString& TableRowName, float ShakeScale, bool IsMultiHit, bool IsCheckHit, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CamShakeByRowName");

	Params::BattleSkillActionBase_C_Com_CamShakeByRowName Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.TableRowName = std::move(TableRowName);
	Parms.ShakeScale = ShakeScale;
	Parms.IsMultiHit = IsMultiHit;
	Parms.IsCheckHit = IsCheckHit;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddActorPointLight_Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloffExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddActorPointLight_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloffExponent, bool IsCharaOnly, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddActorPointLight_Auto");

	Params::BattleSkillActionBase_C_Com_AddActorPointLight_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloffExponent = LightFalloffExponent;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.InitLightUpdaterTimeline
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTimelineComponent*               Timeline                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveLinearColor*                ColorCurve                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      IntensityCurve                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      RadiusCurve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::InitLightUpdaterTimeline(class UTimelineComponent* Timeline, class UCurveLinearColor* ColorCurve, class UCurveFloat* IntensityCurve, class UCurveFloat* RadiusCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "InitLightUpdaterTimeline");

	Params::BattleSkillActionBase_C_InitLightUpdaterTimeline Parms{};

	Parms.Timeline = Timeline;
	Parms.ColorCurve = ColorCurve;
	Parms.IntensityCurve = IntensityCurve;
	Parms.RadiusCurve = RadiusCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddActorPointLight_Auto_Impl
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   SkillLightData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddActorPointLight_Auto_Impl(const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& SkillLightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddActorPointLight_Auto_Impl");

	Params::BattleSkillActionBase_C_AddActorPointLight_Auto_Impl Parms{};

	Parms.SkillLightData = std::move(SkillLightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddTargetPointLight_Auto_Impl
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   SkillLightData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddTargetPointLight_Auto_Impl(const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& SkillLightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddTargetPointLight_Auto_Impl");

	Params::BattleSkillActionBase_C_AddTargetPointLight_Auto_Impl Parms{};

	Parms.SkillLightData = std::move(SkillLightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddTargetPointLight_Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloffExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddTargetPointLight_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloffExponent, bool HideInReflection, bool HideInAbsorbAndBlock, bool IsCharaOnly, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddTargetPointLight_Auto");

	Params::BattleSkillActionBase_C_Com_AddTargetPointLight_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloffExponent = LightFalloffExponent;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CamShakeByClass
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CamShakeClass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultiHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCheckHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CamShakeByClass(int32 WaitCommandIndex, class UClass* CamShakeClass, float ShakeScale, bool IsMultiHit, bool IsCheckHit, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CamShakeByClass");

	Params::BattleSkillActionBase_C_Com_CamShakeByClass Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CamShakeClass = CamShakeClass;
	Parms.ShakeScale = ShakeScale;
	Parms.IsMultiHit = IsMultiHit;
	Parms.IsCheckHit = IsCheckHit;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_RadialBlurActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreSideScale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_RadialBlurActor(int32 WaitCommandIndex, const class FString& SocketName, const struct FVector& Offset, float DamageValue, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, bool IgnoreSideScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_RadialBlurActor");

	Params::BattleSkillActionBase_C_Com_RadialBlurActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Offset = std::move(Offset);
	Parms.DamageValue = DamageValue;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;
	Parms.IgnoreSideScale = IgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_RadialBlurTargetParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_RadialBlurTargetParty(int32 WaitCommandIndex, const class FString& SocketName, const struct FVector& Offset, float DamageValue, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_RadialBlurTargetParty");

	Params::BattleSkillActionBase_C_Com_RadialBlurTargetParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Offset = std::move(Offset);
	Parms.DamageValue = DamageValue;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_RadialBlurActorParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartKeepSec                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_RadialBlurActorParty(int32 WaitCommandIndex, const class FString& SocketName, const struct FVector& Offset, float DamageValue, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_RadialBlurActorParty");

	Params::BattleSkillActionBase_C_Com_RadialBlurActorParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.Offset = std::move(Offset);
	Parms.DamageValue = DamageValue;
	Parms.StartAmount = StartAmount;
	Parms.EndAmount = EndAmount;
	Parms.StartKeepSec = StartKeepSec;
	Parms.LerpSec = LerpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddActorPartyPointLight
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Com_AddActorPartyPointLight(class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, bool IsCharaOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddActorPartyPointLight");

	Params::BattleSkillActionBase_C_Com_AddActorPartyPointLight Parms{};

	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddTargetPartyPointLight
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSocket                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Com_AddTargetPartyPointLight(class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSocket, bool IsCharaOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddTargetPartyPointLight");

	Params::BattleSkillActionBase_C_Com_AddTargetPartyPointLight Parms{};

	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSocket = IsFollowSocket;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddActorPartyPointLight_Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloutExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddActorPartyPointLight_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloutExponent, bool IsCharaOnly, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddActorPartyPointLight_Auto");

	Params::BattleSkillActionBase_C_Com_AddActorPartyPointLight_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloutExponent = LightFalloutExponent;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddTargetPartyPointLight_Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloffExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddTargetPartyPointLight_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloffExponent, bool IsCharaOnly, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddTargetPartyPointLight_Auto");

	Params::BattleSkillActionBase_C_Com_AddTargetPartyPointLight_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloffExponent = LightFalloffExponent;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActivatePointLightUpdate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASkillActionPointLight_C*         PointLight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   LightData                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ActivatePointLightUpdate(class ASkillActionPointLight_C* PointLight, struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActivatePointLightUpdate");

	Params::BattleSkillActionBase_C_ActivatePointLightUpdate Parms{};

	Parms.PointLight = PointLight;
	Parms.LightData = std::move(LightData);

	UObject::ProcessEvent(Func, &Parms);

	LightData = std::move(Parms.LightData);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalToEffect
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectID                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   LoopTimes                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CycleSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalToEffect(int32 WaitCommandIndex, TArray<int32>& EffectID, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, const struct FVector& Size, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalToEffect");

	Params::BattleSkillActionBase_C_Com_AddDecalToEffect Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.EffectID = std::move(EffectID);
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.LoopTimes = LoopTimes;
	Parms.CycleSec = CycleSec;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.Size = std::move(Size);
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	EffectID = std::move(Parms.EffectID);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsExistNotifyInMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsExistNotifyInMotion(int32 ActorIndex, E_CHARA_MOTION_ID MotionID, const class FString& NotifyName, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsExistNotifyInMotion");

	Params::BattleSkillActionBase_C_IsExistNotifyInMotion Parms{};

	Parms.ActorIndex = ActorIndex;
	Parms.MotionID = MotionID;
	Parms.NotifyName = std::move(NotifyName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckIntorAnimNotify
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckIntorAnimNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckIntorAnimNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddIntroForceBreakTask
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PecID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddIntroForceBreakTask(int32 PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddIntroForceBreakTask");

	Params::BattleSkillActionBase_C_AddIntroForceBreakTask Parms{};

	Parms.PecID = PecID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddRandomYaw
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       InTransform                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABattleSkillActionBase_C::AddRandomYaw(struct FTransform& InTransform, float Min, float Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddRandomYaw");

	Params::BattleSkillActionBase_C_AddRandomYaw Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.Min = Min;
	Parms.Max = Max;

	UObject::ProcessEvent(Func, &Parms);

	InTransform = std::move(Parms.InTransform);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PrepareReflexCam
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PrepareReflexCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PrepareReflexCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddTargetDeadTask
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           DeadTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FSkillActionTargetInfo           SkillActionTargetInfo                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::AddTargetDeadTask(TArray<int32>& WaitList, TArray<int32>& DeadTarget, const struct FSkillActionTargetInfo& SkillActionTargetInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddTargetDeadTask");

	Params::BattleSkillActionBase_C_AddTargetDeadTask Parms{};

	Parms.WaitList = std::move(WaitList);
	Parms.DeadTarget = std::move(DeadTarget);
	Parms.SkillActionTargetInfo = std::move(SkillActionTargetInfo);

	UObject::ProcessEvent(Func, &Parms);

	WaitList = std::move(Parms.WaitList);
	DeadTarget = std::move(Parms.DeadTarget);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcReflexTarget
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ReflexTargetIndex                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcReflexTarget(int32 TargetIndex, bool* IsExist, int32* ReflexTargetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcReflexTarget");

	Params::BattleSkillActionBase_C_CalcReflexTarget Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;

	if (ReflexTargetIndex != nullptr)
		*ReflexTargetIndex = Parms.ReflexTargetIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetDamageMotionType
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_DAMAGE_HIT_TYPE                   DamageHitType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   bst                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsResist                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsGuard                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWeak                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DamageMotionIndex                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetDamageMotionType(int32 PartyIndex, E_BTL_DAMAGE_HIT_TYPE DamageHitType, bool IsDead, int32 bst, TScriptInterface<class IBPI_BattleParty_C> PartySystem, bool IsResist, bool IsGuard, bool IsWeak, int32* DamageMotionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetDamageMotionType");

	Params::BattleSkillActionBase_C_GetDamageMotionType Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.DamageHitType = DamageHitType;
	Parms.IsDead = IsDead;
	Parms.bst = bst;
	Parms.PartySystem = PartySystem;
	Parms.IsResist = IsResist;
	Parms.IsGuard = IsGuard;
	Parms.IsWeak = IsWeak;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageMotionIndex != nullptr)
		*DamageMotionIndex = Parms.DamageMotionIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetBstSEArray
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BadStatus                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_BAD_STATUS_APPEAR               Appear                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class USoundAtomCue*>            RetValue                                               (Parm, OutParm)

void ABattleSkillActionBase_C::GetBstSEArray(int32 BadStatus, E_CHARA_BAD_STATUS_APPEAR Appear, TArray<class USoundAtomCue*>* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetBstSEArray");

	Params::BattleSkillActionBase_C_GetBstSEArray Parms{};

	Parms.BadStatus = BadStatus;
	Parms.Appear = Appear;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddPointLightAuto_Impl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBTL_ADD_SKILL_LIGHT_TASK_DATA   SkillLightData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddPointLightAuto_Impl(const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& SkillLightData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddPointLightAuto_Impl");

	Params::BattleSkillActionBase_C_AddPointLightAuto_Impl Parms{};

	Parms.SkillLightData = std::move(SkillLightData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddBarrierReactionTask
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_REFLECT_RES_TYPE                  Reaction                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WaitSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RetPecIDs                                              (Parm, OutParm)

void ABattleSkillActionBase_C::AddBarrierReactionTask(TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, TArray<int32>& WaitTaskList, int32 TargetIndex, E_BTL_REFLECT_RES_TYPE Reaction, float WaitSec, TArray<int32>* RetPecIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddBarrierReactionTask");

	Params::BattleSkillActionBase_C_AddBarrierReactionTask Parms{};

	Parms.TaskFactory = TaskFactory;
	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.TargetIndex = TargetIndex;
	Parms.Reaction = Reaction;
	Parms.WaitSec = WaitSec;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetPecIDs != nullptr)
		*RetPecIDs = std::move(Parms.RetPecIDs);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_OverrideBarrierTiming
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_OverrideBarrierTiming(int32 WaitCommandIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_OverrideBarrierTiming");

	Params::BattleSkillActionBase_C_Com_OverrideBarrierTiming Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcAttackMoveSec
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharaBase_C*                     Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TargetDefenseArea                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sec                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcAttackMoveSec(class ACharaBase_C* Attacker, const struct FVector& TargetLocation, float TargetDefenseArea, float* Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcAttackMoveSec");

	Params::BattleSkillActionBase_C_CalcAttackMoveSec Parms{};

	Parms.Attacker = Attacker;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetDefenseArea = TargetDefenseArea;

	UObject::ProcessEvent(Func, &Parms);

	if (Sec != nullptr)
		*Sec = Parms.Sec;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ReserveApplyDrain
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_ReserveApplyDrain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ReserveApplyDrain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ApplyDrain
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ApplyDrain(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ApplyDrain");

	Params::BattleSkillActionBase_C_Com_ApplyDrain Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetMainInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_MainInterface>AsBPI_Main_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetMainInterface");

	Params::BattleSkillActionBase_C_BIGetMainInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Main_Interface != nullptr)
		*AsBPI_Main_Interface = Parms.AsBPI_Main_Interface;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PartyUtil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTUtilInterface>Param_PartyUtil                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::PartyUtil(TScriptInterface<class IBPI_PTUtilInterface>* Param_PartyUtil)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PartyUtil");

	Params::BattleSkillActionBase_C_PartyUtil Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PartyUtil != nullptr)
		*Param_PartyUtil = Parms.Param_PartyUtil;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPTUnitInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTBPInterface_C>AsBPI_PTBPInterface                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPTUnitInterface(TScriptInterface<class IBPI_PTBPInterface_C>* AsBPI_PTBPInterface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPTUnitInterface");

	Params::BattleSkillActionBase_C_BIGetPTUnitInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTBPInterface != nullptr)
		*AsBPI_PTBPInterface = Parms.AsBPI_PTBPInterface;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPTBadStatusInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTBadStatusInterface>AsBPI_PTBad_Status_Interface                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPTBadStatusInterface(TScriptInterface<class IBPI_PTBadStatusInterface>* AsBPI_PTBad_Status_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPTBadStatusInterface");

	Params::BattleSkillActionBase_C_BIGetPTBadStatusInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTBad_Status_Interface != nullptr)
		*AsBPI_PTBad_Status_Interface = Parms.AsBPI_PTBad_Status_Interface;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddMagGaugeTask
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           ComIndex                                               (Parm, OutParm)

void ABattleSkillActionBase_C::AddMagGaugeTask(TArray<int32>& WaitTaskList, TArray<int32>* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddMagGaugeTask");

	Params::BattleSkillActionBase_C_AddMagGaugeTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (ComIndex != nullptr)
		*ComIndex = std::move(Parms.ComIndex);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorLookTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LookSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitLookFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorLookTarget(int32 WaitCommandIndex, float LookSpeed, bool WaitLookFinish, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorLookTarget");

	Params::BattleSkillActionBase_C_Com_ActorLookTarget Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.LookSpeed = LookSpeed;
	Parms.WaitLookFinish = WaitLookFinish;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AdjustCameraName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Output                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsAttack                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::AdjustCameraName(const class FString& Input, class FString* Output, bool* IsAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AdjustCameraName");

	Params::BattleSkillActionBase_C_AdjustCameraName Parms{};

	Parms.Input = std::move(Input);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	if (IsAttack != nullptr)
		*IsAttack = Parms.IsAttack;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_100_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_100_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_100_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_100_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_200_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_200_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_200_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_200_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_300_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommanIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_300_Series(int32 WaitCommanIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_300_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_300_Series Parms{};

	Parms.WaitCommanIndex = WaitCommanIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_400_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_400_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_400_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_400_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_500_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_500_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_500_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_500_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_600_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_600_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_600_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_600_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_700_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_700_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_700_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_700_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_800_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIindex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_800_Series(int32 WaitCommandIindex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_800_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_800_Series Parms{};

	Parms.WaitCommandIindex = WaitCommandIindex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_900_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_900_Series(int32 WaitCommandIndex, const class FString& CameraName, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_900_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_900_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddReichiPointTask
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           ComIndex                                               (Parm, OutParm)

void ABattleSkillActionBase_C::AddReichiPointTask(TArray<int32>& WaitTaskList, TArray<int32>* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddReichiPointTask");

	Params::BattleSkillActionBase_C_AddReichiPointTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (ComIndex != nullptr)
		*ComIndex = std::move(Parms.ComIndex);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddActorBstTask
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           ComIndex                                               (Parm, OutParm)

void ABattleSkillActionBase_C::AddActorBstTask(TArray<int32>& WaitTaskList, TArray<int32>* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddActorBstTask");

	Params::BattleSkillActionBase_C_AddActorBstTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (ComIndex != nullptr)
		*ComIndex = std::move(Parms.ComIndex);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsTargetHitStan
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsStan                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsTargetHitStan(bool* IsStan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsTargetHitStan");

	Params::BattleSkillActionBase_C_IsTargetHitStan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStan != nullptr)
		*IsStan = Parms.IsStan;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.StartLookAt
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::StartLookAt(class FName Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "StartLookAt");

	Params::BattleSkillActionBase_C_StartLookAt Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.StopLookAt
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::StopLookAt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "StopLookAt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.StartLookAt_OnlyTarget
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::StartLookAt_OnlyTarget(class FName Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "StartLookAt_OnlyTarget");

	Params::BattleSkillActionBase_C_StartLookAt_OnlyTarget Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.StopLookAt_OnlyTarget
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::StopLookAt_OnlyTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "StopLookAt_OnlyTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsOverrideTargetLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOverride                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             OverrideSocket                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::IsOverrideTargetLocation(int32 PartyIndex, bool* IsOverride, class FName* OverrideSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsOverrideTargetLocation");

	Params::BattleSkillActionBase_C_IsOverrideTargetLocation Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOverride != nullptr)
		*IsOverride = Parms.IsOverride;

	if (OverrideSocket != nullptr)
		*OverrideSocket = Parms.OverrideSocket;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectAbsorption
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AbsorptionPointSocket                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AbsorptionPointOffset                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveVector*                     AbsorptionParam                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReverse                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectAbsorption(int32 WaitCommandIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionParam, bool IsReverse, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectAbsorption");

	Params::BattleSkillActionBase_C_Com_PlayEffectAbsorption Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.AbsorptionPointSocket = AbsorptionPointSocket;
	Parms.AbsorptionPointOffset = std::move(AbsorptionPointOffset);
	Parms.AbsorptionParam = AbsorptionParam;
	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActorBeHomePerformance
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ActorBeHomePerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActorBeHomePerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsEndActorBeHomePerformance
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsEndActorBeHomePerformance(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsEndActorBeHomePerformance");

	Params::BattleSkillActionBase_C_IsEndActorBeHomePerformance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ActorAppearPerformance
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ActorAppearPerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ActorAppearPerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckAnimNotify_RapidReturn
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckAnimNotify_RapidReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckAnimNotify_RapidReturn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_EnemyAction
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_ACTION_TYPE                     Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Option                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_EnemyAction(int32 WaitCommandIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_EnemyAction");

	Params::BattleSkillActionBase_C_Com_EnemyAction Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Action = Action;
	Parms.Option = Option;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_EnemyMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<E_BAD_STATUS>                    IgnoreBst                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_EnemyMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID Motion, TArray<E_BAD_STATUS>& IgnoreBst, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_EnemyMotion");

	Params::BattleSkillActionBase_C_Com_EnemyMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Motion = Motion;
	Parms.IgnoreBst = std::move(IgnoreBst);

	UObject::ProcessEvent(Func, &Parms);

	IgnoreBst = std::move(Parms.IgnoreBst);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsTargetDead
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsTargetDead(bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsTargetDead");

	Params::BattleSkillActionBase_C_IsTargetDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OnJustBeforeApplyHitFunc
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::OnJustBeforeApplyHitFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OnJustBeforeApplyHitFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsJustBeforeApplyHitTiming
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTiming                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsJustBeforeApplyHitTiming(int32 PartyIndex, bool* IsTiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsJustBeforeApplyHitTiming");

	Params::BattleSkillActionBase_C_IsJustBeforeApplyHitTiming Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTiming != nullptr)
		*IsTiming = Parms.IsTiming;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.RetrieveNotifyTiming
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsReverseSearch                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Timing                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExist                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::RetrieveNotifyTiming(int32 ActorIndex, E_CHARA_MOTION_ID MotionID, const class FString& NotifyName, bool IsReverseSearch, float* Timing, bool* IsExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "RetrieveNotifyTiming");

	Params::BattleSkillActionBase_C_RetrieveNotifyTiming Parms{};

	Parms.ActorIndex = ActorIndex;
	Parms.MotionID = MotionID;
	Parms.NotifyName = std::move(NotifyName);
	Parms.IsReverseSearch = IsReverseSearch;

	UObject::ProcessEvent(Func, &Parms);

	if (Timing != nullptr)
		*Timing = Parms.Timing;

	if (IsExist != nullptr)
		*IsExist = Parms.IsExist;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ReserveJustBeforeApplyHit
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   JustBeforeSec                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDefaultTiming                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::Com_ReserveJustBeforeApplyHit(float JustBeforeSec, bool IsDefaultTiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ReserveJustBeforeApplyHit");

	Params::BattleSkillActionBase_C_Com_ReserveJustBeforeApplyHit Parms{};

	Parms.JustBeforeSec = JustBeforeSec;
	Parms.IsDefaultTiming = IsDefaultTiming;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MemberMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<E_BAD_STATUS>                    IgnoreBst                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MemberMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID Motion, TArray<E_BAD_STATUS>& IgnoreBst, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MemberMotion");

	Params::BattleSkillActionBase_C_Com_MemberMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Motion = Motion;
	Parms.IgnoreBst = std::move(IgnoreBst);

	UObject::ProcessEvent(Func, &Parms);

	IgnoreBst = std::move(Parms.IgnoreBst);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetHitStopParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBattleSkillHitStop_T            Parameter                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::SetHitStopParameter(const struct FBattleSkillHitStop_T& Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetHitStopParameter");

	Params::BattleSkillActionBase_C_SetHitStopParameter Parms{};

	Parms.Parameter = std::move(Parameter);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_BeginSkillHitStop
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIindex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_BeginSkillHitStop(int32 WaitCommandIndex, int32* ComIindex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_BeginSkillHitStop");

	Params::BattleSkillActionBase_C_Com_BeginSkillHitStop Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIindex != nullptr)
		*ComIindex = Parms.ComIindex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UI_IConTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Resist                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Guard                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Combo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Weak                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Miss                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLock                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           RetList                                                (Parm, OutParm)

void ABattleSkillActionBase_C::UI_IConTask(TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, TArray<int32>& WaitTaskList, int32 TargetIndex, bool Resist, bool Guard, bool Combo, bool Weak, bool Miss, bool bLock, TArray<int32>* RetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UI_IConTask");

	Params::BattleSkillActionBase_C_UI_IConTask Parms{};

	Parms.TaskFactory = TaskFactory;
	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.TargetIndex = TargetIndex;
	Parms.Resist = Resist;
	Parms.Guard = Guard;
	Parms.Combo = Combo;
	Parms.Weak = Weak;
	Parms.Miss = Miss;
	Parms.bLock = bLock;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (RetList != nullptr)
		*RetList = std::move(Parms.RetList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcUnitSocketLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>BPI_BattleParty                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Root                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SocketLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::CalcUnitSocketLocation(int32 PartyIndex, class FName SocketName, TScriptInterface<class IBPI_BattleParty_C> BPI_BattleParty, bool ForTarget, struct FVector* Root, struct FVector* SocketLocation, struct FRotator* Rotate, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcUnitSocketLocation");

	Params::BattleSkillActionBase_C_CalcUnitSocketLocation Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.SocketName = SocketName;
	Parms.BPI_BattleParty = BPI_BattleParty;
	Parms.ForTarget = ForTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (Root != nullptr)
		*Root = std::move(Parms.Root);

	if (SocketLocation != nullptr)
		*SocketLocation = std::move(Parms.SocketLocation);

	if (Rotate != nullptr)
		*Rotate = std::move(Parms.Rotate);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetSkillArea
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_SKILL_TARGET ABattleSkillActionBase_C::GetSkillArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetSkillArea");

	Params::BattleSkillActionBase_C_GetSkillArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsThisOneTargetSkill
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsOneTarget                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsThisOneTargetSkill(bool* IsOneTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsThisOneTargetSkill");

	Params::BattleSkillActionBase_C_IsThisOneTargetSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOneTarget != nullptr)
		*IsOneTarget = Parms.IsOneTarget;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamActorRelative_BySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UCameraAnimationAsset*>    Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UCurveFloat*                      LarpAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             OriginTransSocket                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ResetCharaParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamActorRelative_BySize(int32 WaitCommandIndex, TArray<class UCameraAnimationAsset*>& Asset, class UCurveFloat* LarpAlpha, float BlendInTime, float BlendOutTime, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, class FName OriginTransSocket, const struct FTransform& OffsetTrans, bool HaveToCleanUp, bool IsPlayOneScale, bool ResetCharaParticle, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamActorRelative_BySize");

	Params::BattleSkillActionBase_C_Com_SetAnimCamActorRelative_BySize Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = std::move(Asset);
	Parms.LarpAlpha = LarpAlpha;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.OriginTransSocket = OriginTransSocket;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.IsPlayOneScale = IsPlayOneScale;
	Parms.ResetCharaParticle = ResetCharaParticle;

	UObject::ProcessEvent(Func, &Parms);

	Asset = std::move(Parms.Asset);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcTargetCamAnim
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UCameraAnimationAsset*>    CameraAnims                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UCurveFloat*                      LeapAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAnim                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraAnimationAsset*            CameraAnim2nd                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LerpAlpha                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcTargetCamAnim(TArray<class UCameraAnimationAsset*>& CameraAnims, class UCurveFloat* LeapAlpha, class UCameraAnimationAsset** CameraAnim, class UCameraAnimationAsset** CameraAnim2nd, float* LerpAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcTargetCamAnim");

	Params::BattleSkillActionBase_C_CalcTargetCamAnim Parms{};

	Parms.CameraAnims = std::move(CameraAnims);
	Parms.LeapAlpha = LeapAlpha;

	UObject::ProcessEvent(Func, &Parms);

	CameraAnims = std::move(Parms.CameraAnims);

	if (CameraAnim != nullptr)
		*CameraAnim = Parms.CameraAnim;

	if (CameraAnim2nd != nullptr)
		*CameraAnim2nd = Parms.CameraAnim2nd;

	if (LerpAlpha != nullptr)
		*LerpAlpha = Parms.LerpAlpha;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamTargetRelative_BySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UCameraAnimationAsset*>    Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UCurveFloat*                      LerpAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             OriginTransSocket                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ResetCharaParticle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamTargetRelative_BySize(int32 WaitCommandIndex, TArray<class UCameraAnimationAsset*>& Asset, class UCurveFloat* LerpAlpha, float BlendInTime, float BlendOutTime, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, class FName OriginTransSocket, const struct FTransform& OffsetTrans, bool HaveToCleanUp, bool ResetCharaParticle, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamTargetRelative_BySize");

	Params::BattleSkillActionBase_C_Com_SetAnimCamTargetRelative_BySize Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = std::move(Asset);
	Parms.LerpAlpha = LerpAlpha;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.OriginTransSocket = OriginTransSocket;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.ResetCharaParticle = ResetCharaParticle;

	UObject::ProcessEvent(Func, &Parms);

	Asset = std::move(Parms.Asset);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetAnimCamOriginRelative_BySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UCameraAnimationAsset*>    Asset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UCurveFloat*                      LerpAlpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OffsetTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HaveToCleanUp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPlayOneScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetAnimCamOriginRelative_BySize(int32 WaitCommandIndex, TArray<class UCameraAnimationAsset*>& Asset, class UCurveFloat* LerpAlpha, float BlendInTime, float BlendOutTime, const struct FTransform& OffsetTrans, bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, bool HaveToCleanUp, bool IsPlayOneScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetAnimCamOriginRelative_BySize");

	Params::BattleSkillActionBase_C_Com_SetAnimCamOriginRelative_BySize Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Asset = std::move(Asset);
	Parms.LerpAlpha = LerpAlpha;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.OffsetTrans = std::move(OffsetTrans);
	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;
	Parms.HaveToCleanUp = HaveToCleanUp;
	Parms.IsPlayOneScale = IsPlayOneScale;

	UObject::ProcessEvent(Func, &Parms);

	Asset = std::move(Parms.Asset);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CamDepthOfField
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FocalDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DurationSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CamDepthOfField(int32 WaitCommandIndex, float FocalDistance, float Scale, float DurationSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CamDepthOfField");

	Params::BattleSkillActionBase_C_Com_CamDepthOfField Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.FocalDistance = FocalDistance;
	Parms.Scale = Scale;
	Parms.DurationSec = DurationSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Item
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Item(int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Item");

	Params::BattleSkillActionBase_C_Com_Introduction_Item Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IntroductionItemFunc
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::IntroductionItemFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IntroductionItemFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetActorPartyIndex
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetActorPartyIndex(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetActorPartyIndex");

	Params::BattleSkillActionBase_C_GetActorPartyIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_TargetMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RandomTiming                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_TargetMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID Motion, bool RandomTiming, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_TargetMotion");

	Params::BattleSkillActionBase_C_Com_TargetMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Motion = Motion;
	Parms.RandomTiming = RandomTiming;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.TargetLookToActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::TargetLookToActor(TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "TargetLookToActor");

	Params::BattleSkillActionBase_C_TargetLookToActor Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.isHitTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHit                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsHitTarget(int32 TargetIndex, bool* IsHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "isHitTarget");

	Params::BattleSkillActionBase_C_IsHitTarget Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsHit != nullptr)
		*IsHit = Parms.IsHit;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetSequencerCamTargetRelative
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetSequencerCamTargetRelative(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetSequencerCamTargetRelative");

	Params::BattleSkillActionBase_C_Com_SetSequencerCamTargetRelative Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Melee
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MeleeStartDistance                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Melee(int32 WaitCommandIndex, float MeleeStartDistance, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Melee");

	Params::BattleSkillActionBase_C_Com_Introduction_Melee Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.MeleeStartDistance = MeleeStartDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcMotionStartPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   OffsetPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StartPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcMotionStartPosition(int32 PartyIndex, E_CHARA_MOTION_ID MotionID, const class FString& NotifyName, float OffsetPosition, float* StartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcMotionStartPosition");

	Params::BattleSkillActionBase_C_CalcMotionStartPosition Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.MotionID = MotionID;
	Parms.NotifyName = std::move(NotifyName);
	Parms.OffsetPosition = OffsetPosition;

	UObject::ProcessEvent(Func, &Parms);

	if (StartPosition != nullptr)
		*StartPosition = Parms.StartPosition;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ApplyDebugParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::ApplyDebugParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ApplyDebugParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsTargetOnlyActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABattleSkillActionBase_C::IsTargetOnlyActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsTargetOnlyActor");

	Params::BattleSkillActionBase_C_IsTargetOnlyActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsTargetContainsActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABattleSkillActionBase_C::IsTargetContainsActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsTargetContainsActor");

	Params::BattleSkillActionBase_C_IsTargetContainsActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcUnitTall
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Tall                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcUnitTall(int32 PartyIndex, float* Tall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcUnitTall");

	Params::BattleSkillActionBase_C_CalcUnitTall Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Tall != nullptr)
		*Tall = Parms.Tall;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UndoDebugParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::UndoDebugParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UndoDebugParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcPartyVisibilitySituation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HideOtherActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideOtherTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideAllTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           VisiblePartyIndex                                      (Parm, OutParm)
// TArray<int32>                           InvisiblePartyIndex                                    (Parm, OutParm)

void ABattleSkillActionBase_C::CalcPartyVisibilitySituation(bool HideOtherActor, bool HideAllActor, bool HideOtherTarget, bool HideAllTarget, TArray<int32>* VisiblePartyIndex, TArray<int32>* InvisiblePartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcPartyVisibilitySituation");

	Params::BattleSkillActionBase_C_CalcPartyVisibilitySituation Parms{};

	Parms.HideOtherActor = HideOtherActor;
	Parms.HideAllActor = HideAllActor;
	Parms.HideOtherTarget = HideOtherTarget;
	Parms.HideAllTarget = HideAllTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (VisiblePartyIndex != nullptr)
		*VisiblePartyIndex = std::move(Parms.VisiblePartyIndex);

	if (InvisiblePartyIndex != nullptr)
		*InvisiblePartyIndex = std::move(Parms.InvisiblePartyIndex);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsNormalAttack
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABattleSkillActionBase_C::IsNormalAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsNormalAttack");

	Params::BattleSkillActionBase_C_IsNormalAttack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetPlayParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBTL_EFFECT_PLAY_PARAM>   OutEffectPlayParam                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBTL_LIGHT_PLAY_PARAM>    OutLightPlayParam                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AActor*>                   TrashActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UActorComponent*>          TrashComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABattleSkillActionBase_C::GetPlayParam(TArray<struct FBTL_EFFECT_PLAY_PARAM>& OutEffectPlayParam, TArray<struct FBTL_LIGHT_PLAY_PARAM>& OutLightPlayParam, TArray<class AActor*>& TrashActor, TArray<class UActorComponent*>& TrashComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetPlayParam");

	Params::BattleSkillActionBase_C_GetPlayParam Parms{};

	Parms.OutEffectPlayParam = std::move(OutEffectPlayParam);
	Parms.OutLightPlayParam = std::move(OutLightPlayParam);
	Parms.TrashActor = std::move(TrashActor);
	Parms.TrashComponent = std::move(TrashComponent);

	UObject::ProcessEvent(Func, &Parms);

	OutEffectPlayParam = std::move(Parms.OutEffectPlayParam);
	OutLightPlayParam = std::move(Parms.OutLightPlayParam);
	TrashActor = std::move(Parms.TrashActor);
	TrashComponent = std::move(Parms.TrashComponent);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsSkippable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsSkipable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsSkippable(bool* IsSkipable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsSkippable");

	Params::BattleSkillActionBase_C_IsSkippable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSkipable != nullptr)
		*IsSkipable = Parms.IsSkipable;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsReflected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsReflected                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsReflected(bool* Param_IsReflected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsReflected");

	Params::BattleSkillActionBase_C_IsReflected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsReflected != nullptr)
		*Param_IsReflected = Parms.Param_IsReflected;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectPairTargetParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_EFFECT_TYPE                       EfffectType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_EFFECT_FORM                       EffectForm                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ActorSocketName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       ActorSocketRelative                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FString                           TargetSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   BulletSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BulletTangentDeg                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ExtensionDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideInReflection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideInAbsorbAndBlock                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           EffectID                                               (Parm, OutParm)

void ABattleSkillActionBase_C::Com_PlayEffectPairTargetParty(int32 WaitCommandIndex, int32 PlayIndex, float LifeSec, int32 TranslucencyPriority, E_BTL_EFFECT_TYPE EfffectType, E_BTL_EFFECT_FORM EffectForm, const class FString& ActorSocketName, const struct FTransform& ActorSocketRelative, const class FString& TargetSocketName, float BulletSpeed, int32 BulletTangentDeg, float Gravity, float ExtensionDistance, bool HideInReflection, bool HideInAbsorbAndBlock, int32* ComIndex, TArray<int32>* EffectID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectPairTargetParty");

	Params::BattleSkillActionBase_C_Com_PlayEffectPairTargetParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.EfffectType = EfffectType;
	Parms.EffectForm = EffectForm;
	Parms.ActorSocketName = std::move(ActorSocketName);
	Parms.ActorSocketRelative = std::move(ActorSocketRelative);
	Parms.TargetSocketName = std::move(TargetSocketName);
	Parms.BulletSpeed = BulletSpeed;
	Parms.BulletTangentDeg = BulletTangentDeg;
	Parms.Gravity = Gravity;
	Parms.ExtensionDistance = ExtensionDistance;
	Parms.HideInReflection = HideInReflection;
	Parms.HideInAbsorbAndBlock = HideInAbsorbAndBlock;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;

	if (EffectID != nullptr)
		*EffectID = std::move(Parms.EffectID);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Update
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Update(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Update");

	Params::BattleSkillActionBase_C_Update Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OutOfBattleSetting
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::OutOfBattleSetting(int32 ActorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OutOfBattleSetting");

	Params::BattleSkillActionBase_C_OutOfBattleSetting Parms{};

	Parms.ActorIndex = ActorIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.FirstSetting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::FirstSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "FirstSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPTFlagInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTFlagInterface>AsBPI_PTFlag_Interface                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPTFlagInterface(TScriptInterface<class IBPI_PTFlagInterface>* AsBPI_PTFlag_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPTFlagInterface");

	Params::BattleSkillActionBase_C_BIGetPTFlagInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTFlag_Interface != nullptr)
		*AsBPI_PTFlag_Interface = Parms.AsBPI_PTFlag_Interface;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddFirstSettingTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::AddFirstSettingTask(TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddFirstSettingTask");

	Params::BattleSkillActionBase_C_AddFirstSettingTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckLastAnimCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckLastAnimCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckLastAnimCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AnimNotifyState_Reset
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::AnimNotifyState_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AnimNotifyState_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetNahobinoMotion
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Skill_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_NAHOBINO_SKILL_MOTION                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_NAHOBINO_SKILL_MOTION ABattleSkillActionBase_C::GetNahobinoMotion(int32 Skill_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetNahobinoMotion");

	Params::BattleSkillActionBase_C_GetNahobinoMotion Parms{};

	Parms.Skill_ID = Skill_ID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsForcedSkip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Skip                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsForcedSkip(bool* Skip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsForcedSkip");

	Params::BattleSkillActionBase_C_IsForcedSkip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Skip != nullptr)
		*Skip = Parms.Skip;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckBarrierReactionEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckBarrierReactionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckBarrierReactionEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckUseReflexCam
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckUseReflexCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckUseReflexCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetAlreadyCameraChanged
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTrue                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::SetAlreadyCameraChanged(bool IsTrue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetAlreadyCameraChanged");

	Params::BattleSkillActionBase_C_SetAlreadyCameraChanged Parms{};

	Parms.IsTrue = IsTrue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.DamageResultSetting
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReflected                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Is1vs1Reflect                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::DamageResultSetting(bool* IsReflected, bool* Is1vs1Reflect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "DamageResultSetting");

	Params::BattleSkillActionBase_C_DamageResultSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReflected != nullptr)
		*IsReflected = Parms.IsReflected;

	if (Is1vs1Reflect != nullptr)
		*Is1vs1Reflect = Parms.Is1vs1Reflect;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetChantCameraFront
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::SetChantCameraFront(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetChantCameraFront");

	Params::BattleSkillActionBase_C_SetChantCameraFront Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetSkillHitStampType
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_HIT_STAMP_TYPE                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_SKILL_HIT_STAMP_TYPE ABattleSkillActionBase_C::GetSkillHitStampType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetSkillHitStampType");

	Params::BattleSkillActionBase_C_GetSkillHitStampType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcAttackMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       AttackMotion                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcAttackMotion(int32 ActorIndex, E_CHARA_MOTION_ID* AttackMotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcAttackMotion");

	Params::BattleSkillActionBase_C_CalcAttackMotion Parms{};

	Parms.ActorIndex = ActorIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (AttackMotion != nullptr)
		*AttackMotion = Parms.AttackMotion;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcSkillMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcSkillMotion(int32 ActorIndex, E_CHARA_MOTION_ID* MotionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcSkillMotion");

	Params::BattleSkillActionBase_C_CalcSkillMotion Parms{};

	Parms.ActorIndex = ActorIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (MotionID != nullptr)
		*MotionID = Parms.MotionID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ValueSelect
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PlayerSideValue                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EnemySideValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::ValueSelect(float PlayerSideValue, float EnemySideValue, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ValueSelect");

	Params::BattleSkillActionBase_C_ValueSelect Parms{};

	Parms.PlayerSideValue = PlayerSideValue;
	Parms.EnemySideValue = EnemySideValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.NoApplyHit
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::NoApplyHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "NoApplyHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsBstOnlySkill
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsBstOnly                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsBstOnlySkill(bool* IsBstOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsBstOnlySkill");

	Params::BattleSkillActionBase_C_IsBstOnlySkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBstOnly != nullptr)
		*IsBstOnly = Parms.IsBstOnly;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsSkillForActorSide
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsForActorSide                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsSkillForActorSide(bool* IsForActorSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsSkillForActorSide");

	Params::BattleSkillActionBase_C_IsSkillForActorSide Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsForActorSide != nullptr)
		*IsForActorSide = Parms.IsForActorSide;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetHeroIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetHeroIndex(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetHeroIndex");

	Params::BattleSkillActionBase_C_GetHeroIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.TranslateExtraActionToBadStatus
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_EXTRA_ACTION                      ExtraAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BAD_STATUS                            BadStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::TranslateExtraActionToBadStatus(E_BTL_EXTRA_ACTION ExtraAction, E_BAD_STATUS* BadStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "TranslateExtraActionToBadStatus");

	Params::BattleSkillActionBase_C_TranslateExtraActionToBadStatus Parms{};

	Parms.ExtraAction = ExtraAction;

	UObject::ProcessEvent(Func, &Parms);

	if (BadStatus != nullptr)
		*BadStatus = Parms.BadStatus;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddNoticeSkillChangedTask
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_BAD_STATUS>                    BadStatusType                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::AddNoticeSkillChangedTask(const TArray<E_BAD_STATUS>& BadStatusType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddNoticeSkillChangedTask");

	Params::BattleSkillActionBase_C_AddNoticeSkillChangedTask Parms{};

	Parms.BadStatusType = std::move(BadStatusType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcRandomNumPos
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DirectionNum                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DivisionNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MinimumNum                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           RandomPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::CalcRandomNumPos(int32 DirectionNum, int32 DivisionNum, int32 MinimumNum, TArray<int32>& RandomPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcRandomNumPos");

	Params::BattleSkillActionBase_C_CalcRandomNumPos Parms{};

	Parms.DirectionNum = DirectionNum;
	Parms.DivisionNum = DivisionNum;
	Parms.MinimumNum = MinimumNum;
	Parms.RandomPos = std::move(RandomPos);

	UObject::ProcessEvent(Func, &Parms);

	RandomPos = std::move(Parms.RandomPos);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcSkipCameraName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsReflected                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           CameraName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcSkipCameraName(bool IsReflected, class FString* CameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcSkipCameraName");

	Params::BattleSkillActionBase_C_CalcSkipCameraName Parms{};

	Parms.IsReflected = IsReflected;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraName != nullptr)
		*CameraName = std::move(Parms.CameraName);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckChangeCamera
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckChangeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckChangeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcDamagePosOffset
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PosNo                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumPosDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcDamagePosOffset(int32& PosNo, int32 NumPosDirection, struct FVector* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcDamagePosOffset");

	Params::BattleSkillActionBase_C_CalcDamagePosOffset Parms{};

	Parms.PosNo = PosNo;
	Parms.NumPosDirection = NumPosDirection;

	UObject::ProcessEvent(Func, &Parms);

	PosNo = Parms.PosNo;

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckTargetResType
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSkillActionTargetInfo           SkillActionTargetInfo                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_BTL_REFLECT_RES_TYPE                  ResType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTheSameResType                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::CheckTargetResType(const struct FSkillActionTargetInfo& SkillActionTargetInfo, E_BTL_REFLECT_RES_TYPE ResType, bool* IsTheSameResType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckTargetResType");

	Params::BattleSkillActionBase_C_CheckTargetResType Parms{};

	Parms.SkillActionTargetInfo = std::move(SkillActionTargetInfo);
	Parms.ResType = ResType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTheSameResType != nullptr)
		*IsTheSameResType = Parms.IsTheSameResType;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.KuishibariInfoMessTask
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// E_SKILL_INFO_MESS_TIMING                Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleTaskFactory_C>TaskFactory                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           TaSKID                                                 (Parm, OutParm)

void ABattleSkillActionBase_C::KuishibariInfoMessTask(TArray<int32>& WaitTaskList, E_SKILL_INFO_MESS_TIMING Timing, TScriptInterface<class IBPI_BattleTaskFactory_C> TaskFactory, TArray<int32>* TaSKID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "KuishibariInfoMessTask");

	Params::BattleSkillActionBase_C_KuishibariInfoMessTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.Timing = Timing;
	Parms.TaskFactory = TaskFactory;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);

	if (TaSKID != nullptr)
		*TaSKID = std::move(Parms.TaSKID);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcMoveDestLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Ave                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistFromTarget                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcMoveDestLocation(struct FVector* Location, struct FVector* Ave, float* DistFromTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcMoveDestLocation");

	Params::BattleSkillActionBase_C_CalcMoveDestLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Ave != nullptr)
		*Ave = std::move(Parms.Ave);

	if (DistFromTarget != nullptr)
		*DistFromTarget = Parms.DistFromTarget;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorMoveToTargetLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DestLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MoveTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMoveFinish                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorMoveToTargetLocation(int32 WaitCommandIndex, const struct FVector& DestLocation, const struct FVector& LookLocation, float MoveTime, bool WaitMoveFinish, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorMoveToTargetLocation");

	Params::BattleSkillActionBase_C_Com_ActorMoveToTargetLocation Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DestLocation = std::move(DestLocation);
	Parms.LookLocation = std::move(LookLocation);
	Parms.MoveTime = MoveTime;
	Parms.WaitMoveFinish = WaitMoveFinish;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsInvalidData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_DAMAGE_HIT_TYPE                   HitType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamgeReal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Rec                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageMP                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RecMP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInvalid                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsInvalidData(E_BTL_DAMAGE_HIT_TYPE HitType, int32 Damage, int32 DamgeReal, int32 Rec, int32 DamageMP, int32 RecMP, bool* IsInvalid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsInvalidData");

	Params::BattleSkillActionBase_C_IsInvalidData Parms{};

	Parms.HitType = HitType;
	Parms.Damage = Damage;
	Parms.DamgeReal = DamgeReal;
	Parms.Rec = Rec;
	Parms.DamageMP = DamageMP;
	Parms.RecMP = RecMP;

	UObject::ProcessEvent(Func, &Parms);

	if (IsInvalid != nullptr)
		*IsInvalid = Parms.IsInvalid;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetPartyRotation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::GetPartyRotation(int32 PartyIndex, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetPartyRotation");

	Params::BattleSkillActionBase_C_GetPartyRotation Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.InitAllDecals
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::InitAllDecals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "InitAllDecals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddStopAllSE Task
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WaitPecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddStopAllSE_Task(int32 WaitCommandIndex, int32* WaitPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddStopAllSE Task");

	Params::BattleSkillActionBase_C_AddStopAllSE_Task Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (WaitPecID != nullptr)
		*WaitPecID = Parms.WaitPecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetActorDitherOff
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::SetActorDitherOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetActorDitherOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.InitActorDither
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::InitActorDither()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "InitActorDither");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.MakeSkillName
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
// int32                                   Aptitude                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FString ABattleSkillActionBase_C::MakeSkillName(int32 ID, int32 ActorIndex, int32* Aptitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "MakeSkillName");

	Params::BattleSkillActionBase_C_MakeSkillName Parms{};

	Parms.ID = ID;
	Parms.ActorIndex = ActorIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Aptitude != nullptr)
		*Aptitude = Parms.Aptitude;

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsAlreadyCameraChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Changed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsAlreadyCameraChanged(bool* Changed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsAlreadyCameraChanged");

	Params::BattleSkillActionBase_C_IsAlreadyCameraChanged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Changed != nullptr)
		*Changed = Parms.Changed;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsUseAnimCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsUsed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsUseAnimCam(bool* IsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsUseAnimCam");

	Params::BattleSkillActionBase_C_IsUseAnimCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUsed != nullptr)
		*IsUsed = Parms.IsUsed;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsThisCallSkill
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsCall                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsThisCallSkill(bool* IsCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsThisCallSkill");

	Params::BattleSkillActionBase_C_IsThisCallSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCall != nullptr)
		*IsCall = Parms.IsCall;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetSkillType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TYPE                            Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetSkillType(E_SKILL_TYPE* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetSkillType");

	Params::BattleSkillActionBase_C_GetSkillType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsThisOneTargetCallSkill
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsOneTarget                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsThisOneTargetCallSkill(bool* IsOneTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsThisOneTargetCallSkill");

	Params::BattleSkillActionBase_C_IsThisOneTargetCallSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOneTarget != nullptr)
		*IsOneTarget = Parms.IsOneTarget;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SetIgnoreSkip
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SetIgnoreSkip(int32 WaitCommandIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SetIgnoreSkip");

	Params::BattleSkillActionBase_C_Com_SetIgnoreSkip Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetIgnoreSkillSkip
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::SetIgnoreSkillSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetIgnoreSkillSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddStopAllParticleTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WaitPecID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddStopAllParticleTask(int32 WaitCommandIndex, int32* WaitPecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddStopAllParticleTask");

	Params::BattleSkillActionBase_C_AddStopAllParticleTask Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (WaitPecID != nullptr)
		*WaitPecID = Parms.WaitPecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetSkiped
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::SetSkiped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetSkiped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.OverrideActorPartyIndex
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::OverrideActorPartyIndex(int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "OverrideActorPartyIndex");

	Params::BattleSkillActionBase_C_OverrideActorPartyIndex Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CalcActorLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ActorLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CalcActorLocation(struct FVector* ActorLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CalcActorLocation");

	Params::BattleSkillActionBase_C_CalcActorLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorLocation != nullptr)
		*ActorLocation = std::move(Parms.ActorLocation);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetSkillID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetSkillID(int32* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetSkillID");

	Params::BattleSkillActionBase_C_GetSkillID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsCallWhiteOut
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABattleSkillActionBase_C::IsCallWhiteOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsCallWhiteOut");

	Params::BattleSkillActionBase_C_IsCallWhiteOut Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsHeroDeadByReflection
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsHeroDeadByReflection(bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsHeroDeadByReflection");

	Params::BattleSkillActionBase_C_IsHeroDeadByReflection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckMagatsuhiSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMagatsuhiSkill                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFixMemberSkill                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::CheckMagatsuhiSkill(bool* IsMagatsuhiSkill, bool* IsFixMemberSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckMagatsuhiSkill");

	Params::BattleSkillActionBase_C_CheckMagatsuhiSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMagatsuhiSkill != nullptr)
		*IsMagatsuhiSkill = Parms.IsMagatsuhiSkill;

	if (IsFixMemberSkill != nullptr)
		*IsFixMemberSkill = Parms.IsFixMemberSkill;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Check Model Load
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Check_Model_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Check Model Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckCameraHinder
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::CheckCameraHinder(float Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckCameraHinder");

	Params::BattleSkillActionBase_C_CheckCameraHinder Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckDoWhiteOut
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::CheckDoWhiteOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckDoWhiteOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsDeadImmortalBoss
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_KUISHIBARI_LEVEL                      KuishibariLevel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsDeadImmortalBoss(int32 PartyIndex, E_KUISHIBARI_LEVEL KuishibariLevel, bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsDeadImmortalBoss");

	Params::BattleSkillActionBase_C_IsDeadImmortalBoss Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.KuishibariLevel = KuishibariLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsAllTargetDead
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsAllTargetDead(bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsAllTargetDead");

	Params::BattleSkillActionBase_C_IsAllTargetDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsWarpAtIntroductionMelee
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    M_IsWarpAtIntroductionMelee                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsWarpAtIntroductionMelee(bool* M_IsWarpAtIntroductionMelee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsWarpAtIntroductionMelee");

	Params::BattleSkillActionBase_C_IsWarpAtIntroductionMelee Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (M_IsWarpAtIntroductionMelee != nullptr)
		*M_IsWarpAtIntroductionMelee = Parms.M_IsWarpAtIntroductionMelee;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SelectActorCameraName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Playerside                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           EnemySide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Camera                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::SelectActorCameraName(const class FString& Playerside, const class FString& EnemySide, class FString* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SelectActorCameraName");

	Params::BattleSkillActionBase_C_SelectActorCameraName Parms{};

	Parms.Playerside = std::move(Playerside);
	Parms.EnemySide = std::move(EnemySide);

	UObject::ProcessEvent(Func, &Parms);

	if (Camera != nullptr)
		*Camera = std::move(Parms.Camera);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SelectTargetCameraName
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Playerside                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           EnemySide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Camera                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::SelectTargetCameraName(const class FString& Playerside, const class FString& EnemySide, class FString* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SelectTargetCameraName");

	Params::BattleSkillActionBase_C_SelectTargetCameraName Parms{};

	Parms.Playerside = std::move(Playerside);
	Parms.EnemySide = std::move(EnemySide);

	UObject::ProcessEvent(Func, &Parms);

	if (Camera != nullptr)
		*Camera = std::move(Parms.Camera);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.FinalizeCameraHinder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::FinalizeCameraHinder(bool Immediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "FinalizeCameraHinder");

	Params::BattleSkillActionBase_C_FinalizeCameraHinder Parms{};

	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.RestoreCharaScale
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::RestoreCharaScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "RestoreCharaScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MagatsuhiActorSetPosition
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PutOnRelativeDegree                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RelativeDegree                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MagatsuhiActorSetPosition(int32 WaitCommandIndex, bool PutOnRelativeDegree, float RelativeDegree, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MagatsuhiActorSetPosition");

	Params::BattleSkillActionBase_C_Com_MagatsuhiActorSetPosition Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PutOnRelativeDegree = PutOnRelativeDegree;
	Parms.RelativeDegree = RelativeDegree;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_MagatsuhiActorResetVisibilityAndScale
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ActorVisible                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_MagatsuhiActorResetVisibilityAndScale(int32 WaitCommandIndex, bool ActorVisible, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_MagatsuhiActorResetVisibilityAndScale");

	Params::BattleSkillActionBase_C_Com_MagatsuhiActorResetVisibilityAndScale Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.ActorVisible = ActorVisible;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectMagatsuhiActorParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectMagatsuhiActorParty(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectMagatsuhiActorParty");

	Params::BattleSkillActionBase_C_Com_PlayEffectMagatsuhiActorParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetMagatsuhiPartyCenter
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Forward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetMagatsuhiPartyCenter(class FName SocketName, TScriptInterface<class IBPI_BattleParty_C> PartySystem, struct FVector* Pos, struct FVector* Normal, struct FVector* Forward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetMagatsuhiPartyCenter");

	Params::BattleSkillActionBase_C_GetMagatsuhiPartyCenter Parms{};

	Parms.SocketName = SocketName;
	Parms.PartySystem = PartySystem;

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (Forward != nullptr)
		*Forward = std::move(Parms.Forward);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlayEffectMagatsuhiActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIgnoreSideScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlayEffectMagatsuhiActor(int32 WaitCommandIndex, int32 PlayIndex, const class FString& SocketName, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, bool IsIgnoreSideScale, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlayEffectMagatsuhiActor");

	Params::BattleSkillActionBase_C_Com_PlayEffectMagatsuhiActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.PlayIndex = PlayIndex;
	Parms.SocketName = std::move(SocketName);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;
	Parms.IsIgnoreSideScale = IsIgnoreSideScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com Add Magatsuhi Actor Point Light Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloffExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckSocketExist                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Add_Magatsuhi_Actor_Point_Light_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloffExponent, bool IsCharaOnly, bool CheckSocketExist, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com Add Magatsuhi Actor Point Light Auto");

	Params::BattleSkillActionBase_C_Com_Add_Magatsuhi_Actor_Point_Light_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloffExponent = LightFalloffExponent;
	Parms.IsCharaOnly = IsCharaOnly;
	Parms.CheckSocketExist = CheckSocketExist;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddMagatsuhiActorPartyPointLight_Auto
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LightFuncMaterialIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GroupID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCastShadow                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFollowSokect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UCurveLinearColor*                Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      LightFalloutExponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCharaOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddMagatsuhiActorPartyPointLight_Auto(int32 WaitCommandIndex, class FName SocketName, const struct FVector& OffsetPos, int32 LightFuncMaterialIndex, int32 GroupID, bool IsCastShadow, bool IsFollowSokect, class UCurveLinearColor* Color, class UCurveFloat* Intensity, class UCurveFloat* Radius, class UCurveFloat* LightFalloutExponent, bool IsCharaOnly, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddMagatsuhiActorPartyPointLight_Auto");

	Params::BattleSkillActionBase_C_Com_AddMagatsuhiActorPartyPointLight_Auto Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.SocketName = SocketName;
	Parms.OffsetPos = std::move(OffsetPos);
	Parms.LightFuncMaterialIndex = LightFuncMaterialIndex;
	Parms.GroupID = GroupID;
	Parms.IsCastShadow = IsCastShadow;
	Parms.IsFollowSokect = IsFollowSokect;
	Parms.Color = Color;
	Parms.Intensity = Intensity;
	Parms.Radius = Radius;
	Parms.LightFalloutExponent = LightFalloutExponent;
	Parms.IsCharaOnly = IsCharaOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalMagatsuhiActor
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideLifeSec                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttachLocation                         LocationType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalMagatsuhiActor(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, EAttachLocation LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalMagatsuhiActor");

	Params::BattleSkillActionBase_C_Com_AddDecalMagatsuhiActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.OverrideLifeSec = OverrideLifeSec;
	Parms.LocationType = LocationType;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddDecalMagatsuhiActorParty
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstance*                DecalMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          DecalSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OffsetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotationRandMin                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationRandMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CastOnlyStaticMesh                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddDecalMagatsuhiActorParty(int32 WaitCommandIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool AbsolutelyNoRotation, bool CastOnlyStaticMesh, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddDecalMagatsuhiActorParty");

	Params::BattleSkillActionBase_C_Com_AddDecalMagatsuhiActorParty Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.DecalMaterial = DecalMaterial;
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);
	Parms.DecalSize = std::move(DecalSize);
	Parms.OffsetLocation = std::move(OffsetLocation);
	Parms.AttachPointName = AttachPointName;
	Parms.Rotation = std::move(Rotation);
	Parms.RotationRandMin = RotationRandMin;
	Parms.RotationRandMax = RotationRandMax;
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.CastOnlyStaticMesh = CastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com Load Servant Model Task
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Load_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnAtHome                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RegisterAsAnEnemy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Load_Servant_Model_Task(int32 Load_ID, bool SpawnAtHome, bool RegisterAsAnEnemy, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com Load Servant Model Task");

	Params::BattleSkillActionBase_C_Com_Load_Servant_Model_Task Parms{};

	Parms.Load_ID = Load_ID;
	Parms.SpawnAtHome = SpawnAtHome;
	Parms.RegisterAsAnEnemy = RegisterAsAnEnemy;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_BeginCtrlServant
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_BeginCtrlServant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_BeginCtrlServant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_EndCtrlServant
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_EndCtrlServant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_EndCtrlServant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Destroy Loaded Model
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Destroy_Loaded_Model()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Destroy Loaded Model");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ServantSetVisibility
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ServantSetVisibility(int32 WaitCommandIndex, bool Visible, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ServantSetVisibility");

	Params::BattleSkillActionBase_C_Com_ServantSetVisibility Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.LoadMagatsuhiOtherActorModel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::LoadMagatsuhiOtherActorModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "LoadMagatsuhiOtherActorModel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsModelLoaded
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsModelLoaded(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsModelLoaded");

	Params::BattleSkillActionBase_C_IsModelLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.MakeSkillUserTransformTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       Root                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    PutOnRelativeDegree                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RelativeDegree                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::MakeSkillUserTransformTask(TArray<int32>& WaitTaskList, const struct FTransform& Root, bool PutOnRelativeDegree, float RelativeDegree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "MakeSkillUserTransformTask");

	Params::BattleSkillActionBase_C_MakeSkillUserTransformTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.Root = std::move(Root);
	Parms.PutOnRelativeDegree = PutOnRelativeDegree;
	Parms.RelativeDegree = RelativeDegree;

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Summoner
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Summoner(int32 WaitCommandIndex, const class FString& CameraName, float Distance, E_CHARA_MOTION_ID MotionID, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Summoner");

	Params::BattleSkillActionBase_C_Com_Introduction_Summoner Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.Distance = Distance;
	Parms.MotionID = MotionID;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_100_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_100_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_100_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_100_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_200_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_200_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_200_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_200_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_300_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_300_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_300_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_300_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_400_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_400_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_400_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_400_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_500_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_500_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_500_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_500_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_600_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_600_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_600_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_600_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_700_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_700_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_700_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_700_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_800_Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_800_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_800_Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_800_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com Introduction Servant 900 Series
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DistanceFromSummoner                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MotionStartSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DelayPlayMotionSec                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_900_Series(int32 WaitCommandIndex, const class FString& CameraName, float DistanceFromSummoner, float DegreeFromForward, float MotionStartSec, float DelayPlayMotionSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com Introduction Servant 900 Series");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_900_Series Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.CameraName = std::move(CameraName);
	Parms.DistanceFromSummoner = DistanceFromSummoner;
	Parms.DegreeFromForward = DegreeFromForward;
	Parms.MotionStartSec = MotionStartSec;
	Parms.DelayPlayMotionSec = DelayPlayMotionSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_Introduction_Servant_Melee
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromSummoner                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DegreeFromForward                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_Introduction_Servant_Melee(int32 WaitCommandIndex, bool FromSummoner, float Distance, float DegreeFromForward, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_Introduction_Servant_Melee");

	Params::BattleSkillActionBase_C_Com_Introduction_Servant_Melee Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.FromSummoner = FromSummoner;
	Parms.Distance = Distance;
	Parms.DegreeFromForward = DegreeFromForward;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetServantPartyIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetServantPartyIndex(int32* PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetServantPartyIndex");

	Params::BattleSkillActionBase_C_GetServantPartyIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndex != nullptr)
		*PartyIndex = Parms.PartyIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ActorMoveFromTargetTrans
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Degree                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PecID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ActorMoveFromTargetTrans(int32 WaitCommandIndex, float Distance, float Degree, int32* PecID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ActorMoveFromTargetTrans");

	Params::BattleSkillActionBase_C_Com_ActorMoveFromTargetTrans Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Distance = Distance;
	Parms.Degree = Degree;

	UObject::ProcessEvent(Func, &Parms);

	if (PecID != nullptr)
		*PecID = Parms.PecID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SetSkippingInProgress
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::SetSkippingInProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SetSkippingInProgress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddLightFuncMaterial
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddLightFuncMaterial(TSoftObjectPtr<class UMaterialInterface>& Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddLightFuncMaterial");

	Params::BattleSkillActionBase_C_AddLightFuncMaterial Parms{};

	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);

	Material = Parms.Material;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_EnableManualCamShake
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_EnableManualCamShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_EnableManualCamShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CamShake_Impl
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultiHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CamShakeTableIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           ShakeClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCheckHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CamShake_Impl(int32 WaitCommandIndex, float ShakeScale, bool IsMultiHit, int32 CamShakeTableIndex, const class FString& RowName, class UClass* ShakeClass, bool IsCheckHit, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CamShake_Impl");

	Params::BattleSkillActionBase_C_Com_CamShake_Impl Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.ShakeScale = ShakeScale;
	Parms.IsMultiHit = IsMultiHit;
	Parms.CamShakeTableIndex = CamShakeTableIndex;
	Parms.RowName = std::move(RowName);
	Parms.ShakeClass = ShakeClass;
	Parms.IsCheckHit = IsCheckHit;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_CtrlPostProcess
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitComIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInstance*>        Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FMaterialAnimSetting_T>   MaterialAnimSetting                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_CtrlPostProcess(int32 WaitComIndex, TArray<class UMaterialInstance*>& Material, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_CtrlPostProcess");

	Params::BattleSkillActionBase_C_Com_CtrlPostProcess Parms{};

	Parms.WaitComIndex = WaitComIndex;
	Parms.Material = std::move(Material);
	Parms.MaterialAnimSetting = std::move(MaterialAnimSetting);

	UObject::ProcessEvent(Func, &Parms);

	Material = std::move(Parms.Material);
	MaterialAnimSetting = std::move(Parms.MaterialAnimSetting);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PursuitAddDrawPressIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PursuitAddDrawPressIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PursuitAddDrawPressIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_PlaySound2D
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitComIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundAtomCue*                    AtomCue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SE_Sync_Playback_Speed                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_PlaySound2D(int32 WaitComIndex, class USoundAtomCue* AtomCue, bool SE_Sync_Playback_Speed, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_PlaySound2D");

	Params::BattleSkillActionBase_C_Com_PlaySound2D Parms{};

	Parms.WaitComIndex = WaitComIndex;
	Parms.AtomCue = AtomCue;
	Parms.SE_Sync_Playback_Speed = SE_Sync_Playback_Speed;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Check Light Func Material Load
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Check_Light_Func_Material_Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Check Light Func Material Load");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsLightFuncMaterialLoaded
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsLightFuncMaterialLoaded(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsLightFuncMaterialLoaded");

	Params::BattleSkillActionBase_C_IsLightFuncMaterialLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckActorsUniqueSkillExtraEffect
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_AUTO_SKILL_EXTRA_EFFECT               ExtraEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Collect                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::CheckActorsUniqueSkillExtraEffect(E_AUTO_SKILL_EXTRA_EFFECT ExtraEffect, bool* Collect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckActorsUniqueSkillExtraEffect");

	Params::BattleSkillActionBase_C_CheckActorsUniqueSkillExtraEffect Parms{};

	Parms.ExtraEffect = ExtraEffect;

	UObject::ProcessEvent(Func, &Parms);

	if (Collect != nullptr)
		*Collect = Parms.Collect;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsAnyCritical
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsAnyCritical(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsAnyCritical");

	Params::BattleSkillActionBase_C_IsAnyCritical Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetCriticalTargetPartyIndex
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Param_Index                                            (Parm, OutParm)

void ABattleSkillActionBase_C::GetCriticalTargetPartyIndex(TArray<int32>* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetCriticalTargetPartyIndex");

	Params::BattleSkillActionBase_C_GetCriticalTargetPartyIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = std::move(Parms.Param_Index);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ReturnTargetTask
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           RetTaskIDs                                             (Parm, OutParm)

void ABattleSkillActionBase_C::ReturnTargetTask(TArray<int32>& WaitTaskList, TArray<int32>& TargetIndex, TArray<int32>* RetTaskIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ReturnTargetTask");

	Params::BattleSkillActionBase_C_ReturnTargetTask Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);
	Parms.TargetIndex = std::move(TargetIndex);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
	TargetIndex = std::move(Parms.TargetIndex);

	if (RetTaskIDs != nullptr)
		*RetTaskIDs = std::move(Parms.RetTaskIDs);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.CheckUniqueSkillEfficacy
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UniqueSkillID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Efficacy                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::CheckUniqueSkillEfficacy(int32 UniqueSkillID, int32 PartyIndex, bool* Efficacy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "CheckUniqueSkillEfficacy");

	Params::BattleSkillActionBase_C_CheckUniqueSkillEfficacy Parms{};

	Parms.UniqueSkillID = UniqueSkillID;
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Efficacy != nullptr)
		*Efficacy = Parms.Efficacy;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetItemID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetItemID(int32* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetItemID");

	Params::BattleSkillActionBase_C_GetItemID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BIGetPTMemDataInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTMemDataInterface>AsBPI_PTMemData                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BIGetPTMemDataInterface(TScriptInterface<class IBPI_PTMemDataInterface>* AsBPI_PTMemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BIGetPTMemDataInterface");

	Params::BattleSkillActionBase_C_BIGetPTMemDataInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTMemData != nullptr)
		*AsBPI_PTMemData = Parms.AsBPI_PTMemData;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ResetTargetCharaParticle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::ResetTargetCharaParticle(const TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ResetTargetCharaParticle");

	Params::BattleSkillActionBase_C_ResetTargetCharaParticle Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.ResetActorCharaParticle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::ResetActorCharaParticle(const TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "ResetActorCharaParticle");

	Params::BattleSkillActionBase_C_ResetActorCharaParticle Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UnlockOpeningAchievement
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::UnlockOpeningAchievement(TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UnlockOpeningAchievement");

	Params::BattleSkillActionBase_C_UnlockOpeningAchievement Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UnlockHIttingAchievement
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           WaitTaskList                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleSkillActionBase_C::UnlockHIttingAchievement(TArray<int32>& WaitTaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UnlockHIttingAchievement");

	Params::BattleSkillActionBase_C_UnlockHIttingAchievement Parms{};

	Parms.WaitTaskList = std::move(WaitTaskList);

	UObject::ProcessEvent(Func, &Parms);

	WaitTaskList = std::move(Parms.WaitTaskList);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetTargetInfo
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSkillActionTargetInfo>   Info                                                   (Parm, OutParm)

void ABattleSkillActionBase_C::GetTargetInfo(TArray<struct FSkillActionTargetInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetTargetInfo");

	Params::BattleSkillActionBase_C_GetTargetInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.SeparateTargetInfo
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::SeparateTargetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "SeparateTargetInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetTargetInfoLength
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetTargetInfoLength(int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetTargetInfoLength");

	Params::BattleSkillActionBase_C_GetTargetInfoLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetFirstTargetInfo
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSkillActionTargetInfo           Info                                                   (Parm, OutParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::GetFirstTargetInfo(struct FSkillActionTargetInfo* Info, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetFirstTargetInfo");

	Params::BattleSkillActionBase_C_GetFirstTargetInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetReflexInfo
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSkillActionTargetInfo>   Info                                                   (Parm, OutParm)

void ABattleSkillActionBase_C::GetReflexInfo(TArray<struct FSkillActionTargetInfo>* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetReflexInfo");

	Params::BattleSkillActionBase_C_GetReflexInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetReflexInfoLength
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetReflexInfoLength(int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetReflexInfoLength");

	Params::BattleSkillActionBase_C_GetReflexInfoLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetMagatsuhiOtherActors
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Actors                                                 (Parm, OutParm)

void ABattleSkillActionBase_C::GetMagatsuhiOtherActors(TArray<int32>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetMagatsuhiOtherActors");

	Params::BattleSkillActionBase_C_GetMagatsuhiOtherActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetMagatsuhiOtherActorsLength
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetMagatsuhiOtherActorsLength(int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetMagatsuhiOtherActorsLength");

	Params::BattleSkillActionBase_C_GetMagatsuhiOtherActorsLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetExtraAction
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_EXTRA_ACTION                      ExtraAction                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetExtraAction(E_BTL_EXTRA_ACTION* ExtraAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetExtraAction");

	Params::BattleSkillActionBase_C_GetExtraAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ExtraAction != nullptr)
		*ExtraAction = Parms.ExtraAction;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetDrainInfo
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSkillActionDrainInfo            M_DrainInfo                                            (Parm, OutParm)

void ABattleSkillActionBase_C::GetDrainInfo(struct FSkillActionDrainInfo* M_DrainInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetDrainInfo");

	Params::BattleSkillActionBase_C_GetDrainInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (M_DrainInfo != nullptr)
		*M_DrainInfo = std::move(Parms.M_DrainInfo);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetFirstReflexInfo
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSkillActionTargetInfo           Info                                                   (Parm, OutParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::GetFirstReflexInfo(struct FSkillActionTargetInfo* Info, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetFirstReflexInfo");

	Params::BattleSkillActionBase_C_GetFirstReflexInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetAddMagGauge
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   AddMagGauge                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetAddMagGauge(int32* AddMagGauge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetAddMagGauge");

	Params::BattleSkillActionBase_C_GetAddMagGauge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddMagGauge != nullptr)
		*AddMagGauge = Parms.AddMagGauge;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetAddReichi
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   AddReichi                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetAddReichi(int32* AddReichi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetAddReichi");

	Params::BattleSkillActionBase_C_GetAddReichi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddReichi != nullptr)
		*AddReichi = Parms.AddReichi;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetActorBst
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   bst                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetActorBst(int32* bst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetActorBst");

	Params::BattleSkillActionBase_C_GetActorBst Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bst != nullptr)
		*bst = Parms.bst;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_SecondApplyHit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HitEffect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsWorldRelative                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LifeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotYawRandMax                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyBlur                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   StartBlurAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndBlurAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurStartKeepSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlurLerpSec                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_SecondApplyHit(int32 WaitCommandIndex, int32 HitEffect, const struct FTransform& RelativeTransform, bool IsWorldRelative, float LifeSec, int32 TranslucencyPriority, float RotYawRandMin, float RotYawRandMax, bool ApplyBlur, float StartBlurAmount, float EndBlurAmount, float BlurStartKeepSec, float BlurLerpSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_SecondApplyHit");

	Params::BattleSkillActionBase_C_Com_SecondApplyHit Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.HitEffect = HitEffect;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.IsWorldRelative = IsWorldRelative;
	Parms.LifeSec = LifeSec;
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.RotYawRandMin = RotYawRandMin;
	Parms.RotYawRandMax = RotYawRandMax;
	Parms.ApplyBlur = ApplyBlur;
	Parms.StartBlurAmount = StartBlurAmount;
	Parms.EndBlurAmount = EndBlurAmount;
	Parms.BlurStartKeepSec = BlurStartKeepSec;
	Parms.BlurLerpSec = BlurLerpSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_BeginSecondPerformance
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Com_BeginSecondPerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_BeginSecondPerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsSkiped
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Skiped                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsSkiped(bool* Skiped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsSkiped");

	Params::BattleSkillActionBase_C_IsSkiped Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Skiped != nullptr)
		*Skiped = Parms.Skiped;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.DisableUpliftingEffect
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::DisableUpliftingEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "DisableUpliftingEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.EnableUpliftingEffect
// (Protected, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::EnableUpliftingEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "EnableUpliftingEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.StopAttachedSkeletalMeshActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::StopAttachedSkeletalMeshActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "StopAttachedSkeletalMeshActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.AddNahobinoMotion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::AddNahobinoMotion(E_CHARA_MOTION_ID Motion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "AddNahobinoMotion");

	Params::BattleSkillActionBase_C_AddNahobinoMotion Parms{};

	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.RemoveNahobinoMotion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::RemoveNahobinoMotion(E_CHARA_MOTION_ID Motion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "RemoveNahobinoMotion");

	Params::BattleSkillActionBase_C_RemoveNahobinoMotion Parms{};

	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_AddUplifting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_AddUplifting(int32 WaitCommandIndex, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_AddUplifting");

	Params::BattleSkillActionBase_C_Com_AddUplifting Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_OtherMagatsuhiActorsMotion
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       Motion                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_OtherMagatsuhiActorsMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID Motion, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_OtherMagatsuhiActorsMotion");

	Params::BattleSkillActionBase_C_Com_OtherMagatsuhiActorsMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.Motion = Motion;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UpdatePlayRate_SkelMeshParticle
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASkeletalMeshActor*               SkelMesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::UpdatePlayRate_SkelMeshParticle(class ASkeletalMeshActor*& SkelMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UpdatePlayRate_SkelMeshParticle");

	Params::BattleSkillActionBase_C_UpdatePlayRate_SkelMeshParticle Parms{};

	Parms.SkelMesh = SkelMesh;

	UObject::ProcessEvent(Func, &Parms);

	SkelMesh = Parms.SkelMesh;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.UpdatePlayRate_SkelMeshCompParticle
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkelMeshComp                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::UpdatePlayRate_SkelMeshCompParticle(class USkeletalMeshComponent*& SkelMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "UpdatePlayRate_SkelMeshCompParticle");

	Params::BattleSkillActionBase_C_UpdatePlayRate_SkelMeshCompParticle Parms{};

	Parms.SkelMeshComp = SkelMeshComp;

	UObject::ProcessEvent(Func, &Parms);

	SkelMeshComp = Parms.SkelMeshComp;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Invisible Loaded Model
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::Invisible_Loaded_Model()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Invisible Loaded Model");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.Com_ServantReturn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WaitSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ComIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::Com_ServantReturn(int32 WaitCommandIndex, float WaitSec, int32* ComIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "Com_ServantReturn");

	Params::BattleSkillActionBase_C_Com_ServantReturn Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.WaitSec = WaitSec;

	UObject::ProcessEvent(Func, &Parms);

	if (ComIndex != nullptr)
		*ComIndex = Parms.ComIndex;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.GetActorSide
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_SIDE                              Side                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::GetActorSide(E_BTL_SIDE* Side)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "GetActorSide");

	Params::BattleSkillActionBase_C_GetActorSide Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Side != nullptr)
		*Side = Parms.Side;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PrepareCounter
// (Public, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PrepareCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PrepareCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PrepareServantSkillVoiceSetting
// (Private, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PrepareServantSkillVoiceSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PrepareServantSkillVoiceSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.PrepareMagatsuhiSkillVoiceSetting
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleSkillActionBase_C::PrepareMagatsuhiSkillVoiceSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "PrepareMagatsuhiSkillVoiceSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.IsBlockOrAbsorb
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    BlockOrAbsorb                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::IsBlockOrAbsorb(bool* BlockOrAbsorb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "IsBlockOrAbsorb");

	Params::BattleSkillActionBase_C_IsBlockOrAbsorb Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BlockOrAbsorb != nullptr)
		*BlockOrAbsorb = Parms.BlockOrAbsorb;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_Com_ActorSetMotion
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       MotionID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WaitMotionFinished                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BI_Com_ActorSetMotion(int32 WaitCommandIndex, E_CHARA_MOTION_ID MotionID, bool WaitMotionFinished, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_Com_ActorSetMotion");

	Params::BattleSkillActionBase_C_BI_Com_ActorSetMotion Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;
	Parms.MotionID = MotionID;
	Parms.WaitMotionFinished = WaitMotionFinished;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_Com_AttackMoveActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaitCommandIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Com_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleSkillActionBase_C::BI_Com_AttackMoveActor(int32 WaitCommandIndex, int32* Com_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_Com_AttackMoveActor");

	Params::BattleSkillActionBase_C_BI_Com_AttackMoveActor Parms{};

	Parms.WaitCommandIndex = WaitCommandIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Com_Index != nullptr)
		*Com_Index = Parms.Com_Index;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_RegisterDecal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADevilSpawnDecal_C*               Decal                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BI_RegisterDecal(class ADevilSpawnDecal_C* Decal, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_RegisterDecal");

	Params::BattleSkillActionBase_C_BI_RegisterDecal Parms{};

	Parms.Decal = Decal;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleSkillActionBase.BattleSkillActionBase_C.BI_RegisterDecalComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialAnimDecalComponent_C*    Decal                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleSkillActionBase_C::BI_RegisterDecalComponent(class UMaterialAnimDecalComponent_C* Decal, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleSkillActionBase_C", "BI_RegisterDecalComponent");

	Params::BattleSkillActionBase_C_BI_RegisterDecalComponent Parms{};

	Parms.Decal = Decal;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

