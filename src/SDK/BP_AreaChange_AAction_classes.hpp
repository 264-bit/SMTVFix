#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AreaChange_AAction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "MapEventHit_Type_AAction_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AreaChange_AAction.BP_AreaChange_AAction_C
// 0x0030 (0x0400 - 0x03D0)
class ABP_AreaChange_AAction_C final : public AMapEventHit_Type_AAction_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AreaChange_AAction_C;            // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        MapIconLocation;                                   // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMEC_AREA_CHANGE_C*                     MEC_AREA_CHANGE;                                   // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         NextAreaId;                                        // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextWarpPoint;                                     // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMinimapIconTableHelper                IconHelper;                                        // 0x03F0(0x000C)(Edit, BlueprintVisible, NoDestructor)

public:
	void ExecuteUbergraph_BP_AreaChange_AAction(int32 EntryPoint);
	void ReceiveBeginPlay();
	void BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EventHitAction();
	void UserConstructionScript();
	void SetMinimapIconTableRow(int32 Param_Index, struct FMinimapIconTableRow* OutRow, bool* NeedToAddMore);
	void BPI_SetDataId(int32 DataId, bool* Dummy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AreaChange_AAction_C">();
	}
	static class ABP_AreaChange_AAction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AreaChange_AAction_C>();
	}
};
static_assert(alignof(ABP_AreaChange_AAction_C) == 0x000008, "Wrong alignment on ABP_AreaChange_AAction_C");
static_assert(sizeof(ABP_AreaChange_AAction_C) == 0x000400, "Wrong size on ABP_AreaChange_AAction_C");
static_assert(offsetof(ABP_AreaChange_AAction_C, UberGraphFrame_BP_AreaChange_AAction_C) == 0x0003D0, "Member 'ABP_AreaChange_AAction_C::UberGraphFrame_BP_AreaChange_AAction_C' has a wrong offset!");
static_assert(offsetof(ABP_AreaChange_AAction_C, MapIconLocation) == 0x0003D8, "Member 'ABP_AreaChange_AAction_C::MapIconLocation' has a wrong offset!");
static_assert(offsetof(ABP_AreaChange_AAction_C, MEC_AREA_CHANGE) == 0x0003E0, "Member 'ABP_AreaChange_AAction_C::MEC_AREA_CHANGE' has a wrong offset!");
static_assert(offsetof(ABP_AreaChange_AAction_C, NextAreaId) == 0x0003E8, "Member 'ABP_AreaChange_AAction_C::NextAreaId' has a wrong offset!");
static_assert(offsetof(ABP_AreaChange_AAction_C, NextWarpPoint) == 0x0003EC, "Member 'ABP_AreaChange_AAction_C::NextWarpPoint' has a wrong offset!");
static_assert(offsetof(ABP_AreaChange_AAction_C, IconHelper) == 0x0003F0, "Member 'ABP_AreaChange_AAction_C::IconHelper' has a wrong offset!");

}

