#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_LvUpEvent

#include "Basic.hpp"

#include "BPI_LvUpEvent_classes.hpp"
#include "BPI_LvUpEvent_parameters.hpp"


namespace SDK
{

// Function BPI_LvUpEvent.BPI_LvUpEvent_C.LvUpEventStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::LvUpEventStart(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "LvUpEventStart");

	Params::BPI_LvUpEvent_C_LvUpEventStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.IsEndLvUpEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::IsEndLvUpEvent(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "IsEndLvUpEvent");

	Params::BPI_LvUpEvent_C_IsEndLvUpEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.InitializeLvUpEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CharaChanger                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::InitializeLvUpEvent(class AActor* CharaChanger, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "InitializeLvUpEvent");

	Params::BPI_LvUpEvent_C_InitializeLvUpEvent Parms{};

	Parms.CharaChanger = CharaChanger;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.GrowUpFromResultData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FResultData                      ResultData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ExistLvUpChara                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::GrowUpFromResultData(const struct FResultData& ResultData, bool* ExistLvUpChara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "GrowUpFromResultData");

	Params::BPI_LvUpEvent_C_GrowUpFromResultData Parms{};

	Parms.ResultData = std::move(ResultData);

	UObject::ProcessEvent(Func, &Parms);

	if (ExistLvUpChara != nullptr)
		*ExistLvUpChara = Parms.ExistLvUpChara;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.StatusCameraStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CharaChanger                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::StatusCameraStart(class AActor* CharaChanger, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "StatusCameraStart");

	Params::BPI_LvUpEvent_C_StatusCameraStart Parms{};

	Parms.CharaChanger = CharaChanger;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.TryCreateLvUpEvent_ForUnite
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ResultNkmIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HappenLvUpEvent                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::TryCreateLvUpEvent_ForUnite(int32 ResultNkmIndex, bool* HappenLvUpEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "TryCreateLvUpEvent_ForUnite");

	Params::BPI_LvUpEvent_C_TryCreateLvUpEvent_ForUnite Parms{};

	Parms.ResultNkmIndex = ResultNkmIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (HappenLvUpEvent != nullptr)
		*HappenLvUpEvent = Parms.HappenLvUpEvent;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.StatusCameraEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::StatusCameraEnd(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "StatusCameraEnd");

	Params::BPI_LvUpEvent_C_StatusCameraEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.CloseUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Immediate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::CloseUI(bool Immediate, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "CloseUI");

	Params::BPI_LvUpEvent_C_CloseUI Parms{};

	Parms.Immediate = Immediate;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.IsEndCloseUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::IsEndCloseUI(bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "IsEndCloseUI");

	Params::BPI_LvUpEvent_C_IsEndCloseUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;
}


// Function BPI_LvUpEvent.BPI_LvUpEvent_C.PreLoadModel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LvUpEvent_C::PreLoadModel(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LvUpEvent_C", "PreLoadModel");

	Params::BPI_LvUpEvent_C_PreLoadModel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}

}

