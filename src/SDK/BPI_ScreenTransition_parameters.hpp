#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ScreenTransition

#include "Basic.hpp"

#include "E_ScreenTransitionFadeType_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.FadeIn
// 0x0001 (0x0001 - 0x0000)
struct BPI_ScreenTransition_C_FadeIn final
{
public:
	E_ScreenTransitionFadeType                    Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_FadeIn) == 0x000001, "Wrong alignment on BPI_ScreenTransition_C_FadeIn");
static_assert(sizeof(BPI_ScreenTransition_C_FadeIn) == 0x000001, "Wrong size on BPI_ScreenTransition_C_FadeIn");
static_assert(offsetof(BPI_ScreenTransition_C_FadeIn, Type) == 0x000000, "Member 'BPI_ScreenTransition_C_FadeIn::Type' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.FadeOut
// 0x0001 (0x0001 - 0x0000)
struct BPI_ScreenTransition_C_FadeOut final
{
public:
	E_ScreenTransitionFadeType                    Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_FadeOut) == 0x000001, "Wrong alignment on BPI_ScreenTransition_C_FadeOut");
static_assert(sizeof(BPI_ScreenTransition_C_FadeOut) == 0x000001, "Wrong size on BPI_ScreenTransition_C_FadeOut");
static_assert(offsetof(BPI_ScreenTransition_C_FadeOut, Type) == 0x000000, "Member 'BPI_ScreenTransition_C_FadeOut::Type' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.isFadeFinish
// 0x0001 (0x0001 - 0x0000)
struct BPI_ScreenTransition_C_IsFadeFinish final
{
public:
	bool                                          OutValue;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ScreenTransition_C_IsFadeFinish) == 0x000001, "Wrong alignment on BPI_ScreenTransition_C_IsFadeFinish");
static_assert(sizeof(BPI_ScreenTransition_C_IsFadeFinish) == 0x000001, "Wrong size on BPI_ScreenTransition_C_IsFadeFinish");
static_assert(offsetof(BPI_ScreenTransition_C_IsFadeFinish, OutValue) == 0x000000, "Member 'BPI_ScreenTransition_C_IsFadeFinish::OutValue' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.getFinishByFrame
// 0x0004 (0x0004 - 0x0000)
struct BPI_ScreenTransition_C_GetFinishByFrame final
{
public:
	float                                         OutValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_GetFinishByFrame) == 0x000004, "Wrong alignment on BPI_ScreenTransition_C_GetFinishByFrame");
static_assert(sizeof(BPI_ScreenTransition_C_GetFinishByFrame) == 0x000004, "Wrong size on BPI_ScreenTransition_C_GetFinishByFrame");
static_assert(offsetof(BPI_ScreenTransition_C_GetFinishByFrame, OutValue) == 0x000000, "Member 'BPI_ScreenTransition_C_GetFinishByFrame::OutValue' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.getCaptureTexture
// 0x0008 (0x0008 - 0x0000)
struct BPI_ScreenTransition_C_GetCaptureTexture final
{
public:
	class UTexture2D*                             OutTexture;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_GetCaptureTexture) == 0x000008, "Wrong alignment on BPI_ScreenTransition_C_GetCaptureTexture");
static_assert(sizeof(BPI_ScreenTransition_C_GetCaptureTexture) == 0x000008, "Wrong size on BPI_ScreenTransition_C_GetCaptureTexture");
static_assert(offsetof(BPI_ScreenTransition_C_GetCaptureTexture, OutTexture) == 0x000000, "Member 'BPI_ScreenTransition_C_GetCaptureTexture::OutTexture' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.setCaptureTexture
// 0x0008 (0x0008 - 0x0000)
struct BPI_ScreenTransition_C_SetCaptureTexture final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_SetCaptureTexture) == 0x000008, "Wrong alignment on BPI_ScreenTransition_C_SetCaptureTexture");
static_assert(sizeof(BPI_ScreenTransition_C_SetCaptureTexture) == 0x000008, "Wrong size on BPI_ScreenTransition_C_SetCaptureTexture");
static_assert(offsetof(BPI_ScreenTransition_C_SetCaptureTexture, InTexture) == 0x000000, "Member 'BPI_ScreenTransition_C_SetCaptureTexture::InTexture' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.GetFadeState
// 0x0001 (0x0001 - 0x0000)
struct BPI_ScreenTransition_C_GetFadeState final
{
public:
	E_UI_FADE_STATE                               OutType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_GetFadeState) == 0x000001, "Wrong alignment on BPI_ScreenTransition_C_GetFadeState");
static_assert(sizeof(BPI_ScreenTransition_C_GetFadeState) == 0x000001, "Wrong size on BPI_ScreenTransition_C_GetFadeState");
static_assert(offsetof(BPI_ScreenTransition_C_GetFadeState, OutType) == 0x000000, "Member 'BPI_ScreenTransition_C_GetFadeState::OutType' has a wrong offset!");

// Function BPI_ScreenTransition.BPI_ScreenTransition_C.screenCover
// 0x0001 (0x0001 - 0x0000)
struct BPI_ScreenTransition_C_ScreenCover final
{
public:
	E_ScreenTransitionFadeType                    InType;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ScreenTransition_C_ScreenCover) == 0x000001, "Wrong alignment on BPI_ScreenTransition_C_ScreenCover");
static_assert(sizeof(BPI_ScreenTransition_C_ScreenCover) == 0x000001, "Wrong size on BPI_ScreenTransition_C_ScreenCover");
static_assert(offsetof(BPI_ScreenTransition_C_ScreenCover, InType) == 0x000000, "Member 'BPI_ScreenTransition_C_ScreenCover::InType' has a wrong offset!");

}

