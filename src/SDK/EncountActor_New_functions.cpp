#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountActor_New

#include "Basic.hpp"

#include "EncountActor_New_classes.hpp"
#include "EncountActor_New_parameters.hpp"


namespace SDK
{

// Function EncountActor_New.EncountActor_New_C.ExecuteUbergraph_EncountActor_New
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::ExecuteUbergraph_EncountActor_New(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ExecuteUbergraph_EncountActor_New");

	Params::EncountActor_New_C_ExecuteUbergraph_EncountActor_New Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ReceiveEndPlay");

	Params::EncountActor_New_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.Evt_StartHalfLessEncountSequence
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_StartHalfLessEncountSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_StartHalfLessEncountSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_Destroy
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_FieldFailed
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_FieldFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_FieldFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_StartDefaultEncountSequence
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_StartDefaultEncountSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_StartDefaultEncountSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.BndEvt__AreaSearchSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AEncountActor_New_C::BndEvt__AreaSearchSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BndEvt__AreaSearchSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::EncountActor_New_C_BndEvt__AreaSearchSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.Evt_PlayerSideEndSetUp
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             PlayerUnitArray                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AEncountActor_New_C::Evt_PlayerSideEndSetUp(TArray<class ACharaBase_C*>& PlayerUnitArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_PlayerSideEndSetUp");

	Params::EncountActor_New_C_Evt_PlayerSideEndSetUp Parms{};

	Parms.PlayerUnitArray = std::move(PlayerUnitArray);

	UObject::ProcessEvent(Func, &Parms);

	PlayerUnitArray = std::move(Parms.PlayerUnitArray);
}


// Function EncountActor_New.EncountActor_New_C.Evt_EnemySideEndSetUp
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             EnemyUnitArray                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               EnemyPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AEncountActor_New_C::Evt_EnemySideEndSetUp(TArray<class ACharaBase_C*>& EnemyUnitArray, TArray<struct FTransform>& EnemyPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_EnemySideEndSetUp");

	Params::EncountActor_New_C_Evt_EnemySideEndSetUp Parms{};

	Parms.EnemyUnitArray = std::move(EnemyUnitArray);
	Parms.EnemyPos = std::move(EnemyPos);

	UObject::ProcessEvent(Func, &Parms);

	EnemyUnitArray = std::move(Parms.EnemyUnitArray);
	EnemyPos = std::move(Parms.EnemyPos);
}


// Function EncountActor_New.EncountActor_New_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ReceiveTick");

	Params::EncountActor_New_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AEncountActor_New_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.UnLoadBattleSubLevel
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::UnLoadBattleSubLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "UnLoadBattleSubLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_LoadBattleSubLevel
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_LoadBattleSubLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_LoadBattleSubLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_BattleStart
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_BattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_BattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.ExistSublevelUnload
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::ExistSublevelUnload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ExistSublevelUnload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_StartManual
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_StartManual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_StartManual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_StartMap
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_StartMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_StartMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_StartEvent
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_StartEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_StartEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Evt_ReturnMap
// (BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Evt_ReturnMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Evt_ReturnMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.OnLoaded_57169B0B42D693905D24FCB178E94786
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AEncountActor_New_C::OnLoaded_57169B0B42D693905D24FCB178E94786(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "OnLoaded_57169B0B42D693905D24FCB178E94786");

	Params::EncountActor_New_C_OnLoaded_57169B0B42D693905D24FCB178E94786 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.OnLoaded_96204D22420F55F2CAEA739EB70954DE
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::OnLoaded_96204D22420F55F2CAEA739EB70954DE(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "OnLoaded_96204D22420F55F2CAEA739EB70954DE");

	Params::EncountActor_New_C_OnLoaded_96204D22420F55F2CAEA739EB70954DE Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.checkType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_ENCOUNT_SPAWN                     RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::CheckType(E_BTL_ENCOUNT_SPAWN* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "checkType");

	Params::EncountActor_New_C_CheckType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function EncountActor_New.EncountActor_New_C.SpawnBattleCameraSeamless
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             Enemys                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               EnemyPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSoftObjectPtr<class UMaterialParameterApplier>MPA_MapDark                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AEncountActor_New_C::SpawnBattleCameraSeamless(TArray<class ACharaBase_C*>& Enemys, TArray<struct FTransform>& EnemyPos, TSoftObjectPtr<class UMaterialParameterApplier> MPA_MapDark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "SpawnBattleCameraSeamless");

	Params::EncountActor_New_C_SpawnBattleCameraSeamless Parms{};

	Parms.Enemys = std::move(Enemys);
	Parms.EnemyPos = std::move(EnemyPos);
	Parms.MPA_MapDark = MPA_MapDark;

	UObject::ProcessEvent(Func, &Parms);

	Enemys = std::move(Parms.Enemys);
	EnemyPos = std::move(Parms.EnemyPos);
}


// Function EncountActor_New.EncountActor_New_C.StartBattlePrevCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             Enemys                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               EnemyPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AEncountActor_New_C::StartBattlePrevCamera(TArray<class ACharaBase_C*>& Enemys, TArray<struct FTransform>& EnemyPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "StartBattlePrevCamera");

	Params::EncountActor_New_C_StartBattlePrevCamera Parms{};

	Parms.Enemys = std::move(Enemys);
	Parms.EnemyPos = std::move(EnemyPos);

	UObject::ProcessEvent(Func, &Parms);

	Enemys = std::move(Parms.Enemys);
	EnemyPos = std::move(Parms.EnemyPos);
}


// Function EncountActor_New.EncountActor_New_C.SetBattleBGM
// (Public, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::SetBattleBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "SetBattleBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Step1Func
// (Public, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Step1Func()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Step1Func");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.HoldMapCameraParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::HoldMapCameraParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "HoldMapCameraParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Step4Func
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Step4Func()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Step4Func");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.StepFunc
// (Public, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::StepFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "StepFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Step2Func
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Step2Func()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Step2Func");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Step3Func
// (Public, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::Step3Func()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Step3Func");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.NoLoadMakeEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::NoLoadMakeEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "NoLoadMakeEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.EventSeparete
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Name2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TURR                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::EventSeparete(class FName Param_Name, class FName Name2, bool* TURR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "EventSeparete");

	Params::EncountActor_New_C_EventSeparete Parms{};

	Parms.Param_Name = Param_Name;
	Parms.Name2 = Name2;

	UObject::ProcessEvent(Func, &Parms);

	if (TURR != nullptr)
		*TURR = Parms.TURR;
}


// Function EncountActor_New.EncountActor_New_C.NextEventSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             One_ONflag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             One_OFFFlag                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Two_ONFlag                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Two_OFFFlag                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Map                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Area                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   One_Point                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Map                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Area                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Two_Point                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextMap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextArea                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::NextEventSelect(class FName One_ONflag, class FName One_OFFFlag, class FName Two_ONFlag, class FName Two_OFFFlag, int32 One_Map, int32 One_Area, int32 One_Point, int32 Two_Map, int32 Two_Area, int32 Two_Point, int32* NextMap, int32* NextArea, int32* NextPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "NextEventSelect");

	Params::EncountActor_New_C_NextEventSelect Parms{};

	Parms.One_ONflag = One_ONflag;
	Parms.One_OFFFlag = One_OFFFlag;
	Parms.Two_ONFlag = Two_ONFlag;
	Parms.Two_OFFFlag = Two_OFFFlag;
	Parms.One_Map = One_Map;
	Parms.One_Area = One_Area;
	Parms.One_Point = One_Point;
	Parms.Two_Map = Two_Map;
	Parms.Two_Area = Two_Area;
	Parms.Two_Point = Two_Point;

	UObject::ProcessEvent(Func, &Parms);

	if (NextMap != nullptr)
		*NextMap = Parms.NextMap;

	if (NextArea != nullptr)
		*NextArea = Parms.NextArea;

	if (NextPoint != nullptr)
		*NextPoint = Parms.NextPoint;
}


// Function EncountActor_New.EncountActor_New_C.LoadEventSubLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::LoadEventSubLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "LoadEventSubLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.FIndBattleMapDarkSetting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapDarkID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBattleMapDark_T                 MapDarkSetting                                         (Parm, OutParm, HasGetValueTypeHash)

void AEncountActor_New_C::FIndBattleMapDarkSetting(int32 MapDarkID, struct FBattleMapDark_T* MapDarkSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "FIndBattleMapDarkSetting");

	Params::EncountActor_New_C_FIndBattleMapDarkSetting Parms{};

	Parms.MapDarkID = MapDarkID;

	UObject::ProcessEvent(Func, &Parms);

	if (MapDarkSetting != nullptr)
		*MapDarkSetting = std::move(Parms.MapDarkSetting);
}


// Function EncountActor_New.EncountActor_New_C.GetOriginTrans
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Trans                                                  (Parm, OutParm, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::GetOriginTrans(struct FTransform* Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "GetOriginTrans");

	Params::EncountActor_New_C_GetOriginTrans Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Trans != nullptr)
		*Trans = std::move(Parms.Trans);
}


// Function EncountActor_New.EncountActor_New_C.BattleFieldBeforeBattle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleFieldPoint                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBattleFieldLevel                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BattleFieldBeforeBattle(int32 BattleFieldPoint, bool* IsBattleFieldLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BattleFieldBeforeBattle");

	Params::EncountActor_New_C_BattleFieldBeforeBattle Parms{};

	Parms.BattleFieldPoint = BattleFieldPoint;

	UObject::ProcessEvent(Func, &Parms);

	if (IsBattleFieldLevel != nullptr)
		*IsBattleFieldLevel = Parms.IsBattleFieldLevel;
}


// Function EncountActor_New.EncountActor_New_C.BattleFieldAfterBattle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::BattleFieldAfterBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BattleFieldAfterBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.EnableChangeMotion
// (Private, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::EnableChangeMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "EnableChangeMotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.GetBattleFinishedState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_FINISHED_STATE                    BattleFinishedState                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BattleContinueSaveSlot                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::GetBattleFinishedState(E_BTL_FINISHED_STATE* BattleFinishedState, int32* BattleContinueSaveSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "GetBattleFinishedState");

	Params::EncountActor_New_C_GetBattleFinishedState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleFinishedState != nullptr)
		*BattleFinishedState = Parms.BattleFinishedState;

	if (BattleContinueSaveSlot != nullptr)
		*BattleContinueSaveSlot = Parms.BattleContinueSaveSlot;
}


// Function EncountActor_New.EncountActor_New_C.DestroyActors
// (Private, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::DestroyActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "DestroyActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.PlayerPause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::PlayerPause(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "PlayerPause");

	Params::EncountActor_New_C_PlayerPause Parms{};

	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.SwapBattleAreaParticle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  Particle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::SwapBattleAreaParticle(class UParticleSystem* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "SwapBattleAreaParticle");

	Params::EncountActor_New_C_SwapBattleAreaParticle Parms{};

	Parms.Particle = Particle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EncountActor_New.EncountActor_New_C.ChainEncountLog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::ChainEncountLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "ChainEncountLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.Is Time Attack Battle
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsTimeAttack                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::Is_Time_Attack_Battle(bool* IsTimeAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "Is Time Attack Battle");

	Params::EncountActor_New_C_Is_Time_Attack_Battle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTimeAttack != nullptr)
		*IsTimeAttack = Parms.IsTimeAttack;
}


// Function EncountActor_New.EncountActor_New_C.IsInAgratField
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Inside                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::IsInAgratField(bool* Inside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "IsInAgratField");

	Params::EncountActor_New_C_IsInAgratField Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inside != nullptr)
		*Inside = Parms.Inside;
}


// Function EncountActor_New.EncountActor_New_C.IsBattleAreaHideUnload
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsUnload                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::IsBattleAreaHideUnload(bool* IsUnload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "IsBattleAreaHideUnload");

	Params::EncountActor_New_C_IsBattleAreaHideUnload Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnload != nullptr)
		*IsUnload = Parms.IsUnload;
}


// Function EncountActor_New.EncountActor_New_C.IsEnv
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Param_IsEnv                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::IsEnv(const class FString& LevelName, bool* Param_IsEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "IsEnv");

	Params::EncountActor_New_C_IsEnv Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsEnv != nullptr)
		*Param_IsEnv = Parms.Param_IsEnv;
}


// Function EncountActor_New.EncountActor_New_C.GetBattleHideLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPrimaryAssetId>          BattleHideLevel                                        (Parm, OutParm)

void AEncountActor_New_C::GetBattleHideLevel(TArray<struct FPrimaryAssetId>* BattleHideLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "GetBattleHideLevel");

	Params::EncountActor_New_C_GetBattleHideLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleHideLevel != nullptr)
		*BattleHideLevel = std::move(Parms.BattleHideLevel);
}


// Function EncountActor_New.EncountActor_New_C.RecordNaviPawnClass
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEncountActor_New_C::RecordNaviPawnClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "RecordNaviPawnClass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountActor_New.EncountActor_New_C.BI_CheckType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_ENCOUNT_SPAWN                     Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEncountActor_New_C::BI_CheckType(E_BTL_ENCOUNT_SPAWN* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_CheckType");

	Params::EncountActor_New_C_BI_CheckType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function EncountActor_New.EncountActor_New_C.BI_SetEncountID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_SetEncountID(int32 EncountID, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_SetEncountID");

	Params::EncountActor_New_C_BI_SetEncountID Parms{};

	Parms.EncountID = EncountID;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function EncountActor_New.EncountActor_New_C.BI_LoadEventSubLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_LoadEventSubLevel(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_LoadEventSubLevel");

	Params::EncountActor_New_C_BI_LoadEventSubLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function EncountActor_New.EncountActor_New_C.BI_NoLoadMakeEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_NoLoadMakeEnemy(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_NoLoadMakeEnemy");

	Params::EncountActor_New_C_BI_NoLoadMakeEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function EncountActor_New.EncountActor_New_C.BI_CallEncountCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_CallEncountCamera(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_CallEncountCamera");

	Params::EncountActor_New_C_BI_CallEncountCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function EncountActor_New.EncountActor_New_C.BI_SetBossRoomBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBossRoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_SetBossRoomBattle(bool IsBossRoom, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_SetBossRoomBattle");

	Params::EncountActor_New_C_BI_SetBossRoomBattle Parms{};

	Parms.IsBossRoom = IsBossRoom;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function EncountActor_New.EncountActor_New_C.BI_UnloadPreviousEventSubLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AEncountActor_New_C::BI_UnloadPreviousEventSubLevel(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncountActor_New_C", "BI_UnloadPreviousEventSubLevel");

	Params::EncountActor_New_C_BI_UnloadPreviousEventSubLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

