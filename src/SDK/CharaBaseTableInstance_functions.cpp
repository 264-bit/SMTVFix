#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaBaseTableInstance

#include "Basic.hpp"

#include "CharaBaseTableInstance_classes.hpp"
#include "CharaBaseTableInstance_parameters.hpp"


namespace SDK
{

// Function CharaBaseTableInstance.CharaBaseTableInstance_C.ExecuteUbergraph_CharaBaseTableInstance
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharaBaseTableInstance_C::ExecuteUbergraph_CharaBaseTableInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "ExecuteUbergraph_CharaBaseTableInstance");

	Params::CharaBaseTableInstance_C_ExecuteUbergraph_CharaBaseTableInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACharaBaseTableInstance_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_BadStatusNecessaries
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_BadStatusNecessaries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_BadStatusNecessaries");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_BadStatusParticle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_BadStatusParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_BadStatusParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_CharaAttachParticle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_CharaAttachParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_CharaAttachParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_DeadActionParticle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_DeadActionParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_DeadActionParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_DevilPerformance
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_DevilPerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_DevilPerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusNecessaries
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FBadStatusNecessaries_T>Param_BadStatusNecessaries                             (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_BadStatusNecessaries(TMap<class FName, struct FBadStatusNecessaries_T>* Param_BadStatusNecessaries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusNecessaries");

	Params::CharaBaseTableInstance_C_Get_BadStatusNecessaries Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_BadStatusNecessaries != nullptr)
		*Param_BadStatusNecessaries = std::move(Parms.Param_BadStatusNecessaries);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusParticle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FBadStatusParticles_T>Param_BadStatusParticles                               (Parm, OutParm, ContainsInstancedReference)

void ACharaBaseTableInstance_C::Get_BadStatusParticle(TMap<class FName, struct FBadStatusParticles_T>* Param_BadStatusParticles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusParticle");

	Params::CharaBaseTableInstance_C_Get_BadStatusParticle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_BadStatusParticles != nullptr)
		*Param_BadStatusParticles = std::move(Parms.Param_BadStatusParticles);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_CharaAttachParticle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FCharaAttachParticle_T>Param_CharaAttachParticle                              (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_CharaAttachParticle(TMap<class FName, struct FCharaAttachParticle_T>* Param_CharaAttachParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_CharaAttachParticle");

	Params::CharaBaseTableInstance_C_Get_CharaAttachParticle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CharaAttachParticle != nullptr)
		*Param_CharaAttachParticle = std::move(Parms.Param_CharaAttachParticle);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DeadActionParticle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FDeadActionParticles_T>Param_DeadActionParticle                               (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_DeadActionParticle(TMap<class FName, struct FDeadActionParticles_T>* Param_DeadActionParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DeadActionParticle");

	Params::CharaBaseTableInstance_C_Get_DeadActionParticle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DeadActionParticle != nullptr)
		*Param_DeadActionParticle = std::move(Parms.Param_DeadActionParticle);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DevilPerformance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FDevilPerformance_T>Param_DevilPerformance                                 (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_DevilPerformance(TMap<class FName, struct FDevilPerformance_T>* Param_DevilPerformance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DevilPerformance");

	Params::CharaBaseTableInstance_C_Get_DevilPerformance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DevilPerformance != nullptr)
		*Param_DevilPerformance = std::move(Parms.Param_DevilPerformance);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusNecessaries_List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_BAD_STATUS, struct FBadStatusNecessaries_Array>List                                                   (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_BadStatusNecessaries_List(TMap<E_BAD_STATUS, struct FBadStatusNecessaries_Array>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusNecessaries_List");

	Params::CharaBaseTableInstance_C_Get_BadStatusNecessaries_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusParticle_List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_BAD_STATUS, struct FBadStatusParticles_Array>List                                                   (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_BadStatusParticle_List(TMap<E_BAD_STATUS, struct FBadStatusParticles_Array>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusParticle_List");

	Params::CharaBaseTableInstance_C_Get_BadStatusParticle_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DeadActionParticle_List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_BTL_DEAD_EFFECT, struct FDeadActionParticles_T>List                                                   (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_DeadActionParticle_List(TMap<E_BTL_DEAD_EFFECT, struct FDeadActionParticles_T>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DeadActionParticle_List");

	Params::CharaBaseTableInstance_C_Get_DeadActionParticle_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DevilPerformance_List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_DEVIL_PERFORMANCE_TYPE, struct FDevilPerformance_T>List                                                   (Parm, OutParm)

void ACharaBaseTableInstance_C::Get_DevilPerformance_List(TMap<E_DEVIL_PERFORMANCE_TYPE, struct FDevilPerformance_T>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DevilPerformance_List");

	Params::CharaBaseTableInstance_C_Get_DevilPerformance_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusParticle_Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusParticles_T>    OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ACharaBaseTableInstance_C::Get_BadStatusParticle_Data(E_BAD_STATUS Status, TArray<struct FBadStatusParticles_T>& OutRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusParticle_Data");

	Params::CharaBaseTableInstance_C_Get_BadStatusParticle_Data Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusNecessaries_Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusNecessaries_T>  OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::Get_BadStatusNecessaries_Data(E_BAD_STATUS Status, TArray<struct FBadStatusNecessaries_T>& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusNecessaries_Data");

	Params::CharaBaseTableInstance_C_Get_BadStatusNecessaries_Data Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DeadActionParticle_Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_DEAD_EFFECT                       DeadEffect                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDeadActionParticles_T           DeadAction                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::Get_DeadActionParticle_Data(E_BTL_DEAD_EFFECT DeadEffect, struct FDeadActionParticles_T& DeadAction, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DeadActionParticle_Data");

	Params::CharaBaseTableInstance_C_Get_DeadActionParticle_Data Parms{};

	Parms.DeadEffect = DeadEffect;
	Parms.DeadAction = std::move(DeadAction);

	UObject::ProcessEvent(Func, &Parms);

	DeadAction = std::move(Parms.DeadAction);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_DevilPerformance_Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_DEVIL_PERFORMANCE_TYPE                NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDevilPerformance_T              Param_DevilPerformance                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::Get_DevilPerformance_Data(E_DEVIL_PERFORMANCE_TYPE NewParam, struct FDevilPerformance_T& Param_DevilPerformance, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_DevilPerformance_Data");

	Params::CharaBaseTableInstance_C_Get_DevilPerformance_Data Parms{};

	Parms.NewParam = NewParam;
	Parms.Param_DevilPerformance = std::move(Param_DevilPerformance);

	UObject::ProcessEvent(Func, &Parms);

	Param_DevilPerformance = std::move(Parms.Param_DevilPerformance);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Load_BadStatusDecal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharaBaseTableInstance_C::Load_BadStatusDecal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Load_BadStatusDecal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusDecal_List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_BAD_STATUS, struct FBadStatusDecal_Array>List                                                   (Parm, OutParm, ContainsInstancedReference)

void ACharaBaseTableInstance_C::Get_BadStatusDecal_List(TMap<E_BAD_STATUS, struct FBadStatusDecal_Array>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusDecal_List");

	Params::CharaBaseTableInstance_C_Get_BadStatusDecal_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.Get_BadStatusDecal_Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusDecal_T>        OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ACharaBaseTableInstance_C::Get_BadStatusDecal_Data(E_BAD_STATUS Status, TArray<struct FBadStatusDecal_T>& OutRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "Get_BadStatusDecal_Data");

	Params::CharaBaseTableInstance_C_Get_BadStatusDecal_Data Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetBadStatusSecessariesData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusNecessaries_T>  OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::BI_GetBadStatusSecessariesData(E_BAD_STATUS Status, TArray<struct FBadStatusNecessaries_T>& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetBadStatusSecessariesData");

	Params::CharaBaseTableInstance_C_BI_GetBadStatusSecessariesData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetBadStatusParticleData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusParticles_T>    OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::BI_GetBadStatusParticleData(E_BAD_STATUS Status, TArray<struct FBadStatusParticles_T>& OutRef, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetBadStatusParticleData");

	Params::CharaBaseTableInstance_C_BI_GetBadStatusParticleData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetDeadActionParticleData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_DEAD_EFFECT                       DeadEffect                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDeadActionParticles_T           OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::BI_GetDeadActionParticleData(E_BTL_DEAD_EFFECT DeadEffect, struct FDeadActionParticles_T& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetDeadActionParticleData");

	Params::CharaBaseTableInstance_C_BI_GetDeadActionParticleData Parms{};

	Parms.DeadEffect = DeadEffect;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetDevilPerformanceData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_DEVIL_PERFORMANCE_TYPE                Performance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDevilPerformance_T              OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::BI_GetDevilPerformanceData(E_DEVIL_PERFORMANCE_TYPE Performance, struct FDevilPerformance_T& OutRef, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetDevilPerformanceData");

	Params::CharaBaseTableInstance_C_BI_GetDevilPerformanceData Parms{};

	Parms.Performance = Performance;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetCharaAttachParticle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FCharaAttachParticle_T>Param_CharaAttachParticle                              (Parm, OutParm)

void ACharaBaseTableInstance_C::BI_GetCharaAttachParticle(TMap<class FName, struct FCharaAttachParticle_T>* Param_CharaAttachParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetCharaAttachParticle");

	Params::CharaBaseTableInstance_C_BI_GetCharaAttachParticle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CharaAttachParticle != nullptr)
		*Param_CharaAttachParticle = std::move(Parms.Param_CharaAttachParticle);
}


// Function CharaBaseTableInstance.CharaBaseTableInstance_C.BI_GetBadStatusDecalData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BAD_STATUS                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBadStatusDecal_T>        OutRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharaBaseTableInstance_C::BI_GetBadStatusDecalData(E_BAD_STATUS Status, TArray<struct FBadStatusDecal_T>& OutRef, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaBaseTableInstance_C", "BI_GetBadStatusDecalData");

	Params::CharaBaseTableInstance_C_BI_GetBadStatusDecalData Parms{};

	Parms.Status = Status;
	Parms.OutRef = std::move(OutRef);

	UObject::ProcessEvent(Func, &Parms);

	OutRef = std::move(Parms.OutRef);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

