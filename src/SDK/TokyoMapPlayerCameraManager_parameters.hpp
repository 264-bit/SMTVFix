#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TokyoMapPlayerCameraManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.ExecuteUbergraph_TokyoMapPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager) == 0x000008, "Wrong size on TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager, EntryPoint) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'TokyoMapPlayerCameraManager_C_ExecuteUbergraph_TokyoMapPlayerCameraManager::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct TokyoMapPlayerCameraManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_ReceiveTick) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_ReceiveTick");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_ReceiveTick) == 0x000004, "Wrong size on TokyoMapPlayerCameraManager_C_ReceiveTick");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.AddYawInput
// 0x0020 (0x0020 - 0x0000)
struct TokyoMapPlayerCameraManager_C_AddYawInput final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_AddYawInput) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_AddYawInput");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_AddYawInput) == 0x000020, "Wrong size on TokyoMapPlayerCameraManager_C_AddYawInput");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, Val) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::Val' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddYawInput, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'TokyoMapPlayerCameraManager_C_AddYawInput::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.AddPitchInput
// 0x0024 (0x0024 - 0x0000)
struct TokyoMapPlayerCameraManager_C_AddPitchInput final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_AddPitchInput) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_AddPitchInput");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_AddPitchInput) == 0x000024, "Wrong size on TokyoMapPlayerCameraManager_C_AddPitchInput");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, Val) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::Val' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_ClampAngle_ReturnValue) == 0x000014, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_AddPitchInput, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'TokyoMapPlayerCameraManager_C_AddPitchInput::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.GetForwardVector
// 0x0024 (0x0024 - 0x0000)
struct TokyoMapPlayerCameraManager_C_GetForwardVector final
{
public:
	struct FVector                                Return_Value;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_GetForwardVector) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_GetForwardVector");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_GetForwardVector) == 0x000024, "Wrong size on TokyoMapPlayerCameraManager_C_GetForwardVector");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetForwardVector, Return_Value) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_GetForwardVector::Return_Value' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetForwardVector, CallFunc_GetCameraRotation_ReturnValue) == 0x00000C, "Member 'TokyoMapPlayerCameraManager_C_GetForwardVector::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetForwardVector, CallFunc_GetForwardVector_ReturnValue) == 0x000018, "Member 'TokyoMapPlayerCameraManager_C_GetForwardVector::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function TokyoMapPlayerCameraManager.TokyoMapPlayerCameraManager_C.GetRightVector
// 0x0024 (0x0024 - 0x0000)
struct TokyoMapPlayerCameraManager_C_GetRightVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TokyoMapPlayerCameraManager_C_GetRightVector) == 0x000004, "Wrong alignment on TokyoMapPlayerCameraManager_C_GetRightVector");
static_assert(sizeof(TokyoMapPlayerCameraManager_C_GetRightVector) == 0x000024, "Wrong size on TokyoMapPlayerCameraManager_C_GetRightVector");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetRightVector, ReturnValue) == 0x000000, "Member 'TokyoMapPlayerCameraManager_C_GetRightVector::ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetRightVector, CallFunc_GetCameraRotation_ReturnValue) == 0x00000C, "Member 'TokyoMapPlayerCameraManager_C_GetRightVector::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TokyoMapPlayerCameraManager_C_GetRightVector, CallFunc_GetRightVector_ReturnValue) == 0x000018, "Member 'TokyoMapPlayerCameraManager_C_GetRightVector::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");

}

