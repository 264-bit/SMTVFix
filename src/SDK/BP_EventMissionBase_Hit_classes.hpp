#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventMissionBase_Hit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_EventMissionBaseCommon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EventMissionBase_Hit.BP_EventMissionBase_Hit_C
// 0x0010 (0x02C8 - 0x02B8)
class ABP_EventMissionBase_Hit_C : public ABP_EventMissionBaseCommon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   EventHit;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EventMissionBase_Hit(int32 EntryPoint);
	void EndQuest();
	void Deactivate();
	void CallDeactivate();
	void ReadyQuest();
	void StartQuest();
	void BI_RecalcOverlap();
	void BI_ChangeMaterialAlice();
	void PlayDeadMotion(bool Active);
	void DestroyKeyFree();
	void CheckActive();
	void BPI_GetHitBoxSize(struct FVector* Size);
	void SpawnReflesh(bool* NoUse);
	void BI_FadeInBlack(float Time, bool* Ret);
	void BI_FadeOutBlack(float Time, bool* Ret);
	void BI_FadeInWhite(float Time, bool* Ret);
	void BI_FadeOutWhite(float Time, bool* Ret);
	void BI_DeleteScript(bool* NoUse);
	void BI_SpawnScript(bool* NoUse);
	void BI_CheckActiveArea(bool* Param_IsActive);
	void ForceSpawnScript(bool* NoUse);
	void BI_SetInvalidWindow(bool Invalid, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EventMissionBase_Hit_C">();
	}
	static class ABP_EventMissionBase_Hit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EventMissionBase_Hit_C>();
	}
};
static_assert(alignof(ABP_EventMissionBase_Hit_C) == 0x000008, "Wrong alignment on ABP_EventMissionBase_Hit_C");
static_assert(sizeof(ABP_EventMissionBase_Hit_C) == 0x0002C8, "Wrong size on ABP_EventMissionBase_Hit_C");
static_assert(offsetof(ABP_EventMissionBase_Hit_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_EventMissionBase_Hit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EventMissionBase_Hit_C, EventHit) == 0x0002C0, "Member 'ABP_EventMissionBase_Hit_C::EventHit' has a wrong offset!");

}

