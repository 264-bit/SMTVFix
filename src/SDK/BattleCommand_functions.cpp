#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleCommand

#include "Basic.hpp"

#include "BattleCommand_classes.hpp"
#include "BattleCommand_parameters.hpp"


namespace SDK
{

// Function BattleCommand.BattleCommand_C.ExecuteUbergraph_BattleCommand
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ExecuteUbergraph_BattleCommand(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ExecuteUbergraph_BattleCommand");

	Params::BattleCommand_C_ExecuteUbergraph_BattleCommand Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SpawnOptionCtrl
// (BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SpawnOptionCtrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SpawnOptionCtrl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.OpenTutorialWindow
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_TUTORIAL_WINDOW_MESSAGE_TYPE>  MessageType                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    CleanUp                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::OpenTutorialWindow(const TArray<E_TUTORIAL_WINDOW_MESSAGE_TYPE>& MessageType, bool CleanUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OpenTutorialWindow");

	Params::BattleCommand_C_OpenTutorialWindow Parms{};

	Parms.MessageType = std::move(MessageType);
	Parms.CleanUp = CleanUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ReceiveTick");

	Params::BattleCommand_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.Start Auto Battle Button Help Effect
// (BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::Start_Auto_Battle_Button_Help_Effect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "Start Auto Battle Button Help Effect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ReceiveEndPlay");

	Params::BattleCommand_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBattleCommand_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CallStep
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      M_MainStep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartCursorIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::CallStep(E_BTL_UI_COMM_STEP M_MainStep, int32 StartCursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallStep");

	Params::BattleCommand_C_CallStep Parms{};

	Parms.M_MainStep = M_MainStep;
	Parms.StartCursorIndex = StartCursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.Evt_Initialize
// (BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::Evt_Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "Evt_Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.OnLoaded_DDD9B75145880DA34D813688855E615B
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBattleCommand_C::OnLoaded_DDD9B75145880DA34D813688855E615B(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnLoaded_DDD9B75145880DA34D813688855E615B");

	Params::BattleCommand_C_OnLoaded_DDD9B75145880DA34D813688855E615B Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnLoaded_7D39E72949435427115CBCBD25F297DF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBattleCommand_C::OnLoaded_7D39E72949435427115CBCBD25F297DF(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnLoaded_7D39E72949435427115CBCBD25F297DF");

	Params::BattleCommand_C_OnLoaded_7D39E72949435427115CBCBD25F297DF Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnLoaded_FC22B888429A4250960F64AD7E05ED41
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBattleCommand_C::OnLoaded_FC22B888429A4250960F64AD7E05ED41(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnLoaded_FC22B888429A4250960F64AD7E05ED41");

	Params::BattleCommand_C_OnLoaded_FC22B888429A4250960F64AD7E05ED41 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.StartSeq
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlParty                        InParty                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// TScriptInterface<class IBPI_BattleMain_C>InMainWork                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCounterActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNoMoveCamera                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSkillCriticalValueOne>   SettleCriticalInfo                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBattleCommand_C::StartSeq(const struct FBtlParty& InParty, TScriptInterface<class IBPI_BattleMain_C> InMainWork, bool IsCounterActor, bool IsNoMoveCamera, bool NewParam, TArray<struct FSkillCriticalValueOne>& SettleCriticalInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartSeq");

	Params::BattleCommand_C_StartSeq Parms{};

	Parms.InParty = std::move(InParty);
	Parms.InMainWork = InMainWork;
	Parms.IsCounterActor = IsCounterActor;
	Parms.IsNoMoveCamera = IsNoMoveCamera;
	Parms.NewParam = NewParam;
	Parms.SettleCriticalInfo = std::move(SettleCriticalInfo);

	UObject::ProcessEvent(Func, &Parms);

	SettleCriticalInfo = std::move(Parms.SettleCriticalInfo);
}


// Function BattleCommand.BattleCommand_C.ChangeStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CursorIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ChangeStep(E_BTL_UI_COMM_STEP Step, int32 CursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ChangeStep");

	Params::BattleCommand_C_ChangeStep Parms{};

	Parms.Step = Step;
	Parms.CursorIndex = CursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CallEndStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      Param_PrevStep                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::CallEndStep(E_BTL_UI_COMM_STEP Param_PrevStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallEndStep");

	Params::BattleCommand_C_CallEndStep Parms{};

	Parms.Param_PrevStep = Param_PrevStep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.ChangeMenuVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsView                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::ChangeMenuVisibility(bool IsView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ChangeMenuVisibility");

	Params::BattleCommand_C_ChangeMenuVisibility Parms{};

	Parms.IsView = IsView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.EndCommandMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndCommandMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndCommandMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.EndSkillMenu
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CloseList                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCharaChange                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCancel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::EndSkillMenu(bool CloseList, bool IsCharaChange, bool IsCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndSkillMenu");

	Params::BattleCommand_C_EndSkillMenu Parms{};

	Parms.CloseList = CloseList;
	Parms.IsCharaChange = IsCharaChange;
	Parms.IsCancel = IsCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SetVisibilitySkillList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateVisibility                        IsVisibility                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCancel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::SetVisibilitySkillList(ESlateVisibility IsVisibility, bool IsCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetVisibilitySkillList");

	Params::BattleCommand_C_SetVisibilitySkillList Parms{};

	Parms.IsVisibility = IsVisibility;
	Parms.IsCancel = IsCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.EndItemMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndItemMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndItemMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SetVisibilityItemList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateVisibility                        InVisibility                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetVisibilityItemList(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetVisibilityItemList");

	Params::BattleCommand_C_SetVisibilityItemList Parms{};

	Parms.InVisibility = InVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.EndCondition
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CallEvent
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CallEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartCommandMenu
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::StartCommandMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartCommandMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartSkillMenu
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CursorIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::StartSkillMenu(int32 CursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartSkillMenu");

	Params::BattleCommand_C_StartSkillMenu Parms{};

	Parms.CursorIndex = CursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.StartItemMenu
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CursorIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::StartItemMenu(int32 CursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartItemMenu");

	Params::BattleCommand_C_StartItemMenu Parms{};

	Parms.CursorIndex = CursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.GetItemData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FBtlUIItemData>           ItemData                                               (Parm, OutParm)

void UBattleCommand_C::GetItemData(TArray<struct FBtlUIItemData>* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetItemData");

	Params::BattleCommand_C_GetItemData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemData != nullptr)
		*ItemData = std::move(Parms.ItemData);
}


// Function BattleCommand.BattleCommand_C.StartCondition
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::StartCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqCommandMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqCommandMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqCommandMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CallCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMMAND                        Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCursor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOK                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CallCommand(E_BTL_UI_COMMAND Selection, bool* IsCursor, bool* IsOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallCommand");

	Params::BattleCommand_C_CallCommand Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);

	if (IsCursor != nullptr)
		*IsCursor = Parms.IsCursor;

	if (IsOK != nullptr)
		*IsOK = Parms.IsOK;
}


// Function BattleCommand.BattleCommand_C.PlaySeCommand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCursor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOK                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCancel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsTargetChange                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsTargetDecide                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsError                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsWindowOpen                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::PlaySeCommand(bool IsCursor, bool IsOK, bool IsCancel, bool IsTargetChange, bool IsTargetDecide, bool IsError, bool IsWindowOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "PlaySeCommand");

	Params::BattleCommand_C_PlaySeCommand Parms{};

	Parms.IsCursor = IsCursor;
	Parms.IsOK = IsOK;
	Parms.IsCancel = IsCancel;
	Parms.IsTargetChange = IsTargetChange;
	Parms.IsTargetDecide = IsTargetDecide;
	Parms.IsError = IsError;
	Parms.IsWindowOpen = IsWindowOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.PlaySE
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::PlaySE(class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "PlaySE");

	Params::BattleCommand_C_PlaySE Parms{};

	Parms.InName = InName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CallSummon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CallSummon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallSummon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.ChangeActChara
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InAdd                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSkillMenu                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::ChangeActChara(int32 InAdd, bool IsSkillMenu, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ChangeActChara");

	Params::BattleCommand_C_ChangeActChara Parms{};

	Parms.InAdd = InAdd;
	Parms.IsSkillMenu = IsSkillMenu;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCommand.BattleCommand_C.CallUnionForm
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CallUnionForm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallUnionForm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqSkillMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqSkillMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqSkillMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartSkillMenu_Core
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Lo_CursorIndex1                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Lo_TopIndex1                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::StartSkillMenu_Core(int32 Lo_CursorIndex1, int32 Lo_TopIndex1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartSkillMenu_Core");

	Params::BattleCommand_C_StartSkillMenu_Core Parms{};

	Parms.Lo_CursorIndex1 = Lo_CursorIndex1;
	Parms.Lo_TopIndex1 = Lo_TopIndex1;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CheckIsHero
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CheckIsHero(int32 Param_Index, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckIsHero");

	Params::BattleCommand_C_CheckIsHero Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCommand.BattleCommand_C.CheckSkillList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           OutList                                                (Parm, OutParm)

void UBattleCommand_C::CheckSkillList(TArray<int32>& Array, TArray<int32>* OutList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckSkillList");

	Params::BattleCommand_C_CheckSkillList Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);
}


// Function BattleCommand.BattleCommand_C.SeqItemMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqItemMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqItemMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqEscapeMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqEscapeMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqEscapeMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqActEndMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqActEndMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqActEndMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqTalkMenuFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqTalkMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqTalkMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqConditionFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqConditionFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqConditionFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.IsInitialized
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsInitialized(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsInitialized");

	Params::BattleCommand_C_IsInitialized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCommand.BattleCommand_C.UIRemoveFromParent
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::UIRemoveFromParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UIRemoveFromParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.IsFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsFinished(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsFinished");

	Params::BattleCommand_C_IsFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCommand.BattleCommand_C.GetResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FBtlCommand                      RetValue                                               (Parm, OutParm)

void UBattleCommand_C::GetResult(struct FBtlCommand* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetResult");

	Params::BattleCommand_C_GetResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleCommand.BattleCommand_C.GetSkillMenuCursor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Top_Index                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::GetSkillMenuCursor(int32* PartyIndex, int32* Top_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetSkillMenuCursor");

	Params::BattleCommand_C_GetSkillMenuCursor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndex != nullptr)
		*PartyIndex = Parms.PartyIndex;

	if (Top_Index != nullptr)
		*Top_Index = Parms.Top_Index;
}


// Function BattleCommand.BattleCommand_C.GetItemMenuCursor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::GetItemMenuCursor(int32* PartyIndex, int32* TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetItemMenuCursor");

	Params::BattleCommand_C_GetItemMenuCursor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartyIndex != nullptr)
		*PartyIndex = Parms.PartyIndex;

	if (TopIndex != nullptr)
		*TopIndex = Parms.TopIndex;
}


// Function BattleCommand.BattleCommand_C.EndSeq
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndSeq()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndSeq");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.Pause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::Pause(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "Pause");

	Params::BattleCommand_C_Pause Parms{};

	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SetMainWork
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>MainWork                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::SetMainWork(TScriptInterface<class IBPI_BattleMain_C> MainWork)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetMainWork");

	Params::BattleCommand_C_SetMainWork Parms{};

	Parms.MainWork = MainWork;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.StartItemMenu_Core
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CursorIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::StartItemMenu_Core(int32 CursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartItemMenu_Core");

	Params::BattleCommand_C_StartItemMenu_Core Parms{};

	Parms.CursorIndex = CursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CheckUsedSkillNahobino
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           CheckSkillId                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<bool>                            IsUsedList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsUsed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CheckUsedSkillNahobino(int32 SkillId, TArray<int32>& CheckSkillId, TArray<bool>& IsUsedList, bool* IsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckUsedSkillNahobino");

	Params::BattleCommand_C_CheckUsedSkillNahobino Parms{};

	Parms.SkillId = SkillId;
	Parms.CheckSkillId = std::move(CheckSkillId);
	Parms.IsUsedList = std::move(IsUsedList);

	UObject::ProcessEvent(Func, &Parms);

	CheckSkillId = std::move(Parms.CheckSkillId);
	IsUsedList = std::move(Parms.IsUsedList);

	if (IsUsed != nullptr)
		*IsUsed = Parms.IsUsed;
}


// Function BattleCommand.BattleCommand_C.CheckSkillList_UseData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBtlUISkill_UseData_st>   SkillUseData                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBtlUISkill_UseData_st>   Out                                                    (Parm, OutParm)

void UBattleCommand_C::CheckSkillList_UseData(TArray<struct FBtlUISkill_UseData_st>& SkillUseData, TArray<struct FBtlUISkill_UseData_st>* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckSkillList_UseData");

	Params::BattleCommand_C_CheckSkillList_UseData Parms{};

	Parms.SkillUseData = std::move(SkillUseData);

	UObject::ProcessEvent(Func, &Parms);

	SkillUseData = std::move(Parms.SkillUseData);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function BattleCommand.BattleCommand_C.CallCommandCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CallCommandCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallCommandCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.ChangeCursorFunc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSkill                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsTargetStart                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCallCamera                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::ChangeCursorFunc(bool IsSkill, bool IsTargetStart, bool IsCallCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ChangeCursorFunc");

	Params::BattleCommand_C_ChangeCursorFunc Parms{};

	Parms.IsSkill = IsSkill;
	Parms.IsTargetStart = IsTargetStart;
	Parms.IsCallCamera = IsCallCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SetAllUIVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::SetAllUIVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetAllUIVisibility");

	Params::BattleCommand_C_SetAllUIVisibility Parms{};

	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SeqTargetSelectFunc
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqTargetSelectFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqTargetSelectFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartTargetSelect
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::StartTargetSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartTargetSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.EndTargetSelect
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDoEscape                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::EndTargetSelect(bool IsDoEscape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndTargetSelect");

	Params::BattleCommand_C_EndTargetSelect Parms{};

	Parms.IsDoEscape = IsDoEscape;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.BI_GetTargetSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleTargetSelect_C>BPI                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_GetTargetSelect(TScriptInterface<class IBPI_BattleTargetSelect_C>* BPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_GetTargetSelect");

	Params::BattleCommand_C_BI_GetTargetSelect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BPI != nullptr)
		*BPI = Parms.BPI;
}


// Function BattleCommand.BattleCommand_C.GetBPIPTUtilInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTUtilInterface>Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::GetBPIPTUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetBPIPTUtilInterface");

	Params::BattleCommand_C_GetBPIPTUtilInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCommand.BattleCommand_C.GetPTMemDataInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTMemDataInterface>Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::GetPTMemDataInterface(TScriptInterface<class IBPI_PTMemDataInterface>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetPTMemDataInterface");

	Params::BattleCommand_C_GetPTMemDataInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCommand.BattleCommand_C.GetBPIMainInterface
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_MainInterface>AsBPI_Main_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::GetBPIMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetBPIMainInterface");

	Params::BattleCommand_C_GetBPIMainInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Main_Interface != nullptr)
		*AsBPI_Main_Interface = Parms.AsBPI_Main_Interface;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BattleCommand.BattleCommand_C.CallPartyCamera
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSelf                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CallPartyCamera(bool IsSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallPartyCamera");

	Params::BattleCommand_C_CallPartyCamera Parms{};

	Parms.IsSelf = IsSelf;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.BI_GetBattleMain
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>BattleMain                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_GetBattleMain(TScriptInterface<class IBPI_BattleMain_C>* BattleMain, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_GetBattleMain");

	Params::BattleCommand_C_BI_GetBattleMain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleMain != nullptr)
		*BattleMain = Parms.BattleMain;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BattleCommand.BattleCommand_C.ShowPlayerParty
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HideEnemy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsShowOnlyMyself                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::ShowPlayerParty(bool HideEnemy, bool IsShowOnlyMyself)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ShowPlayerParty");

	Params::BattleCommand_C_ShowPlayerParty Parms{};

	Parms.HideEnemy = HideEnemy;
	Parms.IsShowOnlyMyself = IsShowOnlyMyself;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.HidePlayerParty
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::HidePlayerParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "HidePlayerParty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.ShowPartyCheck
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::ShowPartyCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ShowPartyCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CommonHelpWindowFinalize
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CommonHelpWindowFinalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CommonHelpWindowFinalize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CommonHelpWindowInitialize
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CommonHelpWindowInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CommonHelpWindowInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.BI_GetBattleUIManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleUIManager_C>Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_GetBattleUIManager(TScriptInterface<class IBPI_BattleUIManager_C>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_GetBattleUIManager");

	Params::BattleCommand_C_BI_GetBattleUIManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCommand.BattleCommand_C.CommandFinished
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CommandFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CommandFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.GetHeroIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::GetHeroIndex(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetHeroIndex");

	Params::BattleCommand_C_GetHeroIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BattleCommand.BattleCommand_C.SetMP Forecast
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetMP_Forecast(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetMP Forecast");

	Params::BattleCommand_C_SetMP_Forecast Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SetSkillHelpText
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetSkillHelpText(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetSkillHelpText");

	Params::BattleCommand_C_SetSkillHelpText Parms{};

	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OpenCommonHelpWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::OpenCommonHelpWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OpenCommonHelpWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CloseCommonHelpWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CloseCommonHelpWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CloseCommonHelpWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SetItemHelpText
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetItemHelpText(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetItemHelpText");

	Params::BattleCommand_C_SetItemHelpText Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.StartActEndMenu
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoAutoBattleButtonHelp                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::StartActEndMenu(bool NoAutoBattleButtonHelp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartActEndMenu");

	Params::BattleCommand_C_StartActEndMenu Parms{};

	Parms.NoAutoBattleButtonHelp = NoAutoBattleButtonHelp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.EndActEndMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndActEndMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndActEndMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.ShowActionName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_COMM_TYPE                         OverrideCommType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HaveToGoActingPosition                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::ShowActionName(E_BTL_COMM_TYPE OverrideCommType, bool HaveToGoActingPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ShowActionName");

	Params::BattleCommand_C_ShowActionName Parms{};

	Parms.OverrideCommType = OverrideCommType;
	Parms.HaveToGoActingPosition = HaveToGoActingPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.HideActionName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::HideActionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "HideActionName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.IsResultCommandRecome
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::IsResultCommandRecome()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsResultCommandRecome");

	Params::BattleCommand_C_IsResultCommandRecome Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.SetCommandHelpText
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMMAND                        Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetCommandHelpText(E_BTL_UI_COMMAND Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetCommandHelpText");

	Params::BattleCommand_C_SetCommandHelpText Parms{};

	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.IsHaveToHideActionName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    HaveToDo                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsHaveToHideActionName(bool* HaveToDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsHaveToHideActionName");

	Params::BattleCommand_C_IsHaveToHideActionName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HaveToDo != nullptr)
		*HaveToDo = Parms.HaveToDo;
}


// Function BattleCommand.BattleCommand_C.StackStep
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::StackStep(E_BTL_UI_COMM_STEP Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StackStep");

	Params::BattleCommand_C_StackStep Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.PopStep
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      PopedStep                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::PopStep(E_BTL_UI_COMM_STEP* PopedStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "PopStep");

	Params::BattleCommand_C_PopStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PopedStep != nullptr)
		*PopedStep = Parms.PopedStep;
}


// Function BattleCommand.BattleCommand_C.ClearStep
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::ClearStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ClearStep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.TopStep
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_UI_COMM_STEP                      Param_TopStep                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::TopStep(E_BTL_UI_COMM_STEP* Param_TopStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "TopStep");

	Params::BattleCommand_C_TopStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_TopStep != nullptr)
		*Param_TopStep = Parms.Param_TopStep;
}


// Function BattleCommand.BattleCommand_C.CallStartStep
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMM_STEP                      Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Top                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::CallStartStep(E_BTL_UI_COMM_STEP Step, int32 Param_Index, int32 Top)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CallStartStep");

	Params::BattleCommand_C_CallStartStep Parms{};

	Parms.Step = Step;
	Parms.Param_Index = Param_Index;
	Parms.Top = Top;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.ReverseStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CursorIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TopIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ReverseStep(int32 CursorIndex, int32 TopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ReverseStep");

	Params::BattleCommand_C_ReverseStep Parms{};

	Parms.CursorIndex = CursorIndex;
	Parms.TopIndex = TopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.PrevStep
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_UI_COMM_STEP                      Param_PrevStep                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::PrevStep(E_BTL_UI_COMM_STEP* Param_PrevStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "PrevStep");

	Params::BattleCommand_C_PrevStep Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PrevStep != nullptr)
		*Param_PrevStep = Parms.Param_PrevStep;
}


// Function BattleCommand.BattleCommand_C.SeqAutoBattleCheckFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqAutoBattleCheckFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqAutoBattleCheckFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartAutoBattleCheck
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::StartAutoBattleCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartAutoBattleCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.StartOptionMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::StartOptionMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "StartOptionMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.EndOptionMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndOptionMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndOptionMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SeqOptionMenuFunc
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SeqOptionMenuFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SeqOptionMenuFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CalcItemArea
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_SKILL_TARGET UBattleCommand_C::CalcItemArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CalcItemArea");

	Params::BattleCommand_C_CalcItemArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.CalcItemDefenseAishou
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ATTRIBUTE_TYPE                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_ATTRIBUTE_TYPE UBattleCommand_C::CalcItemDefenseAishou()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CalcItemDefenseAishou");

	Params::BattleCommand_C_CalcItemDefenseAishou Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.IsSkillTargetSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsSkill                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsSkillTargetSelect(bool* IsSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsSkillTargetSelect");

	Params::BattleCommand_C_IsSkillTargetSelect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSkill != nullptr)
		*IsSkill = Parms.IsSkill;
}


// Function BattleCommand.BattleCommand_C.IsSelectableTarget
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Selectable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsSelectableTarget(bool* Selectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsSelectableTarget");

	Params::BattleCommand_C_IsSelectableTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Selectable != nullptr)
		*Selectable = Parms.Selectable;
}


// Function BattleCommand.BattleCommand_C.IsSummonSkill
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsSummon                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsSummonSkill(bool* IsSummon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsSummonSkill");

	Params::BattleCommand_C_IsSummonSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSummon != nullptr)
		*IsSummon = Parms.IsSummon;
}


// Function BattleCommand.BattleCommand_C.UpdateEnemyInfoAishouNotice
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSkill                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::UpdateEnemyInfoAishouNotice(bool IsSkill, bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UpdateEnemyInfoAishouNotice");

	Params::BattleCommand_C_UpdateEnemyInfoAishouNotice Parms{};

	Parms.IsSkill = IsSkill;
	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.BI_GetPartySystem
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleParty_C>PartySystem                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_GetPartySystem(TScriptInterface<class IBPI_BattleParty_C>* PartySystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_GetPartySystem");

	Params::BattleCommand_C_BI_GetPartySystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PartySystem != nullptr)
		*PartySystem = Parms.PartySystem;
}


// Function BattleCommand.BattleCommand_C.GetBPICalc
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_CalcInterface>AsBPI_Calc_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::GetBPICalc(TScriptInterface<class IBPI_CalcInterface>* AsBPI_Calc_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetBPICalc");

	Params::BattleCommand_C_GetBPICalc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Calc_Interface != nullptr)
		*AsBPI_Calc_Interface = Parms.AsBPI_Calc_Interface;
}


// Function BattleCommand.BattleCommand_C.CalcItemDefenseAishouArray
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<E_ATTRIBUTE_TYPE>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<E_ATTRIBUTE_TYPE> UBattleCommand_C::CalcItemDefenseAishouArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CalcItemDefenseAishouArray");

	Params::BattleCommand_C_CalcItemDefenseAishouArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.IsAllMenuDisappeared
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDisappeared                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsAllMenuDisappeared(bool* IsDisappeared)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsAllMenuDisappeared");

	Params::BattleCommand_C_IsAllMenuDisappeared Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDisappeared != nullptr)
		*IsDisappeared = Parms.IsDisappeared;
}


// Function BattleCommand.BattleCommand_C.GetActorIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   M_PartyIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::GetActorIndex(int32* M_PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetActorIndex");

	Params::BattleCommand_C_GetActorIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (M_PartyIndex != nullptr)
		*M_PartyIndex = Parms.M_PartyIndex;
}


// Function BattleCommand.BattleCommand_C.HideEnemyInfoAishouNotice
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForEnemy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForFriend                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Immediately                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::HideEnemyInfoAishouNotice(bool ForEnemy, bool ForFriend, bool Immediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "HideEnemyInfoAishouNotice");

	Params::BattleCommand_C_HideEnemyInfoAishouNotice Parms{};

	Parms.ForEnemy = ForEnemy;
	Parms.ForFriend = ForFriend;
	Parms.Immediately = Immediately;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.HideEnemyInfo
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::HideEnemyInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "HideEnemyInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CheckPenetrationEfficacy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsSkill                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPenetration                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CheckPenetrationEfficacy(bool IsSkill, bool* IsPenetration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckPenetrationEfficacy");

	Params::BattleCommand_C_CheckPenetrationEfficacy Parms{};

	Parms.IsSkill = IsSkill;

	UObject::ProcessEvent(Func, &Parms);

	if (IsPenetration != nullptr)
		*IsPenetration = Parms.IsPenetration;
}


// Function BattleCommand.BattleCommand_C.SetItemAishouNotice
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetItemAishouNotice(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetItemAishouNotice");

	Params::BattleCommand_C_SetItemAishouNotice Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SetSkillAishouNotice
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::SetSkillAishouNotice(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetSkillAishouNotice");

	Params::BattleCommand_C_SetSkillAishouNotice Parms{};

	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CloseButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::CloseButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CloseButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.MakeSkillName
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBattleCommand_C::MakeSkillName(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "MakeSkillName");

	Params::BattleCommand_C_MakeSkillName Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.CalcSkillAptitude
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SkillId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Aptitude                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::CalcSkillAptitude(int32 SkillId, int32* Aptitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CalcSkillAptitude");

	Params::BattleCommand_C_CalcSkillAptitude Parms{};

	Parms.SkillId = SkillId;

	UObject::ProcessEvent(Func, &Parms);

	if (Aptitude != nullptr)
		*Aptitude = Parms.Aptitude;
}


// Function BattleCommand.BattleCommand_C.IsPassSelectable
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::IsPassSelectable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsPassSelectable");

	Params::BattleCommand_C_IsPassSelectable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.IsInFirstBattleTutorial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsTutorial                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsInFirstBattleTutorial(bool* IsTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsInFirstBattleTutorial");

	Params::BattleCommand_C_IsInFirstBattleTutorial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTutorial != nullptr)
		*IsTutorial = Parms.IsTutorial;
}


// Function BattleCommand.BattleCommand_C.CheckFirstBattleTutorial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTutorial                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::CheckFirstBattleTutorial(bool* IsTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckFirstBattleTutorial");

	Params::BattleCommand_C_CheckFirstBattleTutorial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTutorial != nullptr)
		*IsTutorial = Parms.IsTutorial;
}


// Function BattleCommand.BattleCommand_C.IsKeyInputOK
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OK                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsKeyInputOK(bool* OK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsKeyInputOK");

	Params::BattleCommand_C_IsKeyInputOK Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OK != nullptr)
		*OK = Parms.OK;
}


// Function BattleCommand.BattleCommand_C.HaveToDoTutorial
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BTL_TUTORIAL                          Tutorial                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::HaveToDoTutorial(const E_BTL_TUTORIAL Tutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "HaveToDoTutorial");

	Params::BattleCommand_C_HaveToDoTutorial Parms{};

	Parms.Tutorial = Tutorial;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.ReduceBGM
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::ReduceBGM(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ReduceBGM");

	Params::BattleCommand_C_ReduceBGM Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.ResumeBGM
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::ResumeBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "ResumeBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.IsReturnFromSelfTargeting
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::IsReturnFromSelfTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsReturnFromSelfTargeting");

	Params::BattleCommand_C_IsReturnFromSelfTargeting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.IsHeroSleeped
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Sleeped                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::IsHeroSleeped(bool* Sleeped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "IsHeroSleeped");

	Params::BattleCommand_C_IsHeroSleeped Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sleeped != nullptr)
		*Sleeped = Parms.Sleeped;
}


// Function BattleCommand.BattleCommand_C.EndEscapeMenu
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::EndEscapeMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "EndEscapeMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.OnCommandListHovered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ShiftIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::OnCommandListHovered(int32 ShiftIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnCommandListHovered");

	Params::BattleCommand_C_OnCommandListHovered Parms{};

	Parms.ShiftIndex = ShiftIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnCommandListClicked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMMAND                        Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::OnCommandListClicked(E_BTL_UI_COMMAND Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnCommandListClicked");

	Params::BattleCommand_C_OnCommandListClicked Parms{};

	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnCommandListUnHovered
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::OnCommandListUnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnCommandListUnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.UpdateCtrl
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::UpdateCtrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UpdateCtrl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.UpdateUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::UpdateUI(float Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UpdateUI");

	Params::BattleCommand_C_UpdateUI Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnListMenuMoveCursor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MoveDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::OnListMenuMoveCursor(int32 MoveDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnListMenuMoveCursor");

	Params::BattleCommand_C_OnListMenuMoveCursor Parms{};

	Parms.MoveDirection = MoveDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OnListMenuSelected
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::OnListMenuSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OnListMenuSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.CheckCancel
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::CheckCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckCancel");

	Params::BattleCommand_C_CheckCancel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.CheckAction
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_INPUT_TYPE                            InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForSkillAndItem                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCommand_C::CheckAction(E_INPUT_TYPE InputType, bool ForSkillAndItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CheckAction");

	Params::BattleCommand_C_CheckAction Parms{};

	Parms.InputType = InputType;
	Parms.ForSkillAndItem = ForSkillAndItem;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCommand.BattleCommand_C.OpenIconHelpWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::OpenIconHelpWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OpenIconHelpWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.UpdateIconHelpWindow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WindowClose                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::UpdateIconHelpWindow(bool* WindowClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UpdateIconHelpWindow");

	Params::BattleCommand_C_UpdateIconHelpWindow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WindowClose != nullptr)
		*WindowClose = Parms.WindowClose;
}


// Function BattleCommand.BattleCommand_C.OpenAutoBattleActionTypeDialog
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllInOne                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::OpenAutoBattleActionTypeDialog(bool AllInOne)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OpenAutoBattleActionTypeDialog");

	Params::BattleCommand_C_OpenAutoBattleActionTypeDialog Parms{};

	Parms.AllInOne = AllInOne;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.OpenAutoBattleStartDialog
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::OpenAutoBattleStartDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "OpenAutoBattleStartDialog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.SetWeakAutoBattle
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::SetWeakAutoBattle(bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SetWeakAutoBattle");

	Params::BattleCommand_C_SetWeakAutoBattle Parms{};

	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.CalcItemCursorIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemCursorIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::CalcItemCursorIndex(const int32& ItemId, int32* ItemCursorIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "CalcItemCursorIndex");

	Params::BattleCommand_C_CalcItemCursorIndex Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemCursorIndex != nullptr)
		*ItemCursorIndex = Parms.ItemCursorIndex;
}


// Function BattleCommand.BattleCommand_C.RestoreCursorIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_UI_COMMAND                        Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::RestoreCursorIndex(E_BTL_UI_COMMAND Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "RestoreCursorIndex");

	Params::BattleCommand_C_RestoreCursorIndex Parms{};

	Parms.Command = Command;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCommand.BattleCommand_C.SaveCursorIndex
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCommand_C::SaveCursorIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "SaveCursorIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCommand.BattleCommand_C.GetFirstTargetSelfSide
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCommand_C::GetFirstTargetSelfSide(int32* TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "GetFirstTargetSelfSide");

	Params::BattleCommand_C_GetFirstTargetSelfSide Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetIndex != nullptr)
		*TargetIndex = Parms.TargetIndex;
}


// Function BattleCommand.BattleCommand_C.BI_ResetCursorMemory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_ResetCursorMemory(int32 PartyIndex, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_ResetCursorMemory");

	Params::BattleCommand_C_BI_ResetCursorMemory Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCommand.BattleCommand_C.BI_HidePlayerParty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_HidePlayerParty(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_HidePlayerParty");

	Params::BattleCommand_C_BI_HidePlayerParty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCommand.BattleCommand_C.BI_SetShowPlayerPartyFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::BI_SetShowPlayerPartyFlag(bool IsShow, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_SetShowPlayerPartyFlag");

	Params::BattleCommand_C_BI_SetShowPlayerPartyFlag Parms{};

	Parms.IsShow = IsShow;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCommand.BattleCommand_C.BI_GetResult
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlCommand                      Result                                                 (Parm, OutParm)

void UBattleCommand_C::BI_GetResult(struct FBtlCommand* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "BI_GetResult");

	Params::BattleCommand_C_BI_GetResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BattleCommand.BattleCommand_C.UpdateComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ContinueUpdate                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCommand_C::UpdateComponent(float Delta, bool* ContinueUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCommand_C", "UpdateComponent");

	Params::BattleCommand_C_UpdateComponent Parms{};

	Parms.Delta = Delta;

	UObject::ProcessEvent(Func, &Parms);

	if (ContinueUpdate != nullptr)
		*ContinueUpdate = Parms.ContinueUpdate;
}

}

