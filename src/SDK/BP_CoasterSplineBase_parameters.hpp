#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CoasterSplineBase

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.ExecuteUbergraph_BP_CoasterSplineBase
// 0x000C (0x000C - 0x0000)
struct BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Show;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Anim;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_FromStartGimmick;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Active;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Anim_1;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase) == 0x000004, "Wrong alignment on BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase");
static_assert(sizeof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase) == 0x00000C, "Wrong size on BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, EntryPoint) == 0x000000, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, K2Node_CustomEvent_Show) == 0x000004, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::K2Node_CustomEvent_Show' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, K2Node_CustomEvent_Anim) == 0x000005, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::K2Node_CustomEvent_Anim' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, K2Node_CustomEvent_FromStartGimmick) == 0x000006, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::K2Node_CustomEvent_FromStartGimmick' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, K2Node_CustomEvent_Active) == 0x000007, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::K2Node_CustomEvent_Active' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase, K2Node_CustomEvent_Anim_1) == 0x000008, "Member 'BP_CoasterSplineBase_C_ExecuteUbergraph_BP_CoasterSplineBase::K2Node_CustomEvent_Anim_1' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.ShowSpline
// 0x0002 (0x0002 - 0x0000)
struct BP_CoasterSplineBase_C_ShowSpline final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Anim;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CoasterSplineBase_C_ShowSpline) == 0x000001, "Wrong alignment on BP_CoasterSplineBase_C_ShowSpline");
static_assert(sizeof(BP_CoasterSplineBase_C_ShowSpline) == 0x000002, "Wrong size on BP_CoasterSplineBase_C_ShowSpline");
static_assert(offsetof(BP_CoasterSplineBase_C_ShowSpline, Show) == 0x000000, "Member 'BP_CoasterSplineBase_C_ShowSpline::Show' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ShowSpline, Anim) == 0x000001, "Member 'BP_CoasterSplineBase_C_ShowSpline::Anim' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.ActiveSplineAnim
// 0x0002 (0x0002 - 0x0000)
struct BP_CoasterSplineBase_C_ActiveSplineAnim final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Anim;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CoasterSplineBase_C_ActiveSplineAnim) == 0x000001, "Wrong alignment on BP_CoasterSplineBase_C_ActiveSplineAnim");
static_assert(sizeof(BP_CoasterSplineBase_C_ActiveSplineAnim) == 0x000002, "Wrong size on BP_CoasterSplineBase_C_ActiveSplineAnim");
static_assert(offsetof(BP_CoasterSplineBase_C_ActiveSplineAnim, Active) == 0x000000, "Member 'BP_CoasterSplineBase_C_ActiveSplineAnim::Active' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_ActiveSplineAnim, Anim) == 0x000001, "Member 'BP_CoasterSplineBase_C_ActiveSplineAnim::Anim' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.MoveSpline
// 0x0001 (0x0001 - 0x0000)
struct BP_CoasterSplineBase_C_MoveSpline final
{
public:
	bool                                          FromStartGimmick;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CoasterSplineBase_C_MoveSpline) == 0x000001, "Wrong alignment on BP_CoasterSplineBase_C_MoveSpline");
static_assert(sizeof(BP_CoasterSplineBase_C_MoveSpline) == 0x000001, "Wrong size on BP_CoasterSplineBase_C_MoveSpline");
static_assert(offsetof(BP_CoasterSplineBase_C_MoveSpline, FromStartGimmick) == 0x000000, "Member 'BP_CoasterSplineBase_C_MoveSpline::FromStartGimmick' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.SetOpen
// 0x0006 (0x0006 - 0x0000)
struct BP_CoasterSplineBase_C_SetOpen final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartGimmick;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EndGimmick;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateIcon;                                        // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateNaviDeactive;                                // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateChain;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CoasterSplineBase_C_SetOpen) == 0x000001, "Wrong alignment on BP_CoasterSplineBase_C_SetOpen");
static_assert(sizeof(BP_CoasterSplineBase_C_SetOpen) == 0x000006, "Wrong size on BP_CoasterSplineBase_C_SetOpen");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, Open) == 0x000000, "Member 'BP_CoasterSplineBase_C_SetOpen::Open' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, StartGimmick) == 0x000001, "Member 'BP_CoasterSplineBase_C_SetOpen::StartGimmick' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, EndGimmick) == 0x000002, "Member 'BP_CoasterSplineBase_C_SetOpen::EndGimmick' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, UpdateIcon) == 0x000003, "Member 'BP_CoasterSplineBase_C_SetOpen::UpdateIcon' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, UpdateNaviDeactive) == 0x000004, "Member 'BP_CoasterSplineBase_C_SetOpen::UpdateNaviDeactive' has a wrong offset!");
static_assert(offsetof(BP_CoasterSplineBase_C_SetOpen, UpdateChain) == 0x000005, "Member 'BP_CoasterSplineBase_C_SetOpen::UpdateChain' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.GetStartGimmick
// 0x0008 (0x0008 - 0x0000)
struct BP_CoasterSplineBase_C_GetStartGimmick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CoasterSplineBase_C_GetStartGimmick) == 0x000008, "Wrong alignment on BP_CoasterSplineBase_C_GetStartGimmick");
static_assert(sizeof(BP_CoasterSplineBase_C_GetStartGimmick) == 0x000008, "Wrong size on BP_CoasterSplineBase_C_GetStartGimmick");
static_assert(offsetof(BP_CoasterSplineBase_C_GetStartGimmick, Actor) == 0x000000, "Member 'BP_CoasterSplineBase_C_GetStartGimmick::Actor' has a wrong offset!");

// Function BP_CoasterSplineBase.BP_CoasterSplineBase_C.GetEndGimmick
// 0x0008 (0x0008 - 0x0000)
struct BP_CoasterSplineBase_C_GetEndGimmick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CoasterSplineBase_C_GetEndGimmick) == 0x000008, "Wrong alignment on BP_CoasterSplineBase_C_GetEndGimmick");
static_assert(sizeof(BP_CoasterSplineBase_C_GetEndGimmick) == 0x000008, "Wrong size on BP_CoasterSplineBase_C_GetEndGimmick");
static_assert(offsetof(BP_CoasterSplineBase_C_GetEndGimmick, Actor) == 0x000000, "Member 'BP_CoasterSplineBase_C_GetEndGimmick::Actor' has a wrong offset!");

}

