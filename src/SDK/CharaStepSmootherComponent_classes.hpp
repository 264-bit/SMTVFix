#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaStepSmootherComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Project_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharaStepSmootherComponent.CharaStepSmootherComponent_C
// 0x0048 (0x00F8 - 0x00B0)
class UCharaStepSmootherComponent_C final : public UCustomComponent
{
public:
	class FName                                   SampleBone1;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SampleBone2;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SampleBone3;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SampleRadius;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetLimit;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationCurrent;                                   // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AnglePitchMin;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnglePitchMax;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleRollMin;                                      // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngleRollMax;                                      // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ImmediatelyIK;                                     // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Update(float DeltaTime, class USkinnedMeshComponent* Mesh, bool IKEnable, struct FRotator* Rotation);

	struct FRotator MakeRotation(class USkinnedMeshComponent* Mesh, const struct FVector& NormalBefore, const struct FVector& NormalAfter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharaStepSmootherComponent_C">();
	}
	static class UCharaStepSmootherComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaStepSmootherComponent_C>();
	}
};
static_assert(alignof(UCharaStepSmootherComponent_C) == 0x000008, "Wrong alignment on UCharaStepSmootherComponent_C");
static_assert(sizeof(UCharaStepSmootherComponent_C) == 0x0000F8, "Wrong size on UCharaStepSmootherComponent_C");
static_assert(offsetof(UCharaStepSmootherComponent_C, SampleBone1) == 0x0000B0, "Member 'UCharaStepSmootherComponent_C::SampleBone1' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, SampleBone2) == 0x0000B8, "Member 'UCharaStepSmootherComponent_C::SampleBone2' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, SampleBone3) == 0x0000C0, "Member 'UCharaStepSmootherComponent_C::SampleBone3' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, SampleRadius) == 0x0000C8, "Member 'UCharaStepSmootherComponent_C::SampleRadius' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, OffsetLimit) == 0x0000CC, "Member 'UCharaStepSmootherComponent_C::OffsetLimit' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, RotationSpeed) == 0x0000D0, "Member 'UCharaStepSmootherComponent_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, RotationCurrent) == 0x0000D4, "Member 'UCharaStepSmootherComponent_C::RotationCurrent' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, AnglePitchMin) == 0x0000E0, "Member 'UCharaStepSmootherComponent_C::AnglePitchMin' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, AnglePitchMax) == 0x0000E4, "Member 'UCharaStepSmootherComponent_C::AnglePitchMax' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, AngleRollMin) == 0x0000E8, "Member 'UCharaStepSmootherComponent_C::AngleRollMin' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, AngleRollMax) == 0x0000EC, "Member 'UCharaStepSmootherComponent_C::AngleRollMax' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, Debug) == 0x0000F0, "Member 'UCharaStepSmootherComponent_C::Debug' has a wrong offset!");
static_assert(offsetof(UCharaStepSmootherComponent_C, ImmediatelyIK) == 0x0000F1, "Member 'UCharaStepSmootherComponent_C::ImmediatelyIK' has a wrong offset!");

}

