#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MinimapPointofInterest

#include "Basic.hpp"

#include "WB_MinimapPointofInterest_classes.hpp"
#include "WB_MinimapPointofInterest_parameters.hpp"


namespace SDK
{

// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.ExecuteUbergraph_WB_MinimapPointOfInterest
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::ExecuteUbergraph_WB_MinimapPointOfInterest(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "ExecuteUbergraph_WB_MinimapPointOfInterest");

	Params::WB_MinimapPointOfInterest_C_ExecuteUbergraph_WB_MinimapPointOfInterest Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "Tick");

	Params::WB_MinimapPointOfInterest_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_MinimapPointOfInterest_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.Update
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_MODE                          Mode                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dimensions                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CanvasSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CanvasLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Zoom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraAngle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::Update(E_MINIMAP_MODE Mode, const struct FVector& Dimensions, const struct FVector& CanvasSize, const struct FVector& CanvasLocation, const struct FVector& CenterLocation, float Zoom, float CameraAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "Update");

	Params::WB_MinimapPointOfInterest_C_Update Parms{};

	Parms.Mode = Mode;
	Parms.Dimensions = std::move(Dimensions);
	Parms.CanvasSize = std::move(CanvasSize);
	Parms.CanvasLocation = std::move(CanvasLocation);
	Parms.CenterLocation = std::move(CenterLocation);
	Parms.Zoom = Zoom;
	Parms.CameraAngle = CameraAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_MinimapPointOfInterest_C::InitPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "InitPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdatePlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_MODE                          InMinimapMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dimensions                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CanvasSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Zoom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CanvasLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCameraAngle                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::UpdatePlayer(E_MINIMAP_MODE InMinimapMode, const struct FVector& Dimensions, const struct FVector& CanvasSize, float Zoom, const struct FVector& CanvasLocation, const struct FVector& CenterLocation, float InCameraAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "UpdatePlayer");

	Params::WB_MinimapPointOfInterest_C_UpdatePlayer Parms{};

	Parms.InMinimapMode = InMinimapMode;
	Parms.Dimensions = std::move(Dimensions);
	Parms.CanvasSize = std::move(CanvasSize);
	Parms.Zoom = Zoom;
	Parms.CanvasLocation = std::move(CanvasLocation);
	Parms.CenterLocation = std::move(CenterLocation);
	Parms.InCameraAngle = InCameraAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitFootprint
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_MinimapPointOfInterest_C::InitFootprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "InitFootprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdateFootprintImage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UImage*                           Image                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMinimapFootprintEntry           Entry                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWB_MinimapPointOfInterest_C::UpdateFootprintImage(class UImage*& Image, const struct FMinimapFootprintEntry& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "UpdateFootprintImage");

	Params::WB_MinimapPointOfInterest_C_UpdateFootprintImage Parms{};

	Parms.Image = Image;
	Parms.Entry = std::move(Entry);

	UObject::ProcessEvent(Func, &Parms);

	Image = Parms.Image;
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.InitImage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_MinimapPointOfInterest_C::InitImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "InitImage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.UpdateFootprint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_MinimapPointOfInterest_C::UpdateFootprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "UpdateFootprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.SetIconSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::SetIconSize(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "SetIconSize");

	Params::WB_MinimapPointOfInterest_C_SetIconSize Parms{};

	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.SetAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InAlpha                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::SetAlpha(float InAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "SetAlpha");

	Params::WB_MinimapPointOfInterest_C_SetAlpha Parms{};

	Parms.InAlpha = InAlpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.ShouldRotateMinimap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_MINIMAP_MODE                          MinimapMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RotateMinimap                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_MinimapPointOfInterest_C::ShouldRotateMinimap(E_MINIMAP_MODE MinimapMode, bool* RotateMinimap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "ShouldRotateMinimap");

	Params::WB_MinimapPointOfInterest_C_ShouldRotateMinimap Parms{};

	Parms.MinimapMode = MinimapMode;

	UObject::ProcessEvent(Func, &Parms);

	if (RotateMinimap != nullptr)
		*RotateMinimap = Parms.RotateMinimap;
}


// Function WB_MinimapPointofInterest.WB_MinimapPointOfInterest_C.GetCameraAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_MinimapPointOfInterest_C::GetCameraAngle(float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_MinimapPointOfInterest_C", "GetCameraAngle");

	Params::WB_MinimapPointOfInterest_C_GetCameraAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}

}

