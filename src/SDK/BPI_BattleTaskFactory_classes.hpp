#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleTaskFactory

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Project_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_BattleTaskFactory.BPI_BattleTaskFactory_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_BattleTaskFactory_C final : public IInterface
{
public:
	void BI_GetParentNameTaskCnt(const class FString& ParentName, int32* RetCnt);
	void BI_AddSetUnitMotion(TArray<int32>& WaitTaskList, const class FString& ParentName, E_CHARA_MOTION_ID MotionID, int32 PartyIndex, bool WaitMotionFinish, float StartPosition, bool IsPlayOneScale, int32* RetValue);
	void BI_AddCamRailSkillTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, bool IsHokan, bool IsConsiderActor, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, int32* RetValue);
	void BI_AddPlayEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UParticleSystem* ParticleData, int32 ActorIndex, int32 TargetIndex, const struct FBtlTaskData& TaskData, const struct FBtlTaskData& TaskData2, const struct FTransform& Transform, class USkeletalMesh* ModSkeletalMesh, class UAnimSequenceBase* ModAnim, class FName ModAttachSocketName, bool IsPairTargetOverride, const struct FVector& PairTargetLocation, bool IsIgnoreSideScale, int32* RetValue);
	void BI_AddDeltaWaitTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float DeltaTime, int32* RetValue);
	void BI_AddPlayCamShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PlayID, const class FString& RowName, class UClass* ShakeClass, float Scale, int32* RetValue);
	void BI_AddRadialBlurTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const class FString& SocketName, float Value, bool Sw, float Damage, float StartAmount, float EndAmount, float StartKeepSec, float LerpSec, const struct FVector& Origin, const struct FVector& Offset, bool UseOrigin, int32* RetValue);
	void BI_MakeDeadTask(TArray<int32>& NewParam, const class FString& ParentName, int32 PartyIndex, float DeltaTime, E_BTL_DEAD_EFFECT DeadType, bool Immediately, bool IgnoreEnemyKilled, int32* RetValue);
	void BI_AddUnitAttackMoveTask(TArray<int32>& NewParam, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool WaitEnd, float Speed, float RevDeg, bool IsLocationMove, const struct FVector& MoveLocation, const struct FVector& LookLocation, E_CHARA_MOTION_ID AttackMotion, int32* RetValue);
	void BI_AddMessageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 MessageID, int32 Program_no, const class FString& AddString, bool Sw, float PlayRate, int32 Elementnumber, int32 ShowPosition, bool IsSkillOrItemName, int32 SkillId, int32 SkillAptitude, int32 ItemId, int32* RetValue);
	void BI_AddNumEffectTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 HPNum, int32 MPNum, E_BTL_NUMEFF Type, E_BTL_UTIL_ICON_TYPE HitType, int32 CriticalLevel, float RandArea, float PlayRate, bool IsResist, const struct FVector& PositionOffset, bool IsDead, E_KUISHIBARI_LEVEL Kuishibari, bool IsSkipping, bool CheckTargetInCamera, int32* RetValue);
	void BI_AddPartyPanelCtrlTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32 Value, E_BTL_PANEL_CTRL Ctrl, bool Sw, int32* RetValue);
	void BI_AddUnitBackStepTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool WaitEnd, E_AVOID_DIRECTION Direction, int32* RetValue);
	void BI_AddApplyUnitStateTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool NoCureEffect, bool IsLecerationDam, bool UpdateLookAt, int32* RetValue);
	void BI_AddRecomeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetValue);
	void BI_AddInfoMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, int32 SkillId, E_SKILL_INFO_MESS_TIMING Timing, E_BAD_STATUS bst, bool IsMaster, int32 MsgID, float PlayRate, float OverrideDurationSec, int32* RetValue);
	void BI_AddUnitActionTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_CHARA_ACTION_TYPE Action, uint8 Option, float FloatOption, int32* RetValue);
	void BI_IsExistTaskForPecID(int32 PecID, bool* RetValue);
	void BI_AddBlankExistTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetValue);
	void BI_DestroyTaskForPecID(int32 PecID, bool* IsSuccess);
	void BI_AddPlaySETask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, const struct FVector& Location, bool IsPlay2D, bool IgnorePlayRate, int32* RetValue);
	void BI_PrintTaskType(bool* RetValue);
	void BI_AddAnimationCameraTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float Rate, ECameraAnimationSpace Space, class UCameraAnimationAsset* CameraAsset, const struct FTransform& SpawnTransform, float BlendInTime, float BlendOutTime, int32 ShowActorIndex, bool IsParty, int32 ShowTargetIndex, int32 FocusTarget, int32 FocusActor, const class FString& SocketName, class UCameraAnimationAsset* CameraAsset2nd, float LerpAlpha, TArray<int32>& VisiblePartyIndexes, TArray<int32>& InvisiblePartyIndexes, bool CleanUp, bool IsUseTargetScale, int32* RetPecID);
	void BI_AddCallSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* RetPecID);
	void BI_AddCallSkillEventTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UObject* SkillAction, int32 Step, float RemainSec, int32* RetPecID);
	void BI_AddUnitMoveTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FVector& MoveTargetPos, const struct FVector& LookTargetPos, float MoveTime, float LookSpeed, bool WaitMoveFinish, int32* RetPecID);
	void BI_AddDisplayFadeTask(TArray<int32>& WaitTaskList, const class FString& ParentName, bool IsFadeOut, bool IsWhite, float DurationSec, int32* RetPecID);
	void BI_AddHitLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillInstance, int32 TargetIndex, int32* RetPecID);
	void BI_AddDecalTask2(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, class UMaterialInstance* DecalMaterial, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, const struct FVector& DecalSize, const struct FVector& OffsetLocation, class FName AttachPointName, float OverrideLifeSec, uint8 LocationType, const struct FRotator& Rotation, float RotationRandMin, float RotationRandMax, bool IsPutOnPartyCenter, const struct FTransform& PartyCenterRelativeTrans, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void BI_AddSkillLightTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const struct FBTL_ADD_SKILL_LIGHT_TASK_DATA& LightParam, int32* RetPecID);
	void BI_AddUnitStayDirToTargetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, float Speed, bool UseVector, const struct FVector& LookPoint, int32* RetPecID);
	void BI_AddExtActMessTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_EXTRA_ACTION ExtraAction, float Time, int32 ActorIndex, int32 TargetIndex, int32* RetPecID);
	void BI_AddDecalToEffectTask(TArray<int32>& WaitCommandIndex, const class FString& ParentName, class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotRandMin, float RotRandMax, const struct FVector& Size, TArray<int32>& EffectID, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, TScriptInterface<class IBPI_BattleSkillActionBase_C> SkillActionBase, int32* RetPecID);
	void BI_GetTaskForPecID(int32 PecID, class AActor** ActionTask);
	void BI_AddSetUnitShake(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, float Magnitude, float Time, bool WaitShakeFinish, int32* RetPecID);
	void BI_AddUtilIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_UTIL_ICON_TYPE IconType, float PlayRate, bool IsSkipping, int32* RetPecID);
	void BI_AddPlaySEUnitAttachTask(TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& SEName, class USoundAtomCue* Data, int32 TargetIndex, const class FString& SocketName, bool IgnorePlayRate, int32* RetPecID);
	void BI_MakeAddMagGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddMagGauge, int32 TargetIndex, TArray<int32>* RetPecID);
	void BI_AddReichiPointTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 AddValue, float PlayRate, int32* RetPecID);
	void BI_AddPlayAbsorptionEffectTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 ActorIndex, int32 TargetIndex, class FName AbsorptionPointSocket, const struct FVector& AbsorptionPointOffset, class UCurveVector* AbsorptionRadius, bool IsReverse, int32* RetPecID);
	void BI_BeginHitStop(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* RetPecID);
	void BI_AddCameraDOFTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float FocalDistance, float Scale, float DurationSec, int32* RetPecID);
	void BI_GetTaskTypeTaskCnt(E_BTL_TASK_COM Type, int32* Cnt);
	void BI_AddPressIconTask(TArray<int32>& WaitTaskList, const class FString& ParentName, float PlayRate, E_BTL_PRESS_TYPE PressType, bool DoCalcAndApply, int32* RetPecID);
	void BI_AddUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, int32* RetPecID);
	void BI_AddFirstSettingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class AActor* SkillAction, int32* PecID);
	void BI_AddBeHomeSideAllTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, int32* PecID);
	void BI_AddUnitVisibilitySideAll(TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* PecID);
	void BI_MakeDamageTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_DAMAGE_HIT_TYPE Type, int32 HpDamage, int32 MpDamage, int32 bst, bool Dead, int32 DeadType, bool HP1, float PlayRate, bool* Ret, TArray<int32>* Tasklist);
	void BI_AddBeHomeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* PecID);
	void BI_AddUnitVisibilityTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, bool Sw, bool ParticleInterlock, int32* PecID);
	void BI_AddSetActorTransformTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, const struct FTransform& Transform, int32* RetPecID);
	void BI_AddSummonTsukuyomiTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void BI_AddDrawPlayerUpliftingGaugeTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, bool SpendGaugeOnly, int32* RetPecID);
	void BI_MakeUpliftingTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, E_BTL_SIDE Side, bool Sw, int32* Ret);
	void BI_TaskSort(bool* NoUse);
	void BI_AddInfoMessByLabelTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, const class FString& Label, int32 PartyIndex, bool SelectSkillScriptMessage, float PlayRate, int32* RetPecID);
	void BI_AddCamRailTask(const TArray<int32>& WaiitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE Type, bool InterpWait, const class FString& ManualName, bool StopWait, float DeltaWait, int32* PecID);
	void BI_MakeKuishibariInfoTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32 Param1Index, int32 SkillId, float PlayRate, TArray<int32>* RetPecIDs, TArray<int32>* WaitPecIDs);
	void BI_AddStopAllSE_Task(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32* PecID);
	void BI_ForceUpdate(int32 PecID, bool* NoUse);
	void BI_AddIgnoreSkillSkipTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, class UObject* SkillAction, int32* RetPecID);
	void BI_AddStopAllParticleTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32* RetPecID);
	void BI_OpenTutorialWindowTask(TArray<int32>& WaitTaskList, const class FString& ParentName, E_TUTORIAL_WINDOW_MESSAGE_TYPE TutorialType, float OpenRemainSec, int32* RetPecID);
	void BI_AddUnitModelLoadTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 Load_ID, const struct FTransform& SpawnTransform, int32 PartyIndex, bool RegisterAsAnEnemy, int32* Ret_PecID);
	void BI_AddUnitScaleResetTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, int32* Ret_PecID);
	void BI_AddCtrlPostProcess(TArray<int32>& WaitTaskIndex, const class FString& ParentName, TArray<class UMaterialInstance*>& PostMaterials, TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID);
	void BI_AddSummonTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcIndex, int32 DstIndex, bool UseForceTransform, const struct FTransform& ForceTransform, const struct FVector& ReturnEffectLocation, bool IsGodSkillSummon, int32* RetPecID);
	void BI_AddResetCharaParticleTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, int32* RetPecID);
	void BI_AddUnlockAchievementTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, EAchievementFlag Achievement, int32* RetPecID);
	void BI_MakeCureTask(TArray<int32>& WaitTaskList, const class FString& ParentName, int32 SrcPartyIndex, int32 DstPartyIndex, E_BTL_CURE Type, int32 HpCure, int32 MpCure, int32 bstCure, int32* Ret);
	void BI_MakePartyPanelShowTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, float WaitAfterShow, int32* RetPecID);
	void BI_MakeCloseUpCameraTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 PartyIndex, E_BTL_CAM_TYPE CamType, bool HaveToBeHome, int32* PecID);
	void BI_ClearValidArray(bool* NoUse);
	void BI_GetUpdateTimes(int32* TickTimes);
	void BI_IsTerminalTask(int32 PecID, bool* IsTerminal);
	void BI_OutputDebugTaskInfo(const class FString& FilePath, const class FString& Filename, bool* NoUse);
	void BI_AddDebugTaskInfo(const class FString& Info, struct FDebugBattleTaskInfo& TaskInfo, bool* NoUse);
	void BI_ResetDebugTaskInfo(bool* NoUse);
	void BI_AddCtrlCharaMaterialTask(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSetting, int32* PecID);
	void BI_MakeMusMahDirection(const TArray<int32>& WaitTaskList, const class FString& ParentName, int32 TargetIndex, bool IsSkipping, TArray<int32>* RetWaitTaskList);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_BattleTaskFactory_C">();
	}
	static class IBPI_BattleTaskFactory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_BattleTaskFactory_C>();
	}
};
static_assert(alignof(IBPI_BattleTaskFactory_C) == 0x000008, "Wrong alignment on IBPI_BattleTaskFactory_C");
static_assert(sizeof(IBPI_BattleTaskFactory_C) == 0x000028, "Wrong size on IBPI_BattleTaskFactory_C");

}

