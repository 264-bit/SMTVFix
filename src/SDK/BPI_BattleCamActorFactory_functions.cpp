#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCamActorFactory

#include "Basic.hpp"

#include "BPI_BattleCamActorFactory_classes.hpp"
#include "BPI_BattleCamActorFactory_parameters.hpp"


namespace SDK
{

// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_SpawnRailActorPrevBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OriginTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>UnitList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               UnitTrans                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           DevIDOptoin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCamActorFactory_C::BI_SpawnRailActorPrevBattle(E_BTL_CAM_TYPE CamType, const struct FTransform& OriginTransform, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& UnitList, TArray<struct FTransform>& UnitTrans, const class FString& DevIDOptoin, class ABP_RailActor_C** RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_SpawnRailActorPrevBattle");

	Params::BPI_BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle Parms{};

	Parms.CamType = CamType;
	Parms.OriginTransform = std::move(OriginTransform);
	Parms.UnitList = std::move(UnitList);
	Parms.UnitTrans = std::move(UnitTrans);
	Parms.DevIDOptoin = std::move(DevIDOptoin);

	UObject::ProcessEvent(Func, &Parms);

	UnitList = std::move(Parms.UnitList);
	UnitTrans = std::move(Parms.UnitTrans);

	if (RetVal != nullptr)
		*RetVal = Parms.RetVal;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_GetCurrentCameraSideType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CAMERA_SIDE_BF_TYPE                   BF_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CAMERA_SIDE_LR_TYPE                   LR_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCamActorFactory_C::BI_GetCurrentCameraSideType(E_CAMERA_SIDE_BF_TYPE* BF_Type, E_CAMERA_SIDE_LR_TYPE* LR_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_GetCurrentCameraSideType");

	Params::BPI_BattleCamActorFactory_C_BI_GetCurrentCameraSideType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BF_Type != nullptr)
		*BF_Type = Parms.BF_Type;

	if (LR_Type != nullptr)
		*LR_Type = Parms.LR_Type;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_ToOuterCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleCamera_C*                  Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  Rail                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>TargetUnits                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               TargetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsBossRoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_ToOuterCamera(class ABattleCamera_C* Camera, class ABP_RailActor_C* Rail, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& TargetUnits, TArray<struct FTransform>& TargetPos, bool IsBossRoom, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_ToOuterCamera");

	Params::BPI_BattleCamActorFactory_C_BI_ToOuterCamera Parms{};

	Parms.Camera = Camera;
	Parms.Rail = Rail;
	Parms.TargetUnits = std::move(TargetUnits);
	Parms.TargetPos = std::move(TargetPos);
	Parms.IsBossRoom = IsBossRoom;

	UObject::ProcessEvent(Func, &Parms);

	TargetUnits = std::move(Parms.TargetUnits);
	TargetPos = std::move(Parms.TargetPos);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_RetrieveGlobalSocketLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CamCategoryName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_RetrieveGlobalSocketLocation(class FName CamCategoryName, class FName SocketName, struct FVector* GlobalLocation, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_RetrieveGlobalSocketLocation");

	Params::BPI_BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation Parms{};

	Parms.CamCategoryName = CamCategoryName;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalLocation != nullptr)
		*GlobalLocation = std::move(Parms.GlobalLocation);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_ResetCommandCamInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_ResetCommandCamInfo(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_ResetCommandCamInfo");

	Params::BPI_BattleCamActorFactory_C_BI_ResetCommandCamInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_SetRailName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_SetRailName(const class FString& Param_Name, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_SetRailName");

	Params::BPI_BattleCamActorFactory_C_BI_SetRailName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_RegisterAnimCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleAnimationCamera_C*         AnimCam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_RegisterAnimCam(class ABattleAnimationCamera_C* AnimCam, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_RegisterAnimCam");

	Params::BPI_BattleCamActorFactory_C_BI_RegisterAnimCam Parms{};

	Parms.AnimCam = AnimCam;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_UnregisterAnimCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_UnregisterAnimCam(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_UnregisterAnimCam");

	Params::BPI_BattleCamActorFactory_C_BI_UnregisterAnimCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleCamActorFactory.BPI_BattleCamActorFactory_C.BI_DestroyCurrentActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleCamActorFactory_C::BI_DestroyCurrentActor(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleCamActorFactory_C", "BI_DestroyCurrentActor");

	Params::BPI_BattleCamActorFactory_C_BI_DestroyCurrentActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

