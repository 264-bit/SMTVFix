#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapEventHit_Type_SHit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MapEventHit_Core_classes.hpp"
#include "E_MAP_PLAYER_TYPE_structs.hpp"
#include "Project_structs.hpp"
#include "E_MAP_DEBUG_MES_TYPE_structs.hpp"
#include "E_MAP_SYSTEMRESIDENT_ID_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MapEventHit_Type_SHit.MapEventHit_Type_SHit_C
// 0x0010 (0x0390 - 0x0380)
class AMapEventHit_Type_SHit_C : public AMapEventHit_Core_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MapEventHit_Type_SHit_C;            // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Enable_0;                                          // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MapEventHit_Type_SHit(int32 EntryPoint);
	void OnComponentBeginOverlap_Impl();
	void BPI_SetMapCommon(class AActor* Actor);
	void BndEvt__Hit_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void BPI_LoadMapBridgeMode(int32 NextMapId, int32 NextAreaId, bool FadeCancel);
	void EnvChange_Immediate();
	void BPI_RequestNaviDevilVisible(bool Visible);
	void BPI_CallEventEncount_BossRush(int32 EventEncountId, int32 NextEventID, int32 NowEventID, bool Manual, bool ChallengeMode);
	void BPI_Tokyo_Large_Map_Add_Icon_Mission(const struct FVector& ActorLocation, int32 MissionId, class AActor* Param_Owner);
	void BPI_GardenUnload(float FadeInTime);
	void BPI_GardenLoad(int32 WarpPoint, float FadeInTime);
	void BPI_TokyoLargeMapHidePlace(int32 DataId);
	void BPI_TokyoLargeMapShowPlace(int32 DataId);
	void BPI_EndMagatsuka_ForSimpleEvent();
	void BPI_PreSystemLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Enum);
	void BPI_NaviGimmickTutorial_ForOuter();
	void BPI_NaviGimmickTutorial_ForInner();
	void BPI_CallEventEncountForMagatsuka(int32 EventEncountId, int32 SafeZoeID, bool ManualSafeZone, bool HitMapAttack);
	void BPI_CallEventEncount_ForUniqueSymbol(int32 EventEncountId, const struct FTransform& SpawnTransform, bool ManualWhenNotEscape, bool HitMapAttack, E_BTL_SYMBOL_ENCOUNT EncountType);
	void BPI_CallEncountForDebug(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType);
	void BPI_TokyoLargeMapDeleteIcon(class AActor* Param_Owner);
	void BPI_TokyoLargeMapAddIconTalk(const struct FVector& ActorLocation, class FName InactiveFlag, class AActor* Param_Owner);
	void Env_ChangeSpecial_Play(int32 Param_Index, float Alpha);
	void BPI_HideObjects_WhenExitMap();
	void BPI_ShowObjects_WhenReturnMap();
	void BPI_EndTakara_ForSimpleEvent(int32 TakaraID);
	void ResetEventBattleActor();
	void EnvChangeMagatuka_Play(float Alpha);
	void BPI_MapStart_SimpleEventEnable();
	void BPI_EntryNaviDevillGimmick(class AActor* Actor);
	void BPI_CallEncountForNaviDevil(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi, bool PlayerFirst);
	void BPI_ChangeArea(int32 NextAreaId, int32 WarpPoint, float FadeInTime);
	void EnvChange_Reverse();
	void EnvChange_Play(const struct FST_LightParam& Next, const struct FST_LightParam& Prev);
	void BI_SetMapChange(bool IsMapChange, int32 WarpPoint, int32 FromEvent, int32 OtherMapReturn);
	void JsonCounterAdd(int32 EncountAdd, int32 MagatukaNum);
	void BPI_ReturnMapFromOutside(bool AutoSave, bool ReturnPlayerPosition, bool UI_Immediate);
	void BPI_CallEncountForMagatsuka(int32 EncountID, const TArray<int32>& EnemyList, int32 SafeZoneID, bool ManualSafeZone, E_BTL_SYMBOL_ENCOUNT EncountType, bool HitMapAttack);
	void BPI_CallMapEvent(int32 MapEventID_, class AActor* ReStartPoint, class AActor* BattlePoint, bool InitFade, bool WaitEvent);
	void SetJsonFile(const class FString& Json);
	void SetJsonData(class UJsonDataCtrl* Json);
	void StartDebugGameTrace(bool IsEnable);
	void BPI_SetEncountActor(class AActor* Actor);
	void SetEventBattleActor(const TArray<struct FEventBattleListStruct>& BTLActor, const struct FTransform& PlayerPos);
	void SetLoadLevelGame(bool Enable);
	void MapInit();
	void SetMapStartLoadFlag(bool Enable);
	void SetNextMapStartList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& LevelNameList, int32 MapId, int32 AreaId);
	void DeleteNextMapAssetList();
	void SetNextMapLoadEnd(bool Enable);
	void SetNextMapLoadStart(bool Enable);
	void SetNextMapAssetList(const TArray<struct FPrimaryAssetId>& LevelList, const TArray<class FName>& NameList, int32 MapId, int32 AreaId);
	void BPI_HeroChange(bool IsFade, E_MAP_PLAYER_TYPE Hero);
	void BPI_SetEventReserv(int32 MapEventID);
	void BPI_ForceSafeEncount(bool Enable);
	void BPI_MapAttackEnd(bool Enable);
	void BPI_OpenSkyTerminal();
	void BPI_CallKokubouEvent(int32 EventId, class AActor* RestarPoint, class AActor* BattlePoint);
	void BPI_PlayerON();
	void BPI_PlayerOFF();
	void BPI_CallEventEncount(int32 EventEncountId, const struct FTransform& SpawnTransform, int32 NextEventID, int32 NowEventID, bool Manual);
	void BPI_MapStart(bool MissionCheckDisable, bool StartSymbolAIDisable, bool ReturnPlayerPosition, bool UI_Immediate);
	void BPI_MapPause(bool PlayerMoveEnable, bool PlayerCameraEnable, bool PlayerVisible, bool MoonTimeEnable, bool SymbolEnable, bool AllMapStop, bool AllObjectHidden, bool TopCamera);
	void BPI_DebugMesWindow(E_MAP_DEBUG_MES_TYPE MesType);
	void BPI_DebugChangeChar(E_MAP_PLAYER_TYPE Type);
	void BPI_AddSpawnEnemyCount();
	void BPI_LoadMap(bool InFadeCancel);
	void BPI_MapPlayerStop(bool Stop, bool Param_Hidden);
	void BPI_SetEncountON();
	void BPI_SetEncountOff();
	void BPI_ReturnFromBtl();
	void BPI_SpawnEncountActor(const TArray<int32>& EnemyIdList, int32 EncountID, const struct FTransform& SpawnTransform, class AActor* EncountPawn, E_BTL_SYMBOL_ENCOUNT SymbolEncountType, bool ManualWhenNotEscape, bool HitMapAttack, const struct FChainEncountInfo& ChainEncountInfo, bool Magatsuhi);
	void FlagCh(bool* OK);
	void IsEventHitOff(bool* Enable);
	void GetcurrentLevelCustom(bool* Enable);
	void GetIsBattle(bool* IsBattle);
	void BPI_IsSpawnSymbol(bool* NewParam);
	void BPI_GetMapCommon(class AActor** Rerutn);
	void GetSavingWidget(bool* Widget);
	void BPI_CheckMapPause(bool* IsPause);
	void BPI_GetBuddyPawn(class APawn** Pawn);
	void BI_CheckEncountOn(bool* EncountOn);
	void BPI_GetEventReserv(int32* MapEventID);
	void BPI_IsEventPlay(bool* IsPlay);
	void GetNextMapAssetList(TArray<struct FLoadOnlyResident_ST>* LevelList);
	void IsNextMapLoadStart(bool* Return);
	void IsNextMapLoadEnd(bool* Return);
	void GetNextMapStartList(struct FLoadOnlyResident_ST* Return);
	void GetMapStartLoadFlag(bool* Enable);
	void IsLoadLevelGame(bool* Enable);
	void GetEventBattleActor(TArray<class AActor*>* List);
	void BPI_MakeUpLessEvent(bool* RetValue);
	void GetDebugGameTrace(bool* IsEnable);
	void GetJsonData(class UJsonDataCtrl** Json);
	void GetJsonFileName(class FString* Filename);
	void BPI_GetMapGimmickTrigger(class AActor** Actor);
	void JsonCounterGet(int32* EncountNum, int32* MagatukaNum);
	void BI_GetDaathIntensityEff(struct FLinearColor* Intensity);
	void BI_IsEventView(bool* IsEventView);
	void GetGShopCamera(class ACameraActor** Cam);
	void BPI_CheckSymbolPause(bool* Pause);
	void BPI_SetDebugOverrideBattleMapDarkID(int32 MapDarkID, bool* NoUse);
	void BPI_GetMapTimer(float* MapTimer);
	void BPI_AddMagatsukaDiscoveryCnt(int32 Add, bool* NewParam1);
	void BPI_CheckMagatsukaDiscoveryCnt(bool* Discovery);
	void BPI_SetNaviDevilPawn(class APawn* Pawn, bool* NewParam1);
	void BPI_GetNaviDevilPawn(class APawn** Pawn);
	void BPI_GetNaviDevilCtrl(class AActor** Actor);
	void BPI_SetAActionLock(bool Lock, class AActor* AActionActor, bool* NewParam1);
	void BPI_CheckAActionLock(bool* Lock, class AActor** AActionActor);
	void BPI_CheckMapEnableCamera(bool* IsPause);
	void BPI_IsTokyoLargeMap(bool* IsTokyoLargeMap);
	void BPI_GetMapButtonHelpType(E_BTN_HELP_SET* Out);
	void BPI_ShowMapButtonHelp(bool* Dummy);
	void BPI_RegisterMagatsuka(class AActor* Actor, bool* NewParam1);
	void BPI_UnregisterMagatsuka(class AActor* Actor, bool* NewParam);
	void BPI_UpdateUniqueSymbolBGM(bool* NewParam);
	void BPI_GetEncountAreaAll(TArray<class AActor*>* Actors);
	void BPI_UpdateLevelVisibility(const struct FVector& NewLocation, bool* Updated);
	void BPI_SetStatusMode(bool IsStatusMode, bool* NoUse);
	void BPI_IsStatusMode(bool* IsStatusMode);
	void BPI_SetLevelVisibilityEnabled(bool Enable, bool* Dummy);
	void BPI_SetBossRushFieldCtrl(class AActor* Actor, bool* NewParam);
	void BPI_GetBossRushFieldCtrl(class AActor** Actor);
	void BPI_AddEncountAreaList(class AActor* EncountArea, bool* NewParam);
	void BPI_RemoveEncountAreaList(class AActor* EncountArea, bool* NewParam);
	void BPI_GetOptionFieldBrightnessCtrl(class UActorComponent** Component);
	void BPI_IgnoreEstomaEffectPause(bool Ignore, bool* NewParam);
	void BPI_MapTopCameraOnStartTop(bool* Dummy);
	void BPI_MapTopCameraOnFinishTop(bool* Dummy);
	void BPI_UpdateOptionFieldBrightness(bool* NewParam);
	void BPI_CheckAfterLoaded(bool* AfterLoaded);
	void BPI_CheckHide_WhenBattleOrEvent(bool* Hide);
	void BPI_CheckAgratField(bool* Inside);
	void BPI_SetAgratField(bool Inside, bool* NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapEventHit_Type_SHit_C">();
	}
	static class AMapEventHit_Type_SHit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMapEventHit_Type_SHit_C>();
	}
};
static_assert(alignof(AMapEventHit_Type_SHit_C) == 0x000008, "Wrong alignment on AMapEventHit_Type_SHit_C");
static_assert(sizeof(AMapEventHit_Type_SHit_C) == 0x000390, "Wrong size on AMapEventHit_Type_SHit_C");
static_assert(offsetof(AMapEventHit_Type_SHit_C, UberGraphFrame_MapEventHit_Type_SHit_C) == 0x000380, "Member 'AMapEventHit_Type_SHit_C::UberGraphFrame_MapEventHit_Type_SHit_C' has a wrong offset!");
static_assert(offsetof(AMapEventHit_Type_SHit_C, Enable_0) == 0x000388, "Member 'AMapEventHit_Type_SHit_C::Enable_0' has a wrong offset!");

}

