#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Minimap

#include "Basic.hpp"

#include "WB_Minimap_classes.hpp"
#include "WB_Minimap_parameters.hpp"


namespace SDK
{

// Function WB_Minimap.WB_Minimap_C.EvtDis_FocusActionEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EvtDis_FocusActionEnd__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EvtDis_FocusActionEnd__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EvtDis_MinimapTextureLoadEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMinimapBGTextureEntry*           Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::EvtDis_MinimapTextureLoadEnd__DelegateSignature(class UMinimapBGTextureEntry* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EvtDis_MinimapTextureLoadEnd__DelegateSignature");

	Params::WB_Minimap_C_EvtDis_MinimapTextureLoadEnd__DelegateSignature Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.EvtDis_FocusMissionEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EvtDis_FocusMissionEnd__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EvtDis_FocusMissionEnd__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ExecuteUbergraph_WB_Minimap
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::ExecuteUbergraph_WB_Minimap(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ExecuteUbergraph_WB_Minimap");

	Params::WB_Minimap_C_ExecuteUbergraph_WB_Minimap Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.AnimInTitle
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::AnimInTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "AnimInTitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_FocusAfterMove
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_FocusAfterMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_FocusAfterMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.FocusAfterLoad
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMinimapBGTextureEntry*           Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::FocusAfterLoad(class UMinimapBGTextureEntry* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "FocusAfterLoad");

	Params::WB_Minimap_C_FocusAfterLoad Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.Evt_MapSelectDecide
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Cursor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::Evt_MapSelectDecide(int32 Param_Cursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_MapSelectDecide");

	Params::WB_Minimap_C_Evt_MapSelectDecide Parms{};

	Parms.Param_Cursor = Param_Cursor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.Evt_FocusMapAreaStart
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_FocusMapAreaStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_FocusMapAreaStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_Minimap_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_MapSelectToParent
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_MapSelectToParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_MapSelectToParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_SetTextureAfterLoad
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MINIMAP_CHANGE_TYPE                   ChangeType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMinimapBGTextureEntry*           TextureEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::Evt_SetTextureAfterLoad(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType, class UMinimapBGTextureEntry* TextureEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_SetTextureAfterLoad");

	Params::WB_Minimap_C_Evt_SetTextureAfterLoad Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.ChangeType = ChangeType;
	Parms.TextureEntry = TextureEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.Evt_RyuketsuStart
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_RyuketsuStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_RyuketsuStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_FocusActionStart
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_FocusActionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_FocusActionStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_AllToMini
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_AllToMini()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_AllToMini");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_AllMapStart
// (BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::Evt_AllMapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_AllMapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.Evt_LoadMinimapTextureAsync
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MINIMAP_CHANGE_TYPE                   ChangeType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::Evt_LoadMinimapTextureAsync(int32 MapId, int32 AreaId, E_MINIMAP_CHANGE_TYPE ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Evt_LoadMinimapTextureAsync");

	Params::WB_Minimap_C_Evt_LoadMinimapTextureAsync Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1");

	Params::WB_Minimap_C_OnLoaded_723B72C64AEDF3EBD0816BA2BAA42EA1 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.OnLoaded_D842B4C24B1A5FB4378885938EF68C7E
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::OnLoaded_D842B4C24B1A5FB4378885938EF68C7E(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnLoaded_D842B4C24B1A5FB4378885938EF68C7E");

	Params::WB_Minimap_C_OnLoaded_D842B4C24B1A5FB4378885938EF68C7E Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.SetMinimapTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMinimapBGTextureEntry*           MinimapTexture                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SetMinimapTexture(class UMinimapBGTextureEntry* MinimapTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetMinimapTexture");

	Params::WB_Minimap_C_SetMinimapTexture Parms{};

	Parms.MinimapTexture = MinimapTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.IncrementZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InRate                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::IncrementZoom(float InRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "IncrementZoom");

	Params::WB_Minimap_C_IncrementZoom Parms{};

	Parms.InRate = InRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.SetMinimapModeCommon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_MODE                          Param_MinimapMode                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SetMinimapModeCommon(E_MINIMAP_MODE Param_MinimapMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetMinimapModeCommon");

	Params::WB_Minimap_C_SetMinimapModeCommon Parms{};

	Parms.Param_MinimapMode = Param_MinimapMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.GetMinimapMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_MINIMAP_MODE                          Param_MinimapMode                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetMinimapMode(E_MINIMAP_MODE* Param_MinimapMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetMinimapMode");

	Params::WB_Minimap_C_GetMinimapMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_MinimapMode != nullptr)
		*Param_MinimapMode = Parms.Param_MinimapMode;
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::ProcessInput(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput");

	Params::WB_Minimap_C_ProcessInput Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Immediate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::ShowMinimap(bool Immediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimap");

	Params::WB_Minimap_C_ShowMinimap Parms{};

	Parms.Immediate = Immediate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.SetAllCenterLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CenterLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SetAllCenterLocation(const struct FVector& CenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetAllCenterLocation");

	Params::WB_Minimap_C_SetAllCenterLocation Parms{};

	Parms.CenterLocation = std::move(CenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.WorldToTexCoordOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Zoom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_Dimensions                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TexCoordOffset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::WorldToTexCoordOffset(const struct FVector& WorldLocation, float Zoom, const struct FVector& Param_Dimensions, struct FVector* TexCoordOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "WorldToTexCoordOffset");

	Params::WB_Minimap_C_WorldToTexCoordOffset Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Zoom = Zoom;
	Parms.Param_Dimensions = std::move(Param_Dimensions);

	UObject::ProcessEvent(Func, &Parms);

	if (TexCoordOffset != nullptr)
		*TexCoordOffset = std::move(Parms.TexCoordOffset);
}


// Function WB_Minimap.WB_Minimap_C.TexCoordOffsetToWorld
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TexCoordOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Zoom                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_Dimensions                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::TexCoordOffsetToWorld(const struct FVector& TexCoordOffset, float Zoom, const struct FVector& Param_Dimensions, struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "TexCoordOffsetToWorld");

	Params::WB_Minimap_C_TexCoordOffsetToWorld Parms{};

	Parms.TexCoordOffset = std::move(TexCoordOffset);
	Parms.Zoom = Zoom;
	Parms.Param_Dimensions = std::move(Param_Dimensions);

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function WB_Minimap.WB_Minimap_C.StartFocusAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseCustomZoom                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CustomZoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::StartFocusAction(const struct FVector& WorldLocation, float Time, bool UseCustomZoom, float CustomZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartFocusAction");

	Params::WB_Minimap_C_StartFocusAction Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Time = Time;
	Parms.UseCustomZoom = UseCustomZoom;
	Parms.CustomZoom = CustomZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.Update Focus Action
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::Update_Focus_Action(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "Update Focus Action");

	Params::WB_Minimap_C_Update_Focus_Action Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.IncFocusStep
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::IncFocusStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "IncFocusStep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.LoadMinimapTextureBlocking
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMinimapBGTextureEntry*           BGTexture                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::LoadMinimapTextureBlocking(int32 MapId, int32 AreaId, class UMinimapBGTextureEntry** BGTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "LoadMinimapTextureBlocking");

	Params::WB_Minimap_C_LoadMinimapTextureBlocking Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);

	if (BGTexture != nullptr)
		*BGTexture = Parms.BGTexture;
}


// Function WB_Minimap.WB_Minimap_C.OnChangeShowingId
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_CHANGE_TYPE                   ChangeType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::OnChangeShowingId(E_MINIMAP_CHANGE_TYPE ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnChangeShowingId");

	Params::WB_Minimap_C_OnChangeShowingId Parms{};

	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.PrintLog
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::PrintLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "PrintLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.GetAllTexcoordToScreenUV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TexToScreen                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetAllTexcoordToScreenUV(struct FVector* TexToScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetAllTexcoordToScreenUV");

	Params::WB_Minimap_C_GetAllTexcoordToScreenUV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TexToScreen != nullptr)
		*TexToScreen = std::move(Parms.TexToScreen);
}


// Function WB_Minimap.WB_Minimap_C.GetAllTexToScreen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          UV                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ScreenPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetAllTexToScreen(const struct FVector& UV, struct FVector* ScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetAllTexToScreen");

	Params::WB_Minimap_C_GetAllTexToScreen Parms{};

	Parms.UV = std::move(UV);

	UObject::ProcessEvent(Func, &Parms);

	if (ScreenPosition != nullptr)
		*ScreenPosition = std::move(Parms.ScreenPosition);
}


// Function WB_Minimap.WB_Minimap_C.ClampAllTexcoord
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ClampAllTexcoord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ClampAllTexcoord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.GetAllScreenToTex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Screen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          UV                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetAllScreenToTex(const struct FVector& Screen, struct FVector* UV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetAllScreenToTex");

	Params::WB_Minimap_C_GetAllScreenToTex Parms{};

	Parms.Screen = std::move(Screen);

	UObject::ProcessEvent(Func, &Parms);

	if (UV != nullptr)
		*UV = std::move(Parms.UV);
}


// Function WB_Minimap.WB_Minimap_C.ClampAllZoom
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ClampAllZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ClampAllZoom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateAreaTable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateAreaTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateAreaTable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.InitZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_CHANGE_TYPE                   ChangeType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::InitZoom(E_MINIMAP_CHANGE_TYPE ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "InitZoom");

	Params::WB_Minimap_C_InitZoom Parms{};

	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.InitScroll
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::InitScroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "InitScroll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SetWidgetPosition
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::SetWidgetPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetWidgetPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_All
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::ProcessInput_All(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_All");

	Params::WB_Minimap_C_ProcessInput_All Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_MapSelect
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInput_MapSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_MapSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_AllMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInput_AllMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_AllMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EndMapSelect
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndMapSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndMapSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_IconHelp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDicsion                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bClose                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::ProcessInput_IconHelp(bool* bDicsion, int32* Param_Index, bool* bClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_IconHelp");

	Params::WB_Minimap_C_ProcessInput_IconHelp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDicsion != nullptr)
		*bDicsion = Parms.bDicsion;

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;

	if (bClose != nullptr)
		*bClose = Parms.bClose;
}


// Function WB_Minimap.WB_Minimap_C.EndIconHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndIconHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndIconHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateHelpMessage
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateHelpMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateHelpMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EndAllMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndAllMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndAllMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowAllmap
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowAllmap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowAllmap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.HideAllmap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HideBG                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::HideAllmap(bool HideBG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "HideAllmap");

	Params::WB_Minimap_C_HideAllmap Parms{};

	Parms.HideBG = HideBG;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.UpdateMaterialParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateMaterialParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateMaterialParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartRyuketsu
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartRyuketsu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartRyuketsu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.IsTextureChanging
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsChanging                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::IsTextureChanging(bool* IsChanging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "IsTextureChanging");

	Params::WB_Minimap_C_IsTextureChanging Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsChanging != nullptr)
		*IsChanging = Parms.IsChanging;
}


// Function WB_Minimap.WB_Minimap_C.HideAWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::HideAWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "HideAWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.HideMinimap
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::HideMinimap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "HideMinimap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EndRyuketsu
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndRyuketsu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndRyuketsu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EndFocusAction
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndFocusAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndFocusAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.HideMiniOverlay
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::HideMiniOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "HideMiniOverlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowMiniOverlay
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMiniOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMiniOverlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateMiniAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::UpdateMiniAnim(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateMiniAnim");

	Params::WB_Minimap_C_UpdateMiniAnim Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.StartShowMinimapAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartShowMinimapAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartShowMinimapAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartHideMinimapAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartHideMinimapAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartHideMinimapAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_MiniMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInput_MiniMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_MiniMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateMapSelectSelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::UpdateMapSelectSelection(int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateMapSelectSelection");

	Params::WB_Minimap_C_UpdateMapSelectSelection Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.SetHidden
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::SetHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateFogGridTexture
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateFogGridTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateFogGridTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.GetFogGridTexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         OutTexture                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetFogGridTexture(class UTexture** OutTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetFogGridTexture");

	Params::WB_Minimap_C_GetFogGridTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;
}


// Function WB_Minimap.WB_Minimap_C.InitFogGridTexture
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::InitFogGridTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "InitFogGridTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateByPlayerMovement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::UpdateByPlayerMovement(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateByPlayerMovement");

	Params::WB_Minimap_C_UpdateByPlayerMovement Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_NextArea
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInput_NextArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_NextArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateButtonHelp
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SaveZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_CHANGE_TYPE                   ChangeType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SaveZoom(E_MINIMAP_CHANGE_TYPE ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SaveZoom");

	Params::WB_Minimap_C_SaveZoom Parms{};

	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.UpdateButtonHelpReserve
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateButtonHelpReserve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateButtonHelpReserve");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimapAnimContinue
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMinimapAnimContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimapAnimContinue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartFocusActionLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseCustomZoom                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CustomZoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::StartFocusActionLocation(const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartFocusActionLocation");

	Params::WB_Minimap_C_StartFocusActionLocation Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.Time = Time;
	Parms.UseCustomZoom = UseCustomZoom;
	Parms.CustomZoom = CustomZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimapImmediate
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMinimapImmediate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimapImmediate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessLockInputHold
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessLockInputHold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessLockInputHold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.CalcCurrentHoldInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HoldFlags                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::CalcCurrentHoldInput(int32* HoldFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CalcCurrentHoldInput");

	Params::WB_Minimap_C_CalcCurrentHoldInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HoldFlags != nullptr)
		*HoldFlags = Parms.HoldFlags;
}


// Function WB_Minimap.WB_Minimap_C.StartHoldInputLock
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartHoldInputLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartHoldInputLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ResetHoldInputLock
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ResetHoldInputLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ResetHoldInputLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateHoldInputLock
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateHoldInputLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateHoldInputLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SetFieldDrawOff
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::SetFieldDrawOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetFieldDrawOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SetFieldDrawOn
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::SetFieldDrawOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetFieldDrawOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateMinimap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::UpdateMinimap(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateMinimap");

	Params::WB_Minimap_C_UpdateMinimap Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.UpdateAllmap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateAllmap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateAllmap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::UpdateTick(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateTick");

	Params::WB_Minimap_C_UpdateTick Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ShowMapSelecter
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMapSelecter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMapSelecter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartFocusActionMapArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseCustomZoom                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CustomZoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCampUI                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::StartFocusActionMapArea(int32 MapId, int32 AreaId, const struct FVector& StartLocation, const struct FVector& EndLocation, float Time, bool UseCustomZoom, float CustomZoom, bool IsCampUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartFocusActionMapArea");

	Params::WB_Minimap_C_StartFocusActionMapArea Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.Time = Time;
	Parms.UseCustomZoom = UseCustomZoom;
	Parms.CustomZoom = CustomZoom;
	Parms.IsCampUI = IsCampUI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.StartFocusMission
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMessageWindow                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCampUI                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::StartFocusMission(int32 MissionId, bool IsMessageWindow, bool IsCampUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartFocusMission");

	Params::WB_Minimap_C_StartFocusMission Parms{};

	Parms.MissionId = MissionId;
	Parms.IsMessageWindow = IsMessageWindow;
	Parms.IsCampUI = IsCampUI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.EndFocusMission
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndFocusMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndFocusMission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWB_Minimap_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnMouseButtonDown");

	Params::WB_Minimap_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_Minimap.WB_Minimap_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWB_Minimap_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnMouseMove");

	Params::WB_Minimap_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_Minimap.WB_Minimap_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWB_Minimap_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "OnMouseWheel");

	Params::WB_Minimap_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_Minimap.WB_Minimap_C.CreateOnOffEffectIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MINIMAP_POI_ICON                      Icon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::CreateOnOffEffectIcon(E_MINIMAP_POI_ICON Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CreateOnOffEffectIcon");

	Params::WB_Minimap_C_CreateOnOffEffectIcon Parms{};

	Parms.Icon = Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.CreateOnOffEffectAll
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::CreateOnOffEffectAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CreateOnOffEffectAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ApplyMiniAnimToOverlay
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ApplyMiniAnimToOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ApplyMiniAnimToOverlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SetMinimapAnimHidden
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::SetMinimapAnimHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetMinimapAnimHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.PlayAnimAllInImageOnly
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::PlayAnimAllInImageOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "PlayAnimAllInImageOnly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.SetFocusStep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SetFocusStep(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetFocusStep");

	Params::WB_Minimap_C_SetFocusStep Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.SetBGLocationCenter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LocationOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::SetBGLocationCenter(const struct FVector& LocationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetBGLocationCenter");

	Params::WB_Minimap_C_SetBGLocationCenter Parms{};

	Parms.LocationOffset = std::move(LocationOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.MouseCheck_SortWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SORTWINDOW_MOUSE_EVENT_TYPE           MouseEventType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InSelectLstIdx                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InSelectSlotIdx                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InListScrollOffset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::MouseCheck_SortWindow(E_SORTWINDOW_MOUSE_EVENT_TYPE MouseEventType, int32 InSelectLstIdx, int32 InSelectSlotIdx, int32 InListScrollOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "MouseCheck_SortWindow");

	Params::WB_Minimap_C_MouseCheck_SortWindow Parms{};

	Parms.MouseEventType = MouseEventType;
	Parms.InSelectLstIdx = InSelectLstIdx;
	Parms.InSelectSlotIdx = InSelectSlotIdx;
	Parms.InListScrollOffset = InListScrollOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.GetCameraAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   CameraAngle                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetCameraAngle(float* CameraAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetCameraAngle");

	Params::WB_Minimap_C_GetCameraAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraAngle != nullptr)
		*CameraAngle = Parms.CameraAngle;
}


// Function WB_Minimap.WB_Minimap_C.SetTopCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TopCameraMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::SetTopCameraMode(bool TopCameraMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "SetTopCameraMode");

	Params::WB_Minimap_C_SetTopCameraMode Parms{};

	Parms.TopCameraMode = TopCameraMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.CheckUseAlternateMapAreaId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseAlternate                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::CheckUseAlternateMapAreaId(int32 MapId, int32 AreaId, bool* UseAlternate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CheckUseAlternateMapAreaId");

	Params::WB_Minimap_C_CheckUseAlternateMapAreaId Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);

	if (UseAlternate != nullptr)
		*UseAlternate = Parms.UseAlternate;
}


// Function WB_Minimap.WB_Minimap_C.GetAlternateMapAreaId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AlternateExist                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   OutMapId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutAreaId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::GetAlternateMapAreaId(int32 MapId, int32 AreaId, bool* AlternateExist, int32* OutMapId, int32* OutAreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetAlternateMapAreaId");

	Params::WB_Minimap_C_GetAlternateMapAreaId Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);

	if (AlternateExist != nullptr)
		*AlternateExist = Parms.AlternateExist;

	if (OutMapId != nullptr)
		*OutMapId = Parms.OutMapId;

	if (OutAreaId != nullptr)
		*OutAreaId = Parms.OutAreaId;
}


// Function WB_Minimap.WB_Minimap_C.CreateOnOffEffectRyuketsu
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::CreateOnOffEffectRyuketsu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CreateOnOffEffectRyuketsu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMinimapButtonHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimapButtonHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateButtonHelpActiveColor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateButtonHelpActiveColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateButtonHelpActiveColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartFocusMissionReport
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMessageWindow                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCampUI                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::StartFocusMissionReport(int32 MissionId, bool IsMessageWindow, bool IsCampUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartFocusMissionReport");

	Params::WB_Minimap_C_StartFocusMissionReport Parms{};

	Parms.MissionId = MissionId;
	Parms.IsMessageWindow = IsMessageWindow;
	Parms.IsCampUI = IsCampUI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_CoasterLine
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDicsion                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bClose                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::ProcessInput_CoasterLine(bool* bDicsion, int32* Param_Index, bool* bClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_CoasterLine");

	Params::WB_Minimap_C_ProcessInput_CoasterLine Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDicsion != nullptr)
		*bDicsion = Parms.bDicsion;

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;

	if (bClose != nullptr)
		*bClose = Parms.bClose;
}


// Function WB_Minimap.WB_Minimap_C.StartCoasterLineAllMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartCoasterLineAllMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartCoasterLineAllMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.FinishCoasterLineAllMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::FinishCoasterLineAllMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "FinishCoasterLineAllMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.GetCoasterLineAllMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CoasterLineMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::GetCoasterLineAllMode(bool* CoasterLineMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetCoasterLineAllMode");

	Params::WB_Minimap_C_GetCoasterLineAllMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CoasterLineMode != nullptr)
		*CoasterLineMode = Parms.CoasterLineMode;
}


// Function WB_Minimap.WB_Minimap_C.StartCoasterLineMinimap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MinimapDataId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::StartCoasterLineMinimap(int32 MinimapDataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartCoasterLineMinimap");

	Params::WB_Minimap_C_StartCoasterLineMinimap Parms{};

	Parms.MinimapDataId = MinimapDataId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.FinishCoasterLineMinimap
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::FinishCoasterLineMinimap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "FinishCoasterLineMinimap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ProcessInputReset
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInputReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInputReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.CanUseCoasterLineAllMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanUse                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::CanUseCoasterLineAllMode(bool* CanUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "CanUseCoasterLineAllMode");

	Params::WB_Minimap_C_CanUseCoasterLineAllMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanUse != nullptr)
		*CanUse = Parms.CanUse;
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_Landmark
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ProcessInput_Landmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_Landmark");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.StartLandmarkMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartLandmarkMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartLandmarkMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.EndLandmarkMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::EndLandmarkMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "EndLandmarkMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.UpdateLandmarkAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateLandmarkAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateLandmarkAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp_Normal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMinimapButtonHelp_Normal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimapButtonHelp_Normal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.ShowMinimapButtonHelp_Landmark
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::ShowMinimapButtonHelp_Landmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ShowMinimapButtonHelp_Landmark");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.IsSlowMoveInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    SlowMove                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::IsSlowMoveInput(bool* SlowMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "IsSlowMoveInput");

	Params::WB_Minimap_C_IsSlowMoveInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlowMove != nullptr)
		*SlowMove = Parms.SlowMove;
}


// Function WB_Minimap.WB_Minimap_C.ProcessInput_AllZoomScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Minimap_C::ProcessInput_AllZoomScroll(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "ProcessInput_AllZoomScroll");

	Params::WB_Minimap_C_ProcessInput_AllZoomScroll Parms{};

	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Minimap.WB_Minimap_C.UpdateMouseDrag
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::UpdateMouseDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "UpdateMouseDrag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.GetMousePosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        MousePosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Minimap_C::GetMousePosition(struct FVector2D* MousePosition, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "GetMousePosition");

	Params::WB_Minimap_C_GetMousePosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MousePosition != nullptr)
		*MousePosition = std::move(Parms.MousePosition);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function WB_Minimap.WB_Minimap_C.StartMouseDrag
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::StartMouseDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "StartMouseDrag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Minimap.WB_Minimap_C.FinishMouseDrag
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_Minimap_C::FinishMouseDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Minimap_C", "FinishMouseDrag");

	UObject::ProcessEvent(Func, nullptr);
}

}

