#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleCamActorFactory

#include "Basic.hpp"

#include "BattleCamActorFactory_classes.hpp"
#include "BattleCamActorFactory_parameters.hpp"


namespace SDK
{

// Function BattleCamActorFactory.BattleCamActorFactory_C.ExecuteUbergraph_BattleCamActorFactory
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ExecuteUbergraph_BattleCamActorFactory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ExecuteUbergraph_BattleCamActorFactory");

	Params::BattleCamActorFactory_C_ExecuteUbergraph_BattleCamActorFactory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ReceiveEndPlay");

	Params::BattleCamActorFactory_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBattleCamActorFactory_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SpawnRailActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::SpawnRailActor(E_BTL_CAM_TYPE CamType, int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SpawnRailActor");

	Params::BattleCamActorFactory_C_SpawnRailActor Parms{};

	Parms.CamType = CamType;
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_TurnPrevPlayer
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPreview                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_RailActor_C*                  Output_Get                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_TurnPrevPlayer(bool IsPreview, class ABP_RailActor_C** Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_TurnPrevPlayer");

	Params::BattleCamActorFactory_C_Spawn_TurnPrevPlayer Parms{};

	Parms.IsPreview = IsPreview;

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = Parms.Output_Get;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetMainWork
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleMain_C>AsBPI_Battle_Main                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetMainWork(TScriptInterface<class IBPI_BattleMain_C>* AsBPI_Battle_Main)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetMainWork");

	Params::BattleCamActorFactory_C_GetMainWork Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Battle_Main != nullptr)
		*AsBPI_Battle_Main = Parms.AsBPI_Battle_Main;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartySystem
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleParty_C>Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetPartySystem(TScriptInterface<class IBPI_BattleParty_C>* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartySystem");

	Params::BattleCamActorFactory_C_GetPartySystem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Start
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPrevBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           DevIDOption                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Start(bool IsPrevBattle, const class FString& DevIDOption, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Start");

	Params::BattleCamActorFactory_C_Spawn_Start Parms{};

	Parms.IsPrevBattle = IsPrevBattle;
	Parms.DevIDOption = std::move(DevIDOption);

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetCurrentActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetCurrentActor(class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetCurrentActor");

	Params::BattleCamActorFactory_C_GetCurrentActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.DestroyCurrentActor
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::DestroyCurrentActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "DestroyCurrentActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Command
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBackOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFrontOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Command(int32 PartyIndex, bool IsBackOnly, bool IsFrontOnly, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Command");

	Params::BattleCamActorFactory_C_Spawn_Command Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.IsBackOnly = IsBackOnly;
	Parms.IsFrontOnly = IsFrontOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_TurnPrevEnemy
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_TurnPrevEnemy(class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_TurnPrevEnemy");

	Params::BattleCamActorFactory_C_Spawn_TurnPrevEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SpawnRailActorSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetPartyIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_BTL_SKILL_CAM_TYPE                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ActorPartyIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsConsiderActorLocation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverrideHokanSpeed                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHokanSpeedMax                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DoNotResetUnitAveLocation                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::SpawnRailActorSkill(int32 TargetPartyIndex, E_BTL_SKILL_CAM_TYPE Type, const class FString& Param_Name, int32 ActorPartyIndex, bool IsConsiderActorLocation, bool IsOverrideHokanSpeed, bool IsHokanSpeedMax, bool DoNotResetUnitAveLocation, bool* IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SpawnRailActorSkill");

	Params::BattleCamActorFactory_C_SpawnRailActorSkill Parms{};

	Parms.TargetPartyIndex = TargetPartyIndex;
	Parms.Type = Type;
	Parms.Param_Name = std::move(Param_Name);
	Parms.ActorPartyIndex = ActorPartyIndex;
	Parms.IsConsiderActorLocation = IsConsiderActorLocation;
	Parms.IsOverrideHokanSpeed = IsOverrideHokanSpeed;
	Parms.IsHokanSpeedMax = IsHokanSpeedMax;
	Parms.DoNotResetUnitAveLocation = DoNotResetUnitAveLocation;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSuccess != nullptr)
		*IsSuccess = Parms.IsSuccess;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Result
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Result(class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Result");

	Params::BattleCamActorFactory_C_Spawn_Result Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SpawnRailActorPrevBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OriginTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>InUnitList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               InUnitTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           DevIDOption                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::SpawnRailActorPrevBattle(E_BTL_CAM_TYPE CamType, const struct FTransform& OriginTransform, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& InUnitList, TArray<struct FTransform>& InUnitTrans, const class FString& DevIDOption, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SpawnRailActorPrevBattle");

	Params::BattleCamActorFactory_C_SpawnRailActorPrevBattle Parms{};

	Parms.CamType = CamType;
	Parms.OriginTransform = std::move(OriginTransform);
	Parms.InUnitList = std::move(InUnitList);
	Parms.InUnitTrans = std::move(InUnitTrans);
	Parms.DevIDOption = std::move(DevIDOption);

	UObject::ProcessEvent(Func, &Parms);

	InUnitList = std::move(Parms.InUnitList);
	InUnitTrans = std::move(Parms.InUnitTrans);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Target
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Target(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Target");

	Params::BattleCamActorFactory_C_Spawn_Target Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.InvestigateSideMaxSize
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsPlayerSide                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           SizeString                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::InvestigateSideMaxSize(bool IsPlayerSide, class FString* SizeString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "InvestigateSideMaxSize");

	Params::BattleCamActorFactory_C_InvestigateSideMaxSize Parms{};

	Parms.IsPlayerSide = IsPlayerSide;

	UObject::ProcessEvent(Func, &Parms);

	if (SizeString != nullptr)
		*SizeString = std::move(Parms.SizeString);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Recam
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Recam(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Recam");

	Params::BattleCamActorFactory_C_Spawn_Recam Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcMaxSize
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Current_size                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Cam_category                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Calced_size                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Category                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CalcMaxSize(int32 Current_size, const class FString& Cam_category, int32* Calced_size, class FString* Category, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcMaxSize");

	Params::BattleCamActorFactory_C_CalcMaxSize Parms{};

	Parms.Current_size = Current_size;
	Parms.Cam_category = std::move(Cam_category);

	UObject::ProcessEvent(Func, &Parms);

	if (Calced_size != nullptr)
		*Calced_size = Parms.Calced_size;

	if (Category != nullptr)
		*Category = std::move(Parms.Category);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Debug_IsUseDebugData
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           PathRoot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::Debug_IsUseDebugData(const class FString& PathRoot, bool* IsUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Debug_IsUseDebugData");

	Params::BattleCamActorFactory_C_Debug_IsUseDebugData Parms{};

	Parms.PathRoot = std::move(PathRoot);

	UObject::ProcessEvent(Func, &Parms);

	if (IsUse != nullptr)
		*IsUse = Parms.IsUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Debug_GetCameraName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           PathRoot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           CameraName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Debug_GetCameraName(const class FString& PathRoot, class FString* CameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Debug_GetCameraName");

	Params::BattleCamActorFactory_C_Debug_GetCameraName Parms{};

	Parms.PathRoot = std::move(PathRoot);

	UObject::ProcessEvent(Func, &Parms);

	if (CameraName != nullptr)
		*CameraName = std::move(Parms.CameraName);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ToCamera
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReversed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsEnableCharaDitherCtrl                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::ToCamera(int32 PartyIndex, bool IsReversed, bool IsEnableCharaDitherCtrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ToCamera");

	Params::BattleCamActorFactory_C_ToCamera Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.IsReversed = IsReversed;
	Parms.IsEnableCharaDitherCtrl = IsEnableCharaDitherCtrl;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcCameraTransform
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_RIG_RAIL_ORIGIN_TYPE                  RigRailOrigin                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             OriginSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsParty                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Ret                                                    (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CalcCameraTransform(E_RIG_RAIL_ORIGIN_TYPE RigRailOrigin, int32 PartyIndex, class FName OriginSocket, bool IsParty, struct FTransform* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcCameraTransform");

	Params::BattleCamActorFactory_C_CalcCameraTransform Parms{};

	Parms.RigRailOrigin = RigRailOrigin;
	Parms.PartyIndex = PartyIndex;
	Parms.OriginSocket = OriginSocket;
	Parms.IsParty = IsParty;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = std::move(Parms.Ret);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RetrieveSocketName
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAllSelect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::RetrieveSocketName(E_SKILL_TARGET Target, class FName Default, class FName* Ret, bool* IsAllSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RetrieveSocketName");

	Params::BattleCamActorFactory_C_RetrieveSocketName Parms{};

	Parms.Target = Target;
	Parms.Default = Default;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;

	if (IsAllSelect != nullptr)
		*IsAllSelect = Parms.IsAllSelect;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RetrieveGlobalSocketLocation
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CamCategoryName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::RetrieveGlobalSocketLocation(class FName CamCategoryName, class FName SocketName, struct FVector* GlobalLocation, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RetrieveGlobalSocketLocation");

	Params::BattleCamActorFactory_C_RetrieveGlobalSocketLocation Parms{};

	Parms.CamCategoryName = CamCategoryName;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalLocation != nullptr)
		*GlobalLocation = std::move(Parms.GlobalLocation);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_BadStatus
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_BadStatus(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_BadStatus");

	Params::BattleCamActorFactory_C_Spawn_BadStatus Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_BadStatus_One
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_BadStatus_One(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_BadStatus_One");

	Params::BattleCamActorFactory_C_Spawn_BadStatus_One Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsLookAtEnemyLine
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsLook                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsLookAtEnemyLine(bool* IsLook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsLookAtEnemyLine");

	Params::BattleCamActorFactory_C_IsLookAtEnemyLine Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLook != nullptr)
		*IsLook = Parms.IsLook;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.DecideCameraSide_BF
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CameraSide                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::DecideCameraSide_BF(int32* CameraSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "DecideCameraSide_BF");

	Params::BattleCamActorFactory_C_DecideCameraSide_BF Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraSide != nullptr)
		*CameraSide = Parms.CameraSide;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.DecideCameraSide_LR
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_CAMERA_SIDE_LR_TYPE>           InvalidChoice                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   CameraSide                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CAMERA_SIDE_LR_TYPE                   ChoseType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForceDecide                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::DecideCameraSide_LR(TArray<E_CAMERA_SIDE_LR_TYPE>& InvalidChoice, int32* CameraSide, E_CAMERA_SIDE_LR_TYPE* ChoseType, bool* IsForceDecide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "DecideCameraSide_LR");

	Params::BattleCamActorFactory_C_DecideCameraSide_LR Parms{};

	Parms.InvalidChoice = std::move(InvalidChoice);

	UObject::ProcessEvent(Func, &Parms);

	InvalidChoice = std::move(Parms.InvalidChoice);

	if (CameraSide != nullptr)
		*CameraSide = Parms.CameraSide;

	if (ChoseType != nullptr)
		*ChoseType = Parms.ChoseType;

	if (IsForceDecide != nullptr)
		*IsForceDecide = Parms.IsForceDecide;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SplitString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Spliter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   SplitedStrings                                         (Parm, OutParm)

void UBattleCamActorFactory_C::SplitString(const class FString& Source, const class FString& Spliter, TArray<class FString>* SplitedStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SplitString");

	Params::BattleCamActorFactory_C_SplitString Parms{};

	Parms.Source = std::move(Source);
	Parms.Spliter = std::move(Spliter);

	UObject::ProcessEvent(Func, &Parms);

	if (SplitedStrings != nullptr)
		*SplitedStrings = std::move(Parms.SplitedStrings);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RetrieveSkillCameraName
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FName                             IgnoreCameraName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   CameraNames                                            (Parm, OutParm)

void UBattleCamActorFactory_C::RetrieveSkillCameraName(const class FString& CameraName, class FName IgnoreCameraName, TArray<class FString>* CameraNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RetrieveSkillCameraName");

	Params::BattleCamActorFactory_C_RetrieveSkillCameraName Parms{};

	Parms.CameraName = std::move(CameraName);
	Parms.IgnoreCameraName = IgnoreCameraName;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraNames != nullptr)
		*CameraNames = std::move(Parms.CameraNames);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CamFactoryLog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LogString                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsErrorLog                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CamFactoryLog(const class FString& LogString, bool IsErrorLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CamFactoryLog");

	Params::BattleCamActorFactory_C_CamFactoryLog Parms{};

	Parms.LogString = std::move(LogString);
	Parms.IsErrorLog = IsErrorLog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_FusionForm
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_FusionForm(class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_FusionForm");

	Params::BattleCamActorFactory_C_Spawn_FusionForm Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsSameCameraName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_RailActor_C*                  RailActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool                                    IsSame                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsSameCameraName(class ABP_RailActor_C*& RailActor, class FString& RowName, bool* IsSame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsSameCameraName");

	Params::BattleCamActorFactory_C_IsSameCameraName Parms{};

	Parms.RailActor = RailActor;
	Parms.RowName = std::move(RowName);

	UObject::ProcessEvent(Func, &Parms);

	RailActor = Parms.RailActor;
	RowName = std::move(Parms.RowName);

	if (IsSame != nullptr)
		*IsSame = Parms.IsSame;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcUpVecOnlyTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       ForDaath                                               (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CalcUpVecOnlyTransform(const struct FTransform& In, struct FTransform* ForDaath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcUpVecOnlyTransform");

	Params::BattleCamActorFactory_C_CalcUpVecOnlyTransform Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);

	if (ForDaath != nullptr)
		*ForDaath = std::move(Parms.ForDaath);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetOriginUpVec
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          UpVec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetOriginUpVec(struct FVector* UpVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetOriginUpVec");

	Params::BattleCamActorFactory_C_GetOriginUpVec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpVec != nullptr)
		*UpVec = std::move(Parms.UpVec);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetOriginRightVec
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          UpVec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetOriginRightVec(struct FVector* UpVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetOriginRightVec");

	Params::BattleCamActorFactory_C_GetOriginRightVec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpVec != nullptr)
		*UpVec = std::move(Parms.UpVec);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsLookAtEnemyHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsLook                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsLookAtEnemyHeight(bool* IsLook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsLookAtEnemyHeight");

	Params::BattleCamActorFactory_C_IsLookAtEnemyHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLook != nullptr)
		*IsLook = Parms.IsLook;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IdentifyTransform
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBattleCamActorFactory_C::IdentifyTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IdentifyTransform");

	Params::BattleCamActorFactory_C_IdentifyTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcTargetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  Rail                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReversed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          RetVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcTargetLocation(int32 PartyIndex, class ABP_RailActor_C*& Rail, bool IsReversed, struct FVector* RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcTargetLocation");

	Params::BattleCamActorFactory_C_CalcTargetLocation Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.Rail = Rail;
	Parms.IsReversed = IsReversed;

	UObject::ProcessEvent(Func, &Parms);

	Rail = Parms.Rail;

	if (RetVal != nullptr)
		*RetVal = std::move(Parms.RetVal);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CheckSplineSight
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetPartyIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       OffsetTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// TArray<struct FCustomSplinePoint>       SplinePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FRigRailPlayInfo                 PlayInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// class FName                             OverrideSocketName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                TraceObject                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   AdjustScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SightRange                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsClear                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CheckSplineSight(int32 TargetPartyIndex, const struct FVector& TargetLocation, const struct FTransform& Position, const struct FTransform& OffsetTransform, TArray<struct FCustomSplinePoint>& SplinePoint, struct FRigRailPlayInfo& PlayInfo, class FName OverrideSocketName, TArray<EObjectTypeQuery>& TraceObject, float AdjustScale, float SightRange, bool* IsClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CheckSplineSight");

	Params::BattleCamActorFactory_C_CheckSplineSight Parms{};

	Parms.TargetPartyIndex = TargetPartyIndex;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.Position = std::move(Position);
	Parms.OffsetTransform = std::move(OffsetTransform);
	Parms.SplinePoint = std::move(SplinePoint);
	Parms.PlayInfo = std::move(PlayInfo);
	Parms.OverrideSocketName = OverrideSocketName;
	Parms.TraceObject = std::move(TraceObject);
	Parms.AdjustScale = AdjustScale;
	Parms.SightRange = SightRange;

	UObject::ProcessEvent(Func, &Parms);

	SplinePoint = std::move(Parms.SplinePoint);
	PlayInfo = std::move(Parms.PlayInfo);
	TraceObject = std::move(Parms.TraceObject);

	if (IsClear != nullptr)
		*IsClear = Parms.IsClear;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.InitSightChecker
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::InitSightChecker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "InitSightChecker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.FinalizeSightChecker
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::FinalizeSightChecker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "FinalizeSightChecker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.MakeName_TurnPrev
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUnionForm                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsHugeBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           DevID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   CameraNames                                            (Parm, OutParm)

void UBattleCamActorFactory_C::MakeName_TurnPrev(bool IsPlayer, bool IsUnionForm, bool IsHugeBattle, const class FString& DevID, TArray<class FString>* CameraNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "MakeName_TurnPrev");

	Params::BattleCamActorFactory_C_MakeName_TurnPrev Parms{};

	Parms.IsPlayer = IsPlayer;
	Parms.IsUnionForm = IsUnionForm;
	Parms.IsHugeBattle = IsHugeBattle;
	Parms.DevID = std::move(DevID);

	UObject::ProcessEvent(Func, &Parms);

	if (CameraNames != nullptr)
		*CameraNames = std::move(Parms.CameraNames);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.MakeName_Start
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHugeBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           DevIDOption                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   CameraNames                                            (Parm, OutParm)

void UBattleCamActorFactory_C::MakeName_Start(bool IsHugeBattle, const class FString& DevIDOption, TArray<class FString>* CameraNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "MakeName_Start");

	Params::BattleCamActorFactory_C_MakeName_Start Parms{};

	Parms.IsHugeBattle = IsHugeBattle;
	Parms.DevIDOption = std::move(DevIDOption);

	UObject::ProcessEvent(Func, &Parms);

	if (CameraNames != nullptr)
		*CameraNames = std::move(Parms.CameraNames);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RetrieveCameraName
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           CoreName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   FB_Priority                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LR_Priority                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoWildCard                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UDataTable*                       Table                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   CameraNames                                            (Parm, OutParm)

void UBattleCamActorFactory_C::RetrieveCameraName(const class FString& CoreName, int32 FB_Priority, int32 LR_Priority, bool NoWildCard, class UDataTable* Table, TArray<class FString>* CameraNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RetrieveCameraName");

	Params::BattleCamActorFactory_C_RetrieveCameraName Parms{};

	Parms.CoreName = std::move(CoreName);
	Parms.FB_Priority = FB_Priority;
	Parms.LR_Priority = LR_Priority;
	Parms.NoWildCard = NoWildCard;
	Parms.Table = Table;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraNames != nullptr)
		*CameraNames = std::move(Parms.CameraNames);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.MakeName_Command
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CameraCategory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsHugeBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBossBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsBackOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFrontOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsN_                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSelecting                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsInvAll                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FString>                   CameraNames                                            (Parm, OutParm)

void UBattleCamActorFactory_C::MakeName_Command(const class FString& CameraCategory, bool IsHugeBattle, bool IsBossBattle, bool IsBackOnly, bool IsFrontOnly, bool IsN_, bool IsSelecting, bool IsInvAll, TArray<class FString>* CameraNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "MakeName_Command");

	Params::BattleCamActorFactory_C_MakeName_Command Parms{};

	Parms.CameraCategory = std::move(CameraCategory);
	Parms.IsHugeBattle = IsHugeBattle;
	Parms.IsBossBattle = IsBossBattle;
	Parms.IsBackOnly = IsBackOnly;
	Parms.IsFrontOnly = IsFrontOnly;
	Parms.IsN_ = IsN_;
	Parms.IsSelecting = IsSelecting;
	Parms.IsInvAll = IsInvAll;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraNames != nullptr)
		*CameraNames = std::move(Parms.CameraNames);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyUnit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharaBase_C*                     RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetPartyUnit(int32 PartyIndex, class ACharaBase_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyUnit");

	Params::BattleCamActorFactory_C_GetPartyUnit Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetSideFirstIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetSideFirstIndex(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetSideFirstIndex");

	Params::BattleCamActorFactory_C_GetSideFirstIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ConstGetPartyStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ConstGetPartyStart(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ConstGetPartyStart");

	Params::BattleCamActorFactory_C_ConstGetPartyStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ConstGetEnemyStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ConstGetEnemyStart(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ConstGetEnemyStart");

	Params::BattleCamActorFactory_C_ConstGetEnemyStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ConstGetPartyLoopMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ConstGetPartyLoopMax(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ConstGetPartyLoopMax");

	Params::BattleCamActorFactory_C_ConstGetPartyLoopMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ConstGetEnemyLoopMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::ConstGetEnemyLoopMax(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ConstGetEnemyLoopMax");

	Params::BattleCamActorFactory_C_ConstGetEnemyLoopMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsInField
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsInField(int32 PartyIndex, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsInField");

	Params::BattleCamActorFactory_C_IsInField Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.isEnemy
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsEnemy(int32 Param_Index, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "isEnemy");

	Params::BattleCamActorFactory_C_IsEnemy Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetCurrentTargetType
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetCurrentTargetType(E_SKILL_TARGET* TargetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetCurrentTargetType");

	Params::BattleCamActorFactory_C_GetCurrentTargetType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetType != nullptr)
		*TargetType = Parms.TargetType;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcLookAtGlobalPos
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CalcLookAtGlobalPos(E_SKILL_TARGET TargetType, class FName SocketName, struct FVector* GlobalPos, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcLookAtGlobalPos");

	Params::BattleCamActorFactory_C_CalcLookAtGlobalPos Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalPos != nullptr)
		*GlobalPos = std::move(Parms.GlobalPos);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Summon
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Summon(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Summon");

	Params::BattleCamActorFactory_C_Spawn_Summon Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_Summon_One
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_Summon_One(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_Summon_One");

	Params::BattleCamActorFactory_C_Spawn_Summon_One Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.AdjustRelativePitch
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          A2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EnemyDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBattleCamActorFactory_C::AdjustRelativePitch(struct FTransform& A, struct FTransform& B, const struct FVector& A2, float EnemyDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "AdjustRelativePitch");

	Params::BattleCamActorFactory_C_AdjustRelativePitch Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.A2 = std::move(A2);
	Parms.EnemyDistance = EnemyDistance;

	UObject::ProcessEvent(Func, &Parms);

	A = std::move(Parms.A);
	B = std::move(Parms.B);

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcLookAtLocalPos
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          GlobalPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcLookAtLocalPos(E_SKILL_TARGET TargetType, class FName SocketName, bool* IsValid, struct FVector* GlobalPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcLookAtLocalPos");

	Params::BattleCamActorFactory_C_CalcLookAtLocalPos Parms{};

	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (GlobalPos != nullptr)
		*GlobalPos = std::move(Parms.GlobalPos);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetOriginTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Ret                                                    (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetOriginTransform(struct FTransform* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetOriginTransform");

	Params::BattleCamActorFactory_C_GetOriginTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = std::move(Parms.Ret);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyMaxRelativeScale
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetPartyMaxRelativeScale(int32 PartyIndex, float* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyMaxRelativeScale");

	Params::BattleCamActorFactory_C_GetPartyMaxRelativeScale Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyMaxRelativeScale_New
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHugeBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetPartyMaxRelativeScale_New(int32 PartyIndex, bool IsHugeBattle, float* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyMaxRelativeScale_New");

	Params::BattleCamActorFactory_C_GetPartyMaxRelativeScale_New Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.IsHugeBattle = IsHugeBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SetCamActorPlayRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::SetCamActorPlayRate(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SetCamActorPlayRate");

	Params::BattleCamActorFactory_C_SetCamActorPlayRate Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_N_Command
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBackOnly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsFrontOnly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InterpOverride                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_N_Command(int32 PartyIndex, bool IsBackOnly, bool IsFrontOnly, float InterpOverride, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_N_Command");

	Params::BattleCamActorFactory_C_Spawn_N_Command Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.IsBackOnly = IsBackOnly;
	Parms.IsFrontOnly = IsFrontOnly;
	Parms.InterpOverride = InterpOverride;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ToCamera_N
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::ToCamera_N()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ToCamera_N");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.PrepareAccessors
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::PrepareAccessors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "PrepareAccessors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetMainInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_MainInterface>AsBPI_Main_Interface                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetMainInterface(TScriptInterface<class IBPI_MainInterface>* AsBPI_Main_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetMainInterface");

	Params::BattleCamActorFactory_C_GetMainInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_Main_Interface != nullptr)
		*AsBPI_Main_Interface = Parms.AsBPI_Main_Interface;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyFlagInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTFlagInterface>AsBPI_PTFlag_Interface                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetPartyFlagInterface(TScriptInterface<class IBPI_PTFlagInterface>* AsBPI_PTFlag_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyFlagInterface");

	Params::BattleCamActorFactory_C_GetPartyFlagInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTFlag_Interface != nullptr)
		*AsBPI_PTFlag_Interface = Parms.AsBPI_PTFlag_Interface;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyUtilInterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTUtilInterface>AsBPI_PTUtil_Interface                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetPartyUtilInterface(TScriptInterface<class IBPI_PTUtilInterface>* AsBPI_PTUtil_Interface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyUtilInterface");

	Params::BattleCamActorFactory_C_GetPartyUtilInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTUtil_Interface != nullptr)
		*AsBPI_PTUtil_Interface = Parms.AsBPI_PTUtil_Interface;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetPartyUnitIniterface
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_PTBPInterface_C>AsBPI_PTBPInterface                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetPartyUnitIniterface(TScriptInterface<class IBPI_PTBPInterface_C>* AsBPI_PTBPInterface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetPartyUnitIniterface");

	Params::BattleCamActorFactory_C_GetPartyUnitIniterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBPI_PTBPInterface != nullptr)
		*AsBPI_PTBPInterface = Parms.AsBPI_PTBPInterface;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.InvestigateSideMaxSizeFloat
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsPlayerSide                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::InvestigateSideMaxSizeFloat(bool IsPlayerSide, float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "InvestigateSideMaxSizeFloat");

	Params::BattleCamActorFactory_C_InvestigateSideMaxSizeFloat Parms{};

	Parms.IsPlayerSide = IsPlayerSide;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ConsiderSkillCameraRotation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActorIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OriginTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// E_BTL_SKILL_CAM_TYPE                    BattleCamType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::ConsiderSkillCameraRotation(int32 TargetIndex, int32 ActorIndex, const struct FTransform& OriginTrans, E_BTL_SKILL_CAM_TYPE BattleCamType, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ConsiderSkillCameraRotation");

	Params::BattleCamActorFactory_C_ConsiderSkillCameraRotation Parms{};

	Parms.TargetIndex = TargetIndex;
	Parms.ActorIndex = ActorIndex;
	Parms.OriginTrans = std::move(OriginTrans);
	Parms.BattleCamType = BattleCamType;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetSelectedTargetLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetSelectedTargetLocation(class FName SocketName, struct FVector* Location, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetSelectedTargetLocation");

	Params::BattleCamActorFactory_C_GetSelectedTargetLocation Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetUnitSocketLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharaBase_C*                     Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Locat                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetUnitSocketLocation(class ACharaBase_C* Target, class FName Socket, struct FVector* Locat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetUnitSocketLocation");

	Params::BattleCamActorFactory_C_GetUnitSocketLocation Parms{};

	Parms.Target = Target;
	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);

	if (Locat != nullptr)
		*Locat = std::move(Parms.Locat);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.EnableMotionBlur
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::EnableMotionBlur(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "EnableMotionBlur");

	Params::BattleCamActorFactory_C_EnableMotionBlur Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.SetCommandCamInfo
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CommandTargetParty                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::SetCommandCamInfo(int32 CommandTargetParty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "SetCommandCamInfo");

	Params::BattleCamActorFactory_C_SetCommandCamInfo Parms{};

	Parms.CommandTargetParty = CommandTargetParty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ResetCommandCamInfo
// (Private, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::ResetCommandCamInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ResetCommandCamInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CountAliveEnemies
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Num                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CountAliveEnemies(int32* Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CountAliveEnemies");

	Params::BattleCamActorFactory_C_CountAliveEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Num != nullptr)
		*Num = Parms.Num;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcSkillCameraTrans
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActorPartyIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetPartyIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             RailOffsetOriginSocket                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReverseCamera                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ConsideredTrans                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_BTL_SKILL_CAM_TYPE                    CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBattleCamActorFactory_C::CalcSkillCameraTrans(int32 ActorPartyIndex, int32 TargetPartyIndex, class FName RailOffsetOriginSocket, bool IsReverseCamera, const struct FTransform& ConsideredTrans, const class FString& CameraName, E_BTL_SKILL_CAM_TYPE CamType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcSkillCameraTrans");

	Params::BattleCamActorFactory_C_CalcSkillCameraTrans Parms{};

	Parms.ActorPartyIndex = ActorPartyIndex;
	Parms.TargetPartyIndex = TargetPartyIndex;
	Parms.RailOffsetOriginSocket = RailOffsetOriginSocket;
	Parms.IsReverseCamera = IsReverseCamera;
	Parms.ConsideredTrans = std::move(ConsideredTrans);
	Parms.CameraName = std::move(CameraName);
	Parms.CamType = CamType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsRangeSkillCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           CameraName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBattleCamActorFactory_C::IsRangeSkillCamera(const class FString& CameraName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsRangeSkillCamera");

	Params::BattleCamActorFactory_C_IsRangeSkillCamera Parms{};

	Parms.CameraName = std::move(CameraName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcSkillCameraScaleReduction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       ConsideredTrans                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReductionScale                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcSkillCameraScaleReduction(const struct FTransform& ConsideredTrans, float Range, float* ReductionScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcSkillCameraScaleReduction");

	Params::BattleCamActorFactory_C_CalcSkillCameraScaleReduction Parms{};

	Parms.ConsideredTrans = std::move(ConsideredTrans);
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (ReductionScale != nullptr)
		*ReductionScale = Parms.ReductionScale;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RetrieveRigRailData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRigRailData                     RigRailData                                            (Parm, OutParm, HasGetValueTypeHash)

void UBattleCamActorFactory_C::RetrieveRigRailData(class FName RowName, bool* IsValid, struct FRigRailData* RigRailData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RetrieveRigRailData");

	Params::BattleCamActorFactory_C_RetrieveRigRailData Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (RigRailData != nullptr)
		*RigRailData = std::move(Parms.RigRailData);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcUnitSocketLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsForCommandCam                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsUseHomeTrans                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Root                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SocketLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CalcUnitSocketLocation(int32 PartyIndex, class FName SocketName, bool IsForCommandCam, bool IsUseHomeTrans, struct FVector* Root, struct FVector* SocketLocation, struct FRotator* Rotate, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcUnitSocketLocation");

	Params::BattleCamActorFactory_C_CalcUnitSocketLocation Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.SocketName = SocketName;
	Parms.IsForCommandCam = IsForCommandCam;
	Parms.IsUseHomeTrans = IsUseHomeTrans;

	UObject::ProcessEvent(Func, &Parms);

	if (Root != nullptr)
		*Root = std::move(Parms.Root);

	if (SocketLocation != nullptr)
		*SocketLocation = std::move(Parms.SocketLocation);

	if (Rotate != nullptr)
		*Rotate = std::move(Parms.Rotate);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetCommandCamLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharaBase_C*                     Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Locat                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetCommandCamLocation(class ACharaBase_C* Target, class FName Socket, int32 PartyIndex, struct FVector* Locat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetCommandCamLocation");

	Params::BattleCamActorFactory_C_GetCommandCamLocation Parms{};

	Parms.Target = Target;
	Parms.Socket = Socket;
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Locat != nullptr)
		*Locat = std::move(Parms.Locat);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcCommandYowRotation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharaBase_C*                     TargetChara                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InfoFovy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RailOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FName                             OriginSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRecalcRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImmidiateYaw                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AfterYaw                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcCommandYowRotation(class ACharaBase_C* TargetChara, float InfoFovy, const struct FTransform& RailOffset, class FName OriginSocket, bool IsRecalcRotation, int32 PartyIndex, const struct FVector& LookOffset, float* ImmidiateYaw, float* AfterYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcCommandYowRotation");

	Params::BattleCamActorFactory_C_CalcCommandYowRotation Parms{};

	Parms.TargetChara = TargetChara;
	Parms.InfoFovy = InfoFovy;
	Parms.RailOffset = std::move(RailOffset);
	Parms.OriginSocket = OriginSocket;
	Parms.IsRecalcRotation = IsRecalcRotation;
	Parms.PartyIndex = PartyIndex;
	Parms.LookOffset = std::move(LookOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (ImmidiateYaw != nullptr)
		*ImmidiateYaw = Parms.ImmidiateYaw;

	if (AfterYaw != nullptr)
		*AfterYaw = Parms.AfterYaw;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CheckCreateCommandCam
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CommandTargetParty                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    HaveToDo                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CheckCreateCommandCam(int32 CommandTargetParty, const class FString& Category, bool* HaveToDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CheckCreateCommandCam");

	Params::BattleCamActorFactory_C_CheckCreateCommandCam Parms{};

	Parms.CommandTargetParty = CommandTargetParty;
	Parms.Category = std::move(Category);

	UObject::ProcessEvent(Func, &Parms);

	if (HaveToDo != nullptr)
		*HaveToDo = Parms.HaveToDo;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcCommandPitchRotation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharaBase_C*                     TargetChara                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InfoFovy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RailOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FName                             OriginSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRecalcRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImmidiatePitch                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AfterPitch                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcCommandPitchRotation(bool Enable, class ACharaBase_C* TargetChara, float InfoFovy, const struct FTransform& RailOffset, class FName OriginSocket, bool IsRecalcRotation, int32 PartyIndex, const struct FVector& LookOffset, float* ImmidiatePitch, float* AfterPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcCommandPitchRotation");

	Params::BattleCamActorFactory_C_CalcCommandPitchRotation Parms{};

	Parms.Enable = Enable;
	Parms.TargetChara = TargetChara;
	Parms.InfoFovy = InfoFovy;
	Parms.RailOffset = std::move(RailOffset);
	Parms.OriginSocket = OriginSocket;
	Parms.IsRecalcRotation = IsRecalcRotation;
	Parms.PartyIndex = PartyIndex;
	Parms.LookOffset = std::move(LookOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (ImmidiatePitch != nullptr)
		*ImmidiatePitch = Parms.ImmidiatePitch;

	if (AfterPitch != nullptr)
		*AfterPitch = Parms.AfterPitch;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetCommandBoxTrans
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Trans                                                  (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::GetCommandBoxTrans(struct FTransform* Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetCommandBoxTrans");

	Params::BattleCamActorFactory_C_GetCommandBoxTrans Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Trans != nullptr)
		*Trans = std::move(Parms.Trans);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsOverrideCommandCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsOverride                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsOverrideCommandCamera(bool* IsOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsOverrideCommandCamera");

	Params::BattleCamActorFactory_C_IsOverrideCommandCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOverride != nullptr)
		*IsOverride = Parms.IsOverride;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.IsSelectingTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsSelecting                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::IsSelectingTarget(bool* IsSelecting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "IsSelectingTarget");

	Params::BattleCamActorFactory_C_IsSelectingTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSelecting != nullptr)
		*IsSelecting = Parms.IsSelecting;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetUnitAveLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_SIDE                              Side                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetUnitAveLocation(E_BTL_SIDE Side, class FName SocketName, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetUnitAveLocation");

	Params::BattleCamActorFactory_C_GetUnitAveLocation Parms{};

	Parms.Side = Side;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.ResetUnitAveLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::ResetUnitAveLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "ResetUnitAveLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcCameraStartVec
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  Rail                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReversed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBattleCamActorFactory_C::CalcCameraStartVec(int32 PartyIndex, class ABP_RailActor_C*& Rail, bool IsReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcCameraStartVec");

	Params::BattleCamActorFactory_C_CalcCameraStartVec Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.Rail = Rail;
	Parms.IsReversed = IsReversed;

	UObject::ProcessEvent(Func, &Parms);

	Rail = Parms.Rail;

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcCameraLastVec
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  Rail                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReversed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBattleCamActorFactory_C::CalcCameraLastVec(int32 PartyIndex, class ABP_RailActor_C*& Rail, bool IsReversed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcCameraLastVec");

	Params::BattleCamActorFactory_C_CalcCameraLastVec Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.Rail = Rail;
	Parms.IsReversed = IsReversed;

	UObject::ProcessEvent(Func, &Parms);

	Rail = Parms.Rail;

	return Parms.ReturnValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CalcTargetRotation_SelfOne
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InfoFovy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RailTrans                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       RailOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class FName                             OriginSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRecalcRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookOffset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ImmidiateYaw                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AfterYaw                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pitch                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::CalcTargetRotation_SelfOne(float InfoFovy, const struct FTransform& RailTrans, const struct FTransform& RailOffset, class FName OriginSocket, bool IsRecalcRotation, int32 PartyIndex, const struct FVector& LookOffset, float* ImmidiateYaw, float* AfterYaw, float* Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CalcTargetRotation_SelfOne");

	Params::BattleCamActorFactory_C_CalcTargetRotation_SelfOne Parms{};

	Parms.InfoFovy = InfoFovy;
	Parms.RailTrans = std::move(RailTrans);
	Parms.RailOffset = std::move(RailOffset);
	Parms.OriginSocket = OriginSocket;
	Parms.IsRecalcRotation = IsRecalcRotation;
	Parms.PartyIndex = PartyIndex;
	Parms.LookOffset = std::move(LookOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (ImmidiateYaw != nullptr)
		*ImmidiateYaw = Parms.ImmidiateYaw;

	if (AfterYaw != nullptr)
		*AfterYaw = Parms.AfterYaw;

	if (Pitch != nullptr)
		*Pitch = Parms.Pitch;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetHeroIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetHeroIndex(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetHeroIndex");

	Params::BattleCamActorFactory_C_GetHeroIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.FaceUpDitherSetting
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFaceUpCam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::FaceUpDitherSetting(bool IsFaceUpCam, int32 PartyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "FaceUpDitherSetting");

	Params::BattleCamActorFactory_C_FaceUpDitherSetting Parms{};

	Parms.IsFaceUpCam = IsFaceUpCam;
	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.CheckCurrentCameraName
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Wildcard                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsInclude                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::CheckCurrentCameraName(const class FString& Wildcard, bool* IsInclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "CheckCurrentCameraName");

	Params::BattleCamActorFactory_C_CheckCurrentCameraName Parms{};

	Parms.Wildcard = std::move(Wildcard);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInclude != nullptr)
		*IsInclude = Parms.IsInclude;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.GetRelativeCameraScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHugeBattle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::GetRelativeCameraScale(int32 PartyIndex, bool IsHugeBattle, float* RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "GetRelativeCameraScale");

	Params::BattleCamActorFactory_C_GetRelativeCameraScale Parms{};

	Parms.PartyIndex = PartyIndex;
	Parms.IsHugeBattle = IsHugeBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (RetVal != nullptr)
		*RetVal = Parms.RetVal;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.RegisterAnimCam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleAnimationCamera_C*         AnimCam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::RegisterAnimCam(class ABattleAnimationCamera_C* AnimCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "RegisterAnimCam");

	Params::BattleCamActorFactory_C_RegisterAnimCam Parms{};

	Parms.AnimCam = AnimCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.UnRegisterAnimCam
// (Public, BlueprintCallable, BlueprintEvent)

void UBattleCamActorFactory_C::UnRegisterAnimCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "UnRegisterAnimCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.Spawn_TiamatHead
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PartyIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::Spawn_TiamatHead(int32 PartyIndex, class ABP_RailActor_C** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "Spawn_TiamatHead");

	Params::BattleCamActorFactory_C_Spawn_TiamatHead Parms{};

	Parms.PartyIndex = PartyIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_SpawnRailActorPrevBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTL_CAM_TYPE                          CamType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OriginTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>UnitList                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               UnitTrans                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           DevIDOptoin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  RetVal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::BI_SpawnRailActorPrevBattle(E_BTL_CAM_TYPE CamType, const struct FTransform& OriginTransform, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& UnitList, TArray<struct FTransform>& UnitTrans, const class FString& DevIDOptoin, class ABP_RailActor_C** RetVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_SpawnRailActorPrevBattle");

	Params::BattleCamActorFactory_C_BI_SpawnRailActorPrevBattle Parms{};

	Parms.CamType = CamType;
	Parms.OriginTransform = std::move(OriginTransform);
	Parms.UnitList = std::move(UnitList);
	Parms.UnitTrans = std::move(UnitTrans);
	Parms.DevIDOptoin = std::move(DevIDOptoin);

	UObject::ProcessEvent(Func, &Parms);

	UnitList = std::move(Parms.UnitList);
	UnitTrans = std::move(Parms.UnitTrans);

	if (RetVal != nullptr)
		*RetVal = Parms.RetVal;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_GetCurrentCameraSideType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CAMERA_SIDE_BF_TYPE                   BF_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CAMERA_SIDE_LR_TYPE                   LR_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBattleCamActorFactory_C::BI_GetCurrentCameraSideType(E_CAMERA_SIDE_BF_TYPE* BF_Type, E_CAMERA_SIDE_LR_TYPE* LR_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_GetCurrentCameraSideType");

	Params::BattleCamActorFactory_C_BI_GetCurrentCameraSideType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BF_Type != nullptr)
		*BF_Type = Parms.BF_Type;

	if (LR_Type != nullptr)
		*LR_Type = Parms.LR_Type;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_ToOuterCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleCamera_C*                  Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RailActor_C*                  Rail                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>TargetUnits                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               TargetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsBossRoom                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_ToOuterCamera(class ABattleCamera_C* Camera, class ABP_RailActor_C* Rail, TArray<TScriptInterface<class IBPI_CharaBaseAccessor_C>>& TargetUnits, TArray<struct FTransform>& TargetPos, bool IsBossRoom, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_ToOuterCamera");

	Params::BattleCamActorFactory_C_BI_ToOuterCamera Parms{};

	Parms.Camera = Camera;
	Parms.Rail = Rail;
	Parms.TargetUnits = std::move(TargetUnits);
	Parms.TargetPos = std::move(TargetPos);
	Parms.IsBossRoom = IsBossRoom;

	UObject::ProcessEvent(Func, &Parms);

	TargetUnits = std::move(Parms.TargetUnits);
	TargetPos = std::move(Parms.TargetPos);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_RetrieveGlobalSocketLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CamCategoryName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GlobalLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_RetrieveGlobalSocketLocation(class FName CamCategoryName, class FName SocketName, struct FVector* GlobalLocation, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_RetrieveGlobalSocketLocation");

	Params::BattleCamActorFactory_C_BI_RetrieveGlobalSocketLocation Parms{};

	Parms.CamCategoryName = CamCategoryName;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (GlobalLocation != nullptr)
		*GlobalLocation = std::move(Parms.GlobalLocation);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_ResetCommandCamInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_ResetCommandCamInfo(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_ResetCommandCamInfo");

	Params::BattleCamActorFactory_C_BI_ResetCommandCamInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_SetRailName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_SetRailName(const class FString& Param_Name, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_SetRailName");

	Params::BattleCamActorFactory_C_BI_SetRailName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_RegisterAnimCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABattleAnimationCamera_C*         AnimCam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_RegisterAnimCam(class ABattleAnimationCamera_C* AnimCam, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_RegisterAnimCam");

	Params::BattleCamActorFactory_C_BI_RegisterAnimCam Parms{};

	Parms.AnimCam = AnimCam;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_UnregisterAnimCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_UnregisterAnimCam(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_UnregisterAnimCam");

	Params::BattleCamActorFactory_C_BI_UnregisterAnimCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleCamActorFactory.BattleCamActorFactory_C.BI_DestroyCurrentActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBattleCamActorFactory_C::BI_DestroyCurrentActor(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCamActorFactory_C", "BI_DestroyCurrentActor");

	Params::BattleCamActorFactory_C_BI_DestroyCurrentActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

