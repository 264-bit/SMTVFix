#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_LocationWinCtrl

#include "Basic.hpp"

#include "BPI_LocationWinCtrl_classes.hpp"
#include "BPI_LocationWinCtrl_parameters.hpp"


namespace SDK
{

// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.Open
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LOCATION_WINDOW_TYPE                  InType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LocationWinCtrl_C::Open(E_LOCATION_WINDOW_TYPE InType, bool PlayAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "Open");

	Params::BPI_LocationWinCtrl_C_Open Parms{};

	Parms.InType = InType;
	Parms.PlayAnim = PlayAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.Close
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_LocationWinCtrl_C::Close(bool PlayAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "Close");

	Params::BPI_LocationWinCtrl_C_Close Parms{};

	Parms.PlayAnim = PlayAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setFacilityName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InName                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_LocationWinCtrl_C::BPI_setFacilityName(const class FText& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setFacilityName");

	Params::BPI_LocationWinCtrl_C_BPI_setFacilityName Parms{};

	Parms.InName = std::move(InName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_getCurrentName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             OutText                                                (Parm, OutParm)

void IBPI_LocationWinCtrl_C::BPI_getCurrentName(class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_getCurrentName");

	Params::BPI_LocationWinCtrl_C_BPI_getCurrentName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setTokyoLargeMapPlaceName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InName                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_LocationWinCtrl_C::BPI_setTokyoLargeMapPlaceName(const class FText& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setTokyoLargeMapPlaceName");

	Params::BPI_LocationWinCtrl_C_BPI_setTokyoLargeMapPlaceName Parms{};

	Parms.InName = std::move(InName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setOtherColor
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_LocationWinCtrl_C::BPI_setOtherColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setOtherColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setNormalColor
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_LocationWinCtrl_C::BPI_setNormalColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setNormalColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setMapName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InName                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_LocationWinCtrl_C::BPI_setMapName(const class FText& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setMapName");

	Params::BPI_LocationWinCtrl_C_BPI_setMapName Parms{};

	Parms.InName = std::move(InName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_setAutomapName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InName                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_LocationWinCtrl_C::BPI_setAutomapName(const class FText& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_setAutomapName");

	Params::BPI_LocationWinCtrl_C_BPI_setAutomapName Parms{};

	Parms.InName = std::move(InName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_LocationWinCtrl.BPI_LocationWinCtrl_C.BPI_getState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_LOCATION_WINDOW_STATE                 State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LocationWinCtrl_C::BPI_getState(E_LOCATION_WINDOW_STATE* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_LocationWinCtrl_C", "BPI_getState");

	Params::BPI_LocationWinCtrl_C_BPI_getState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = Parms.State;
}

}

