#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Player_AnimBP

#include "Basic.hpp"

#include "BPI_Player_AnimBP_classes.hpp"
#include "BPI_Player_AnimBP_parameters.hpp"


namespace SDK
{

// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementVelocity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          IdealVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetMovementVelocity(const struct FVector& IdealVelocity, const struct FVector& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetMovementVelocity");

	Params::BPI_Player_AnimBP_C_SetMovementVelocity Parms{};

	Parms.IdealVelocity = std::move(IdealVelocity);
	Parms.Input = std::move(Input);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         MomentRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         SlopeRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Player_AnimBP_C::SetMovementRotation(const struct FRotator& MomentRotation, const struct FRotator& SlopeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetMovementRotation");

	Params::BPI_Player_AnimBP_C_SetMovementRotation Parms{};

	Parms.MomentRotation = std::move(MomentRotation);
	Parms.SlopeRotation = std::move(SlopeRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MOVEMENT_STATE                 State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetMovementState(E_PLAYER_MOVEMENT_STATE State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetMovementState");

	Params::BPI_Player_AnimBP_C_SetMovementState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetMovementTurnState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetMovementTurnState(bool State, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetMovementTurnState");

	Params::BPI_Player_AnimBP_C_SetMovementTurnState Parms{};

	Parms.State = State;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionVal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetEventMotionVal(const struct FVector2D& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetEventMotionVal");

	Params::BPI_Player_AnimBP_C_SetEventMotionVal Parms{};

	Parms.Input = std::move(Input);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionTap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TapFlag                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Player_AnimBP_C::SetEventMotionTap(bool TapFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetEventMotionTap");

	Params::BPI_Player_AnimBP_C_SetEventMotionTap Parms{};

	Parms.TapFlag = TapFlag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetEventMotionSpace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBlendSpace*                      BlendSpace                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetEventMotionSpace(class UBlendSpace* BlendSpace, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetEventMotionSpace");

	Params::BPI_Player_AnimBP_C_SetEventMotionSpace Parms{};

	Parms.BlendSpace = BlendSpace;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.TriggerLanding
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   JumpHeight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::TriggerLanding(float JumpHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "TriggerLanding");

	Params::BPI_Player_AnimBP_C_TriggerLanding Parms{};

	Parms.JumpHeight = JumpHeight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.MapAttackTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::MapAttackTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "MapAttackTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.MapAttackEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::MapAttackEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "MapAttackEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetSwordOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSwordOpen                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Player_AnimBP_C::SetSwordOpen(bool bSwordOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetSwordOpen");

	Params::BPI_Player_AnimBP_C_SetSwordOpen Parms{};

	Parms.bSwordOpen = bSwordOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.MapAttackReTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::MapAttackReTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "MapAttackReTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.MapDamageTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::MapDamageTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "MapDamageTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.MapDamageEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::MapDamageEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "MapDamageEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.TriggerJumping
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::TriggerJumping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "TriggerJumping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.ImmediateFallTrigger
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Player_AnimBP_C::ImmediateFallTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "ImmediateFallTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Player_AnimBP.BPI_Player_AnimBP_C.SetRunMotionRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RunRate                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Player_AnimBP_C::SetRunMotionRate(float RunRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Player_AnimBP_C", "SetRunMotionRate");

	Params::BPI_Player_AnimBP_C_SetRunMotionRate Parms{};

	Parms.RunRate = RunRate;

	UObject::ProcessEvent(Func, &Parms);
}

}

