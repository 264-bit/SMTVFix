#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_KeyboardIcon

#include "Basic.hpp"

#include "BPI_KeyboardIcon_classes.hpp"
#include "BPI_KeyboardIcon_parameters.hpp"


namespace SDK
{

// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_SetIconSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BTN_ICON_SIZE                         InIconSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_SetIconSize(E_BTN_ICON_SIZE InIconSize, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_SetIconSize");

	Params::BPI_KeyboardIcon_C_BPI_SetIconSize Parms{};

	Parms.InIconSize = InIconSize;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_SetKeyInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             InKeyInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_SetKeyInfo(const struct FKey& InKeyInfo, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_SetKeyInfo");

	Params::BPI_KeyboardIcon_C_BPI_SetKeyInfo Parms{};

	Parms.InKeyInfo = std::move(InKeyInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_SetIconColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     InColor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_SetIconColor(const struct FLinearColor& InColor, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_SetIconColor");

	Params::BPI_KeyboardIcon_C_BPI_SetIconColor Parms{};

	Parms.InColor = std::move(InColor);

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_SetIconColor_ByActiveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InActiveColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_SetIconColor_ByActiveState(bool InActiveColor, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_SetIconColor_ByActiveState");

	Params::BPI_KeyboardIcon_C_BPI_SetIconColor_ByActiveState Parms{};

	Parms.InActiveColor = InActiveColor;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_GetKeyText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             KeyboardText                                           (Parm, OutParm)

void IBPI_KeyboardIcon_C::BPI_GetKeyText(class FText* KeyboardText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_GetKeyText");

	Params::BPI_KeyboardIcon_C_BPI_GetKeyText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KeyboardText != nullptr)
		*KeyboardText = std::move(Parms.KeyboardText);
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_GetKeyTextFont
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateFontInfo                   Font                                                   (Parm, OutParm, HasGetValueTypeHash)

void IBPI_KeyboardIcon_C::BPI_GetKeyTextFont(struct FSlateFontInfo* Font)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_GetKeyTextFont");

	Params::BPI_KeyboardIcon_C_BPI_GetKeyTextFont Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Font != nullptr)
		*Font = std::move(Parms.Font);
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_GetSsPlayerFrame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AnimFrame                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_KeyboardIcon_C::BPI_GetSsPlayerFrame(int32* AnimFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_GetSsPlayerFrame");

	Params::BPI_KeyboardIcon_C_BPI_GetSsPlayerFrame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimFrame != nullptr)
		*AnimFrame = Parms.AnimFrame;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_IsExternalFontIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsExternalFont                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_IsExternalFontIcon(bool* IsExternalFont)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_IsExternalFontIcon");

	Params::BPI_KeyboardIcon_C_BPI_IsExternalFontIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsExternalFont != nullptr)
		*IsExternalFont = Parms.IsExternalFont;
}


// Function BPI_KeyboardIcon.BPI_KeyboardIcon_C.BPI_UpdateParts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_KeyboardIcon_C::BPI_UpdateParts(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_KeyboardIcon_C", "BPI_UpdateParts");

	Params::BPI_KeyboardIcon_C_BPI_UpdateParts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}

}

