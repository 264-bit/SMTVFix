#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerInhaleCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerInhaleCtrl.BP_PlayerInhaleCtrl_C
// 0x0050 (0x0270 - 0x0220)
class ABP_PlayerInhaleCtrl_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 Meshs;                                             // 0x0230(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           Sockets;                                           // 0x0240(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 Forces;                                            // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Force;                                             // 0x0260(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerInhaleCtrl(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void AddInhaleMesh(const class UMeshComponent*& Mesh, const class FName Socket);
	void RemoveInhaleMesh(class UObject* Mesh);
	void SetInhaleForce(const class UMeshComponent*& Mesh, const float Param_Force);
	void GetInhaleVector(struct FVector* Param_Force);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerInhaleCtrl_C">();
	}
	static class ABP_PlayerInhaleCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerInhaleCtrl_C>();
	}
};
static_assert(alignof(ABP_PlayerInhaleCtrl_C) == 0x000008, "Wrong alignment on ABP_PlayerInhaleCtrl_C");
static_assert(sizeof(ABP_PlayerInhaleCtrl_C) == 0x000270, "Wrong size on ABP_PlayerInhaleCtrl_C");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, UberGraphFrame) == 0x000220, "Member 'ABP_PlayerInhaleCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_PlayerInhaleCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, Meshs) == 0x000230, "Member 'ABP_PlayerInhaleCtrl_C::Meshs' has a wrong offset!");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, Sockets) == 0x000240, "Member 'ABP_PlayerInhaleCtrl_C::Sockets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, Forces) == 0x000250, "Member 'ABP_PlayerInhaleCtrl_C::Forces' has a wrong offset!");
static_assert(offsetof(ABP_PlayerInhaleCtrl_C, Force) == 0x000260, "Member 'ABP_PlayerInhaleCtrl_C::Force' has a wrong offset!");

}

