#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CategoryWindowCtrl

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Project_structs.hpp"
#include "Project_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CategoryWindowCtrl.BP_CategoryWindowCtrl_C
// 0x0018 (0x0238 - 0x0220)
class ABP_CategoryWindowCtrl_C final : public ACategoryWindowBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWB_CategoryWindow_C*                   M_CategoryWindow;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CategoryWindowCtrl(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BindMouseEvent();
	void UnbindMouseEvent();
	void OnClickedByMouse_CategoryIcon(int32 InCategoryIdx);
	void OnClickedByMouse_SlideL();
	void OnClickedByMouse_SlideR();
	void GetCategoryWindowState(E_CATEGORY_UI_STATE* State);
	void CloseCategoryWindow(bool IsSkipAnim, bool* ReturnVal);
	void OpenCategoryWindow(E_WIDGET_PRIO WidgetPrio, E_CATEGORY_PATTERN CategoryPattern, E_CATEGORY_FRAMEIN_TYPE FrameInPattern, int32 DefaultCursorIdx, bool IsSkipAnim, bool* ReturnVal);
	void MoveCategoryCursor(E_CATEGORY_CURSOR_MOVE_DIRECTION MoveDirection, bool* ReturnVal);
	void SetPosition(const struct FVector2D& Position, bool* ReturnVal);
	void GetCursorIndex(int32* CursorIndex);
	void SetCursorIndex(int32 CursorIndex, bool* ReturnVal);
	void SetNewIconVisibility(int32 CursorIdx, bool IsVisible, bool* ReturnVal);
	void AlignNewIconAnim(float Frame, bool* ReturnVal);
	void GetNewIconAnimFrame(float* Frame);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CategoryWindowCtrl_C">();
	}
	static class ABP_CategoryWindowCtrl_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CategoryWindowCtrl_C>();
	}
};
static_assert(alignof(ABP_CategoryWindowCtrl_C) == 0x000008, "Wrong alignment on ABP_CategoryWindowCtrl_C");
static_assert(sizeof(ABP_CategoryWindowCtrl_C) == 0x000238, "Wrong size on ABP_CategoryWindowCtrl_C");
static_assert(offsetof(ABP_CategoryWindowCtrl_C, UberGraphFrame) == 0x000220, "Member 'ABP_CategoryWindowCtrl_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CategoryWindowCtrl_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_CategoryWindowCtrl_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CategoryWindowCtrl_C, M_CategoryWindow) == 0x000230, "Member 'ABP_CategoryWindowCtrl_C::M_CategoryWindow' has a wrong offset!");

}

