#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharaSlopeAdapterComponent

#include "Basic.hpp"

#include "CharaSlopeAdapterComponent_classes.hpp"
#include "CharaSlopeAdapterComponent_parameters.hpp"


namespace SDK
{

// Function CharaSlopeAdapterComponent.CharaSlopeAdapterComponent_C.Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IKEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          GazePoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GazePointEnable                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCharaSlopeAdapterComponent_C::Update(float DeltaTime, class USkinnedMeshComponent* Mesh, bool IKEnable, const struct FVector& GazePoint, bool GazePointEnable, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaSlopeAdapterComponent_C", "Update");

	Params::CharaSlopeAdapterComponent_C_Update Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Mesh = Mesh;
	Parms.IKEnable = IKEnable;
	Parms.GazePoint = std::move(GazePoint);
	Parms.GazePointEnable = GazePointEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function CharaSlopeAdapterComponent.CharaSlopeAdapterComponent_C.ModifyRotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          GazePoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GazePointEnable                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ModifiedRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCharaSlopeAdapterComponent_C::ModifyRotation(const struct FRotator& Rotation, class USkinnedMeshComponent* Mesh, const struct FVector& GazePoint, bool GazePointEnable, struct FRotator* ModifiedRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaSlopeAdapterComponent_C", "ModifyRotation");

	Params::CharaSlopeAdapterComponent_C_ModifyRotation Parms{};

	Parms.Rotation = std::move(Rotation);
	Parms.Mesh = Mesh;
	Parms.GazePoint = std::move(GazePoint);
	Parms.GazePointEnable = GazePointEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (ModifiedRotation != nullptr)
		*ModifiedRotation = std::move(Parms.ModifiedRotation);
}


// Function CharaSlopeAdapterComponent.CharaSlopeAdapterComponent_C.TestSink
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SinkLimit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Debug                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   SinkMin                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SinkMax                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharaSlopeAdapterComponent_C::TestSink(class USkinnedMeshComponent* Mesh, float SinkLimit, bool Param_Debug, float* SinkMin, float* SinkMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaSlopeAdapterComponent_C", "TestSink");

	Params::CharaSlopeAdapterComponent_C_TestSink Parms{};

	Parms.Mesh = Mesh;
	Parms.SinkLimit = SinkLimit;
	Parms.Param_Debug = Param_Debug;

	UObject::ProcessEvent(Func, &Parms);

	if (SinkMin != nullptr)
		*SinkMin = Parms.SinkMin;

	if (SinkMax != nullptr)
		*SinkMax = Parms.SinkMax;
}


// Function CharaSlopeAdapterComponent.CharaSlopeAdapterComponent_C.MakeRotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkinnedMeshComponent*            Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalBefore                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalAfter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreAngleLimit                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UCharaSlopeAdapterComponent_C::MakeRotation(class USkinnedMeshComponent* Mesh, const struct FVector& NormalBefore, const struct FVector& NormalAfter, bool IgnoreAngleLimit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharaSlopeAdapterComponent_C", "MakeRotation");

	Params::CharaSlopeAdapterComponent_C_MakeRotation Parms{};

	Parms.Mesh = Mesh;
	Parms.NormalBefore = std::move(NormalBefore);
	Parms.NormalAfter = std::move(NormalAfter);
	Parms.IgnoreAngleLimit = IgnoreAngleLimit;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

