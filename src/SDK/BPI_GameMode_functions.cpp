#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameMode

#include "Basic.hpp"

#include "BPI_GameMode_classes.hpp"
#include "BPI_GameMode_parameters.hpp"


namespace SDK
{

// Function BPI_GameMode.BPI_GameMode_C.SetDaathAreaLock
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::SetDaathAreaLock(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "SetDaathAreaLock");

	Params::BPI_GameMode_C_SetDaathAreaLock Parms{};

	Parms.Lock = Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapStartLoad
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::MapStartLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapStartLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.MapAllResidentDelete
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextMap                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextArea                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapAllResidentDelete(int32 NextMap, int32 NextArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapAllResidentDelete");

	Params::BPI_GameMode_C_MapAllResidentDelete Parms{};

	Parms.NextMap = NextMap;
	Parms.NextArea = NextArea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapAreaLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::MapAreaLoad(int32 Map, int32 Area, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapAreaLoad");

	Params::BPI_GameMode_C_MapAreaLoad Parms{};

	Parms.Map = Map;
	Parms.Area = Area;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapAreaView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapAreaView(int32 Map, int32 Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapAreaView");

	Params::BPI_GameMode_C_MapAreaView Parms{};

	Parms.Map = Map;
	Parms.Area = Area;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapAreaUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapAreaUnload(int32 Map, int32 Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapAreaUnload");

	Params::BPI_GameMode_C_MapAreaUnload Parms{};

	Parms.Map = Map;
	Parms.Area = Area;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsLoadMapArea(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsLoadMapArea");

	Params::BPI_GameMode_C_IsLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::MapUnResidentLoad(int32 MapId, int32 AreaId, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapUnResidentLoad");

	Params::BPI_GameMode_C_MapUnResidentLoad Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapUnResidentView(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapUnResidentView");

	Params::BPI_GameMode_C_MapUnResidentView Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapUnResidentUnLoad(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapUnResidentUnLoad");

	Params::BPI_GameMode_C_MapUnResidentUnLoad Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsLoadMapUnResident
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsLoadMapUnResident(int32 MapId, bool* LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsLoadMapUnResident");

	Params::BPI_GameMode_C_IsLoadMapUnResident Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);

	if (LoadAfterView != nullptr)
		*LoadAfterView = Parms.LoadAfterView;
}


// Function BPI_GameMode.BPI_GameMode_C.StartNextMapBGLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::StartNextMapBGLoad(int32 MapId, int32 AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "StartNextMapBGLoad");

	Params::BPI_GameMode_C_StartNextMapBGLoad Parms{};

	Parms.MapId = MapId;
	Parms.AreaId = AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapOpenLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Old_mapID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Old_AreaID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_MapID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_AreaId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapOpenLevel(int32 Old_mapID, int32 Old_AreaID, int32 New_MapID, int32 New_AreaId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapOpenLevel");

	Params::BPI_GameMode_C_MapOpenLevel Parms{};

	Parms.Old_mapID = Old_mapID;
	Parms.Old_AreaID = Old_AreaID;
	Parms.New_MapID = New_MapID;
	Parms.New_AreaId = New_AreaId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapInitEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::MapInitEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapInitEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystemBKLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystemBKLoad");

	Params::BPI_GameMode_C_MapSystemBKLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystemBKUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystemBKUnLoad");

	Params::BPI_GameMode_C_MapSystemBKUnLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKView
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystemBKView(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystemBKView");

	Params::BPI_GameMode_C_MapSystemBKView Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemBKLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapSystemBKLoadEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapSystemBKLoadEnd");

	Params::BPI_GameMode_C_IsMapSystemBKLoadEnd Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.IsNextMapBGLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsNextMapBGLoadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsNextMapBGLoadEnd");

	Params::BPI_GameMode_C_IsNextMapBGLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.NextMapBGUnLoad
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::NextMapBGUnLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "NextMapBGUnLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystem_StreamOnlyUnLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystem_StreamOnlyUnLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystem_StreamOnlyUnLoad");

	Params::BPI_GameMode_C_MapSystem_StreamOnlyUnLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystem_StreamOnlyLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystem_StreamOnlyLoad(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystem_StreamOnlyLoad");

	Params::BPI_GameMode_C_MapSystem_StreamOnlyLoad Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.LevelChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPrimaryAssetId                  UnLoad                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPrimaryAssetId                  Load                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::LevelChange(const struct FPrimaryAssetId& UnLoad, const struct FPrimaryAssetId& Load)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "LevelChange");

	Params::BPI_GameMode_C_LevelChange Parms{};

	Parms.UnLoad = std::move(UnLoad);
	Parms.Load = std::move(Load);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemOnlyLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapSystemOnlyLoadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapSystemOnlyLoadEnd");

	Params::BPI_GameMode_C_IsMapSystemOnlyLoadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.IsUnLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsUnLoadMapArea(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsUnLoadMapArea");

	Params::BPI_GameMode_C_IsUnLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.IsBGLoadMapArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Emd                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsBGLoadMapArea(bool* Emd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsBGLoadMapArea");

	Params::BPI_GameMode_C_IsBGLoadMapArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Emd != nullptr)
		*Emd = Parms.Emd;
}


// Function BPI_GameMode.BPI_GameMode_C.InitFadeCancel
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::InitFadeCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "InitFadeCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.DaathSublevelManagerInit
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::DaathSublevelManagerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DaathSublevelManagerInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.DebugTraceStart
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::DebugTraceStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DebugTraceStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.DebugTraceStop
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::DebugTraceStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DebugTraceStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.DebugTraceView_Player
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::DebugTraceView_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DebugTraceView_Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.DebugTraceActivePos
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDebugTrace_St_Action            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::DebugTraceActivePos(const struct FDebugTrace_St_Action& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DebugTraceActivePos");

	Params::BPI_GameMode_C_DebugTraceActivePos Parms{};

	Parms.Action = std::move(Action);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.DebugTraceViewOFF
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::DebugTraceViewOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "DebugTraceViewOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.IsGameStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsGameStart(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsGameStart");

	Params::BPI_GameMode_C_IsGameStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function BPI_GameMode.BPI_GameMode_C.EndLoadUnResident
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::EndLoadUnResident()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "EndLoadUnResident");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemLevelLoadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapSystemLevelLoadEnd(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type, bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapSystemLevelLoadEnd");

	Params::BPI_GameMode_C_IsMapSystemLevelLoadEnd Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.SetMapEventPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapEventPlaying                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::SetMapEventPlaying(bool Param_IsMapEventPlaying, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "SetMapEventPlaying");

	Params::BPI_GameMode_C_SetMapEventPlaying Parms{};

	Parms.Param_IsMapEventPlaying = Param_IsMapEventPlaying;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapEventPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMapEventPlaying                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapEventPlaying(bool* Param_IsMapEventPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapEventPlaying");

	Params::BPI_GameMode_C_IsMapEventPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsMapEventPlaying != nullptr)
		*Param_IsMapEventPlaying = Parms.Param_IsMapEventPlaying;
}


// Function BPI_GameMode.BPI_GameMode_C.InitPause
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::InitPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "InitPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemUnloadEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapSystemUnloadEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapSystemUnloadEnd");

	Params::BPI_GameMode_C_IsMapSystemUnloadEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.ForceTraport
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameMode_C::ForceTraport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "ForceTraport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKHide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_MAP_SYSTEMRESIDENT_ID                 Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::MapSystemBKHide(int32 MapId, E_MAP_SYSTEMRESIDENT_ID Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapSystemBKHide");

	Params::BPI_GameMode_C_MapSystemBKHide Parms{};

	Parms.MapId = MapId;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemHideEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsMapSystemHideEnd(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsMapSystemHideEnd");

	Params::BPI_GameMode_C_IsMapSystemHideEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.MapAreaChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentAreaId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewAreaId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::MapAreaChange(int32 MapId, int32 CurrentAreaId, int32 NewAreaId, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "MapAreaChange");

	Params::BPI_GameMode_C_MapAreaChange Parms{};

	Parms.MapId = MapId;
	Parms.CurrentAreaId = CurrentAreaId;
	Parms.NewAreaId = NewAreaId;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsGardenLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsGardenLoaded(bool* End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsGardenLoaded");

	Params::BPI_GameMode_C_IsGardenLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (End != nullptr)
		*End = Parms.End;
}


// Function BPI_GameMode.BPI_GameMode_C.GetGardenWarpPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WarpPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::GetGardenWarpPoint(int32* WarpPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "GetGardenWarpPoint");

	Params::BPI_GameMode_C_GetGardenWarpPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WarpPoint != nullptr)
		*WarpPoint = Parms.WarpPoint;
}


// Function BPI_GameMode.BPI_GameMode_C.IsGardenOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsGardenOpen                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsGardenOpen(int32 MapId, bool* Param_IsGardenOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsGardenOpen");

	Params::BPI_GameMode_C_IsGardenOpen Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsGardenOpen != nullptr)
		*Param_IsGardenOpen = Parms.Param_IsGardenOpen;
}


// Function BPI_GameMode.BPI_GameMode_C.StartGardenLoad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WarpPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LoadAfterView                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::StartGardenLoad(int32 MapId, int32 WarpPoint, bool LoadAfterView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "StartGardenLoad");

	Params::BPI_GameMode_C_StartGardenLoad Parms{};

	Parms.MapId = MapId;
	Parms.WarpPoint = WarpPoint;
	Parms.LoadAfterView = LoadAfterView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.StartGardenUnload
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MapId                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameMode_C::StartGardenUnload(int32 MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "StartGardenUnload");

	Params::BPI_GameMode_C_StartGardenUnload Parms{};

	Parms.MapId = MapId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameMode.BPI_GameMode_C.IsInGardenLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsInGardenLevel                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::IsInGardenLevel(bool* Param_IsInGardenLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "IsInGardenLevel");

	Params::BPI_GameMode_C_IsInGardenLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsInGardenLevel != nullptr)
		*Param_IsInGardenLevel = Parms.Param_IsInGardenLevel;
}


// Function BPI_GameMode.BPI_GameMode_C.ApplyMissionMapBGM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GameMode_C::ApplyMissionMapBGM(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameMode_C", "ApplyMissionMapBGM");

	Params::BPI_GameMode_C_ApplyMissionMapBGM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}

}

