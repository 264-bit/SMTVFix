#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_EncountArea

#include "Basic.hpp"

#include "BPI_EncountArea_classes.hpp"
#include "BPI_EncountArea_parameters.hpp"


namespace SDK
{

// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountAreaBox
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       BoxPos                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)
// struct FVector                          BoxSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  AddPoints                                              (Parm, OutParm)

void IBPI_EncountArea_C::BPI_GetEncountAreaBox(struct FTransform* BoxPos, struct FVector* BoxSize, TArray<struct FVector>* AddPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetEncountAreaBox");

	Params::BPI_EncountArea_C_BPI_GetEncountAreaBox Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoxPos != nullptr)
		*BoxPos = std::move(Parms.BoxPos);

	if (BoxSize != nullptr)
		*BoxSize = std::move(Parms.BoxSize);

	if (AddPoints != nullptr)
		*AddPoints = std::move(Parms.AddPoints);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbol
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsManualPos                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       ManualPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SpawnSymbol(int32 Param_Index, bool IsManualPos, const struct FTransform& ManualPos, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SpawnSymbol");

	Params::BPI_EncountArea_C_BPI_SpawnSymbol Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsManualPos = IsManualPos;
	Parms.ManualPos = std::move(ManualPos);

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_DestroySymbol
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_DestroySymbol(class APawn* Pawn, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_DestroySymbol");

	Params::BPI_EncountArea_C_BPI_DestroySymbol Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_InComeArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AddHitSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_InComeArea(const struct FVector& Pos, float AddHitSize, bool* In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_InComeArea");

	Params::BPI_EncountArea_C_BPI_InComeArea Parms{};

	Parms.Pos = std::move(Pos);
	Parms.AddHitSize = AddHitSize;

	UObject::ProcessEvent(Func, &Parms);

	if (In != nullptr)
		*In = Parms.In;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckEncountAreaOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Overlap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckEncountAreaOverlap(bool* Overlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckEncountAreaOverlap");

	Params::BPI_EncountArea_C_BPI_CheckEncountAreaOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlap != nullptr)
		*Overlap = Parms.Overlap;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetSymbolSpline(class USplineComponent** Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetSymbolSpline");

	Params::BPI_EncountArea_C_BPI_GetSymbolSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spline != nullptr)
		*Spline = Parms.Spline;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ResetSymbolSpawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ResetSymbolSpawn(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ResetSymbolSpawn");

	Params::BPI_EncountArea_C_BPI_ResetSymbolSpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            IgnorePawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class APawn*>                    PawnList                                               (Parm, OutParm)

void IBPI_EncountArea_C::BPI_GetSymbolList(class APawn* IgnorePawn, TArray<class APawn*>* PawnList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetSymbolList");

	Params::BPI_EncountArea_C_BPI_GetSymbolList Parms{};

	Parms.IgnorePawn = IgnorePawn;

	UObject::ProcessEvent(Func, &Parms);

	if (PawnList != nullptr)
		*PawnList = std::move(Parms.PawnList);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_Discovery_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_Discovery_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_Discovery_FromOutside");

	Params::BPI_EncountArea_C_BPI_Discovery_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbol_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SpawnSymbol_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SpawnSymbol_FromOutside");

	Params::BPI_EncountArea_C_BPI_SpawnSymbol_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ReturnSymbol_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ReturnSymbol_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ReturnSymbol_FromOutside");

	Params::BPI_EncountArea_C_BPI_ReturnSymbol_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_RebornSymbol_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_RebornSymbol_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_RebornSymbol_FromOutside");

	Params::BPI_EncountArea_C_BPI_RebornSymbol_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_EncountBattleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            SymbolPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_EncountBattleStart(class APawn* SymbolPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_EncountBattleStart");

	Params::BPI_EncountArea_C_BPI_EncountBattleStart Parms{};

	Parms.SymbolPawn = SymbolPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SpawnSymbols
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SpawnSymbols(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SpawnSymbols");

	Params::BPI_EncountArea_C_BPI_SpawnSymbols Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GiveUpSymbol_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_GiveUpSymbol_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GiveUpSymbol_FromOutside");

	Params::BPI_EncountArea_C_BPI_GiveUpSymbol_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SummonSymbol
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SummonSymbol(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SummonSymbol");

	Params::BPI_EncountArea_C_BPI_SummonSymbol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSafeZoneID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ManualSafeZoneID                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SafeZoneID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetSafeZoneID(bool* ManualSafeZoneID, int32* SafeZoneID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetSafeZoneID");

	Params::BPI_EncountArea_C_BPI_GetSafeZoneID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ManualSafeZoneID != nullptr)
		*ManualSafeZoneID = Parms.ManualSafeZoneID;

	if (SafeZoneID != nullptr)
		*SafeZoneID = Parms.SafeZoneID;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountArea_RouteNodeList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FMapSymbolRouteNode>      NodeList                                               (Parm, OutParm)

void IBPI_EncountArea_C::BPI_GetEncountArea_RouteNodeList(TArray<struct FMapSymbolRouteNode>* NodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetEncountArea_RouteNodeList");

	Params::BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NodeList != nullptr)
		*NodeList = std::move(Parms.NodeList);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountArea_RouteNodeSpace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Space                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetEncountArea_RouteNodeSpace(float* Space)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetEncountArea_RouteNodeSpace");

	Params::BPI_EncountArea_C_BPI_GetEncountArea_RouteNodeSpace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Space != nullptr)
		*Space = Parms.Space;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetEncountComeAreaInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)
// struct FVector                          HitSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetEncountComeAreaInfo(struct FTransform* Transform, struct FVector* HitSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetEncountComeAreaInfo");

	Params::BPI_EncountArea_C_BPI_GetEncountComeAreaInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (HitSize != nullptr)
		*HitSize = std::move(Parms.HitSize);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_EncountArea_DestroySymbolAll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Respawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_EncountArea_DestroySymbolAll(bool Respawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_EncountArea_DestroySymbolAll");

	Params::BPI_EncountArea_C_BPI_EncountArea_DestroySymbolAll Parms{};

	Parms.Respawn = Respawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_EncountArea_ReSpawnSymbolAll
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_EncountArea_C::BPI_EncountArea_ReSpawnSymbolAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_EncountArea_ReSpawnSymbolAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckMagatsukaEncountArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Magatsuka                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckMagatsukaEncountArea(bool* Magatsuka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckMagatsukaEncountArea");

	Params::BPI_EncountArea_C_BPI_CheckMagatsukaEncountArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Magatsuka != nullptr)
		*Magatsuka = Parms.Magatsuka;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetDeadSaveID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeadSaveID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetDeadSaveID(int32* DeadSaveID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetDeadSaveID");

	Params::BPI_EncountArea_C_BPI_GetDeadSaveID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DeadSaveID != nullptr)
		*DeadSaveID = Parms.DeadSaveID;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ActSymbolWhenPause_FromOutside
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OutsideID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ActSymbolWhenPause_FromOutside(int32 OutsideID, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ActSymbolWhenPause_FromOutside");

	Params::BPI_EncountArea_C_BPI_ActSymbolWhenPause_FromOutside Parms{};

	Parms.OutsideID = OutsideID;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckViewSymbol
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    View                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckViewSymbol(bool* View)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckViewSymbol");

	Params::BPI_EncountArea_C_BPI_CheckViewSymbol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (View != nullptr)
		*View = Parms.View;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_Summon_ForRoomGuardian
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_EncountArea_C::BPI_Summon_ForRoomGuardian()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_Summon_ForRoomGuardian");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckAreaIN
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AreaIN                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckAreaIN(bool* AreaIN)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckAreaIN");

	Params::BPI_EncountArea_C_BPI_CheckAreaIN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AreaIN != nullptr)
		*AreaIN = Parms.AreaIN;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_InHitArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AddHitSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_InHitArea(const struct FVector& Pos, float AddHitSize, bool* In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_InHitArea");

	Params::BPI_EncountArea_C_BPI_InHitArea Parms{};

	Parms.Pos = std::move(Pos);
	Parms.AddHitSize = AddHitSize;

	UObject::ProcessEvent(Func, &Parms);

	if (In != nullptr)
		*In = Parms.In;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_NotOutHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NotOut                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_NotOutHit(bool* NotOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_NotOutHit");

	Params::BPI_EncountArea_C_BPI_NotOutHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NotOut != nullptr)
		*NotOut = Parms.NotOut;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ReturnSymbols
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ReturnSymbols(bool Effect, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ReturnSymbols");

	Params::BPI_EncountArea_C_BPI_ReturnSymbols Parms{};

	Parms.Effect = Effect;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_GetSymbolInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSpawnSymbolInfo                 SymbolInfo                                             (Parm, OutParm, HasGetValueTypeHash)

void IBPI_EncountArea_C::BPI_GetSymbolInfo(int32 Param_Index, struct FSpawnSymbolInfo* SymbolInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_GetSymbolInfo");

	Params::BPI_EncountArea_C_BPI_GetSymbolInfo Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (SymbolInfo != nullptr)
		*SymbolInfo = std::move(Parms.SymbolInfo);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckLastBattleArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Last                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckLastBattleArea(bool* Last)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckLastBattleArea");

	Params::BPI_EncountArea_C_BPI_CheckLastBattleArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Last != nullptr)
		*Last = Parms.Last;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ChangeReturnPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ChangeReturnPoint(int32 Param_Index, const struct FVector& ReturnPoint, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ChangeReturnPoint");

	Params::BPI_EncountArea_C_BPI_ChangeReturnPoint Parms{};

	Parms.Param_Index = Param_Index;
	Parms.ReturnPoint = std::move(ReturnPoint);

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckGiveupHitList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hit                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckGiveupHitList(bool* Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckGiveupHitList");

	Params::BPI_EncountArea_C_BPI_CheckGiveupHitList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hit != nullptr)
		*Hit = Parms.Hit;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_RecalcFlag_ForMapSymbols
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_EncountArea_C::BPI_RecalcFlag_ForMapSymbols()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_RecalcFlag_ForMapSymbols");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetSpawnSymbolEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EffectON                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SetSpawnSymbolEffect(bool EffectON, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SetSpawnSymbolEffect");

	Params::BPI_EncountArea_C_BPI_SetSpawnSymbolEffect Parms{};

	Parms.EffectON = EffectON;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_StopSymbolRespawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Stop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_StopSymbolRespawn(class APawn* Pawn, bool Stop, bool* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_StopSymbolRespawn");

	Params::BPI_EncountArea_C_BPI_StopSymbolRespawn Parms{};

	Parms.Pawn = Pawn;
	Parms.Stop = Stop;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetChainEncountList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UActorComponent*>          Components                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SetChainEncountList(TArray<class UActorComponent*>& Components, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SetChainEncountList");

	Params::BPI_EncountArea_C_BPI_SetChainEncountList Parms{};

	Parms.Components = std::move(Components);

	UObject::ProcessEvent(Func, &Parms);

	Components = std::move(Parms.Components);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_TimeAttackEncountAreaStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CheckMission                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_TimeAttackEncountAreaStart(bool CheckMission, int32 MissionId, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_TimeAttackEncountAreaStart");

	Params::BPI_EncountArea_C_BPI_TimeAttackEncountAreaStart Parms{};

	Parms.CheckMission = CheckMission;
	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_TimeAttackEncountAreaEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckMission                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_TimeAttackEncountAreaEnd(bool Effect, bool CheckMission, int32 MissionId, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_TimeAttackEncountAreaEnd");

	Params::BPI_EncountArea_C_BPI_TimeAttackEncountAreaEnd Parms{};

	Parms.Effect = Effect;
	Parms.CheckMission = CheckMission;
	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_SetMagatsuhiDevilAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Magatsuhi                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_SetMagatsuhiDevilAll(bool Magatsuhi, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_SetMagatsuhiDevilAll");

	Params::BPI_EncountArea_C_BPI_SetMagatsuhiDevilAll Parms{};

	Parms.Magatsuhi = Magatsuhi;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_ChangeSplineLocationZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SymbolLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SymbolHalfHeight                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_ChangeSplineLocationZ(const struct FVector& SymbolLocation, float SymbolHalfHeight, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_ChangeSplineLocationZ");

	Params::BPI_EncountArea_C_BPI_ChangeSplineLocationZ Parms{};

	Parms.SymbolLocation = std::move(SymbolLocation);
	Parms.SymbolHalfHeight = SymbolHalfHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_UpdateOptionSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_UpdateOptionSpline(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_UpdateOptionSpline");

	Params::BPI_EncountArea_C_BPI_UpdateOptionSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckOtherDiscoveryHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Overlap                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckOtherDiscoveryHit(bool* Overlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckOtherDiscoveryHit");

	Params::BPI_EncountArea_C_BPI_CheckOtherDiscoveryHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlap != nullptr)
		*Overlap = Parms.Overlap;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_CheckEncountAreaGenerator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Generator                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_CheckEncountAreaGenerator(bool* Generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_CheckEncountAreaGenerator");

	Params::BPI_EncountArea_C_BPI_CheckEncountAreaGenerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Generator != nullptr)
		*Generator = Parms.Generator;
}


// Function BPI_EncountArea.BPI_EncountArea_C.BPI_StopSpawn_FromIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_EncountArea_C::BPI_StopSpawn_FromIndex(int32 Param_Index, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_EncountArea_C", "BPI_StopSpawn_FromIndex");

	Params::BPI_EncountArea_C_BPI_StopSpawn_FromIndex Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}

}

