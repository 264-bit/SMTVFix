#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInfoWinCtrl

#include "Basic.hpp"

#include "BP_MapInfoWinCtrl_classes.hpp"
#include "BP_MapInfoWinCtrl_parameters.hpp"


namespace SDK
{

// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.ExecuteUbergraph_BP_MapInfoWinCtrl
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::ExecuteUbergraph_BP_MapInfoWinCtrl(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "ExecuteUbergraph_BP_MapInfoWinCtrl");

	Params::BP_MapInfoWinCtrl_C_ExecuteUbergraph_BP_MapInfoWinCtrl Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo_Mission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           TagParams                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSoftObjectPtr<class USoundAtomCue>     OpenSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_OpenMapInfo_Mission(class FName Label, const TArray<int32>& TagParams, TSoftObjectPtr<class USoundAtomCue> OpenSE, int32 MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_OpenMapInfo_Mission");

	Params::BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_Mission Parms{};

	Parms.Label = Label;
	Parms.TagParams = std::move(TagParams);
	Parms.OpenSE = OpenSE;
	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_CancelMissionMapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_CancelMissionMapInfo(int32 MissionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_CancelMissionMapInfo");

	Params::BP_MapInfoWinCtrl_C_BPI_CancelMissionMapInfo Parms{};

	Parms.MissionId = MissionId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_ClearMapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_ClearMapInfo(class FName Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_ClearMapInfo");

	Params::BP_MapInfoWinCtrl_C_BPI_ClearMapInfo Parms{};

	Parms.Label = Label;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenWaitingMapInfo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MapInfoWinCtrl_C::BPI_OpenWaitingMapInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_OpenWaitingMapInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo_AndMakkaWindow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PrevMakka                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AddMakka                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_OpenMapInfo_AndMakkaWindow(int32 PrevMakka, int32 AddMakka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_OpenMapInfo_AndMakkaWindow");

	Params::BP_MapInfoWinCtrl_C_BPI_OpenMapInfo_AndMakkaWindow Parms{};

	Parms.PrevMakka = PrevMakka;
	Parms.AddMakka = AddMakka;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_OpenMapInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Label                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           TagParams                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TSoftObjectPtr<class USoundAtomCue>     OpenSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    RemoveSameInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   RemoveSameInfoID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_OpenMapInfo(class FName Label, const TArray<int32>& TagParams, TSoftObjectPtr<class USoundAtomCue> OpenSE, bool RemoveSameInfo, int32 RemoveSameInfoID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_OpenMapInfo");

	Params::BP_MapInfoWinCtrl_C_BPI_OpenMapInfo Parms{};

	Parms.Label = Label;
	Parms.TagParams = std::move(TagParams);
	Parms.OpenSE = OpenSE;
	Parms.RemoveSameInfo = RemoveSameInfo;
	Parms.RemoveSameInfoID = RemoveSameInfoID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_DefaultShowTime
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MapInfoWinCtrl_C::BPI_DefaultShowTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_DefaultShowTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_SetShowTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::BPI_SetShowTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_SetShowTime");

	Params::BP_MapInfoWinCtrl_C_BPI_SetShowTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_SetLock_MapInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Lock                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapInfoWinCtrl_C::BPI_SetLock_MapInfo(bool Param_Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_SetLock_MapInfo");

	Params::BP_MapInfoWinCtrl_C_BPI_SetLock_MapInfo Parms{};

	Parms.Param_Lock = Param_Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OpenInfo_Core
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMapInfoData                     MapInfo                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_MapInfoWinCtrl_C::OpenInfo_Core(const struct FMapInfoData& MapInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "OpenInfo_Core");

	Params::BP_MapInfoWinCtrl_C_OpenInfo_Core Parms{};

	Parms.MapInfo = std::move(MapInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "ReceiveTick");

	Params::BP_MapInfoWinCtrl_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MapInfoWinCtrl_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OnLoaded_061010E64F261AEA3C2CF7AF916F603F
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::OnLoaded_061010E64F261AEA3C2CF7AF916F603F(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "OnLoaded_061010E64F261AEA3C2CF7AF916F603F");

	Params::BP_MapInfoWinCtrl_C_OnLoaded_061010E64F261AEA3C2CF7AF916F603F Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MapInfoWinCtrl_C::OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A");

	Params::BP_MapInfoWinCtrl_C_OnLoaded_2DB4BB56418FE0CFCAEFF8BD4FF5F24A Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.CompareMissionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MissionId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMapInfoData                     MapInfoData                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Equal                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapInfoWinCtrl_C::CompareMissionInfo(int32 MissionId, struct FMapInfoData& MapInfoData, bool* Equal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "CompareMissionInfo");

	Params::BP_MapInfoWinCtrl_C_CompareMissionInfo Parms{};

	Parms.MissionId = MissionId;
	Parms.MapInfoData = std::move(MapInfoData);

	UObject::ProcessEvent(Func, &Parms);

	MapInfoData = std::move(Parms.MapInfoData);

	if (Equal != nullptr)
		*Equal = Parms.Equal;
}


// Function BP_MapInfoWinCtrl.BP_MapInfoWinCtrl_C.BPI_CheckActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MapInfoWinCtrl_C::BPI_CheckActive(bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MapInfoWinCtrl_C", "BPI_CheckActive");

	Params::BP_MapInfoWinCtrl_C_BPI_CheckActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}

}

