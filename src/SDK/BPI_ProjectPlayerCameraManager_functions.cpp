#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ProjectPlayerCameraManager

#include "Basic.hpp"

#include "BPI_ProjectPlayerCameraManager_classes.hpp"
#include "BPI_ProjectPlayerCameraManager_parameters.hpp"


namespace SDK
{

// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraDush_IN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraDush_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraDush_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraDush_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraDush_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraDush_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraAttack_IN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraAttack_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraAttack_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraAttack_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraAttack_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraAttack_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraAttack_IN_FADE
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraAttack_IN_FADE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraAttack_IN_FADE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraSlide_IN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraSlide_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraSlide_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCAmeraSlide_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCAmeraSlide_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCAmeraSlide_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraGrip_IN
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraGrip_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraGrip_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraGrip_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraGrip_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraGrip_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraForce_IN
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectPlayerCameraManager_C::MapCameraForce_IN(float FOV, float Distance, float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraForce_IN");

	Params::BPI_ProjectPlayerCameraManager_C_MapCameraForce_IN Parms{};

	Parms.FOV = FOV;
	Parms.Distance = Distance;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.MapCameraForce_OUT
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::MapCameraForce_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "MapCameraForce_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.IsRequestFinishCameraUpdateDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectPlayerCameraManager_C::IsRequestFinishCameraUpdateDone(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "IsRequestFinishCameraUpdateDone");

	Params::BPI_ProjectPlayerCameraManager_C_IsRequestFinishCameraUpdateDone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.RequestFinishCameraUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::RequestFinishCameraUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "RequestFinishCameraUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.SetForceKeepMeshesVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceKeepVisible                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectPlayerCameraManager_C::SetForceKeepMeshesVisible(bool ForceKeepVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "SetForceKeepMeshesVisible");

	Params::BPI_ProjectPlayerCameraManager_C_SetForceKeepMeshesVisible Parms{};

	Parms.ForceKeepVisible = ForceKeepVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.GetDefaultFOV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DefaultFOV                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ProjectPlayerCameraManager_C::GetDefaultFOV(float* DefaultFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "GetDefaultFOV");

	Params::BPI_ProjectPlayerCameraManager_C_GetDefaultFOV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultFOV != nullptr)
		*DefaultFOV = Parms.DefaultFOV;
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.Player Camera Manual Tick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectPlayerCameraManager_C::Player_Camera_Manual_Tick(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "Player Camera Manual Tick");

	Params::BPI_ProjectPlayerCameraManager_C_Player_Camera_Manual_Tick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.Player Camera Root Init
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ProjectPlayerCameraManager_C::Player_Camera_Root_Init(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "Player Camera Root Init");

	Params::BPI_ProjectPlayerCameraManager_C_Player_Camera_Root_Init Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_ProjectPlayerCameraManager.BPI_ProjectPlayerCameraManager_C.DoManual_PlayerCameraInside
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ProjectPlayerCameraManager_C::DoManual_PlayerCameraInside()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_ProjectPlayerCameraManager_C", "DoManual_PlayerCameraInside");

	UObject::ProcessEvent(Func, nullptr);
}

}

