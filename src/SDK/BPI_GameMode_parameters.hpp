#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameMode

#include "Basic.hpp"

#include "E_MAP_SYSTEMRESIDENT_ID_structs.hpp"
#include "DebugTrace_St_Action_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_GameMode.BPI_GameMode_C.SetDaathAreaLock
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_SetDaathAreaLock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_SetDaathAreaLock) == 0x000001, "Wrong alignment on BPI_GameMode_C_SetDaathAreaLock");
static_assert(sizeof(BPI_GameMode_C_SetDaathAreaLock) == 0x000001, "Wrong size on BPI_GameMode_C_SetDaathAreaLock");
static_assert(offsetof(BPI_GameMode_C_SetDaathAreaLock, Lock) == 0x000000, "Member 'BPI_GameMode_C_SetDaathAreaLock::Lock' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapAllResidentDelete
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapAllResidentDelete final
{
public:
	int32                                         NextMap;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextArea;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapAllResidentDelete) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapAllResidentDelete");
static_assert(sizeof(BPI_GameMode_C_MapAllResidentDelete) == 0x000008, "Wrong size on BPI_GameMode_C_MapAllResidentDelete");
static_assert(offsetof(BPI_GameMode_C_MapAllResidentDelete, NextMap) == 0x000000, "Member 'BPI_GameMode_C_MapAllResidentDelete::NextMap' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAllResidentDelete, NextArea) == 0x000004, "Member 'BPI_GameMode_C_MapAllResidentDelete::NextArea' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapAreaLoad
// 0x000C (0x000C - 0x0000)
struct BPI_GameMode_C_MapAreaLoad final
{
public:
	int32                                         Map;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Area;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadAfterView;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_MapAreaLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapAreaLoad");
static_assert(sizeof(BPI_GameMode_C_MapAreaLoad) == 0x00000C, "Wrong size on BPI_GameMode_C_MapAreaLoad");
static_assert(offsetof(BPI_GameMode_C_MapAreaLoad, Map) == 0x000000, "Member 'BPI_GameMode_C_MapAreaLoad::Map' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaLoad, Area) == 0x000004, "Member 'BPI_GameMode_C_MapAreaLoad::Area' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaLoad, LoadAfterView) == 0x000008, "Member 'BPI_GameMode_C_MapAreaLoad::LoadAfterView' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapAreaView
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapAreaView final
{
public:
	int32                                         Map;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Area;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapAreaView) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapAreaView");
static_assert(sizeof(BPI_GameMode_C_MapAreaView) == 0x000008, "Wrong size on BPI_GameMode_C_MapAreaView");
static_assert(offsetof(BPI_GameMode_C_MapAreaView, Map) == 0x000000, "Member 'BPI_GameMode_C_MapAreaView::Map' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaView, Area) == 0x000004, "Member 'BPI_GameMode_C_MapAreaView::Area' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapAreaUnload
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapAreaUnload final
{
public:
	int32                                         Map;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Area;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapAreaUnload) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapAreaUnload");
static_assert(sizeof(BPI_GameMode_C_MapAreaUnload) == 0x000008, "Wrong size on BPI_GameMode_C_MapAreaUnload");
static_assert(offsetof(BPI_GameMode_C_MapAreaUnload, Map) == 0x000000, "Member 'BPI_GameMode_C_MapAreaUnload::Map' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaUnload, Area) == 0x000004, "Member 'BPI_GameMode_C_MapAreaUnload::Area' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsLoadMapArea
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsLoadMapArea final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsLoadMapArea) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsLoadMapArea");
static_assert(sizeof(BPI_GameMode_C_IsLoadMapArea) == 0x000001, "Wrong size on BPI_GameMode_C_IsLoadMapArea");
static_assert(offsetof(BPI_GameMode_C_IsLoadMapArea, End) == 0x000000, "Member 'BPI_GameMode_C_IsLoadMapArea::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentLoad
// 0x000C (0x000C - 0x0000)
struct BPI_GameMode_C_MapUnResidentLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadAfterView;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_MapUnResidentLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapUnResidentLoad");
static_assert(sizeof(BPI_GameMode_C_MapUnResidentLoad) == 0x00000C, "Wrong size on BPI_GameMode_C_MapUnResidentLoad");
static_assert(offsetof(BPI_GameMode_C_MapUnResidentLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapUnResidentLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapUnResidentLoad, AreaId) == 0x000004, "Member 'BPI_GameMode_C_MapUnResidentLoad::AreaId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapUnResidentLoad, LoadAfterView) == 0x000008, "Member 'BPI_GameMode_C_MapUnResidentLoad::LoadAfterView' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentView
// 0x0004 (0x0004 - 0x0000)
struct BPI_GameMode_C_MapUnResidentView final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapUnResidentView) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapUnResidentView");
static_assert(sizeof(BPI_GameMode_C_MapUnResidentView) == 0x000004, "Wrong size on BPI_GameMode_C_MapUnResidentView");
static_assert(offsetof(BPI_GameMode_C_MapUnResidentView, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapUnResidentView::MapId' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapUnResidentUnLoad
// 0x0004 (0x0004 - 0x0000)
struct BPI_GameMode_C_MapUnResidentUnLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapUnResidentUnLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapUnResidentUnLoad");
static_assert(sizeof(BPI_GameMode_C_MapUnResidentUnLoad) == 0x000004, "Wrong size on BPI_GameMode_C_MapUnResidentUnLoad");
static_assert(offsetof(BPI_GameMode_C_MapUnResidentUnLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapUnResidentUnLoad::MapId' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsLoadMapUnResident
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_IsLoadMapUnResident final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadAfterView;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsLoadMapUnResident) == 0x000004, "Wrong alignment on BPI_GameMode_C_IsLoadMapUnResident");
static_assert(sizeof(BPI_GameMode_C_IsLoadMapUnResident) == 0x000008, "Wrong size on BPI_GameMode_C_IsLoadMapUnResident");
static_assert(offsetof(BPI_GameMode_C_IsLoadMapUnResident, MapId) == 0x000000, "Member 'BPI_GameMode_C_IsLoadMapUnResident::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsLoadMapUnResident, LoadAfterView) == 0x000004, "Member 'BPI_GameMode_C_IsLoadMapUnResident::LoadAfterView' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.StartNextMapBGLoad
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_StartNextMapBGLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaId;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_StartNextMapBGLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_StartNextMapBGLoad");
static_assert(sizeof(BPI_GameMode_C_StartNextMapBGLoad) == 0x000008, "Wrong size on BPI_GameMode_C_StartNextMapBGLoad");
static_assert(offsetof(BPI_GameMode_C_StartNextMapBGLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_StartNextMapBGLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_StartNextMapBGLoad, AreaId) == 0x000004, "Member 'BPI_GameMode_C_StartNextMapBGLoad::AreaId' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapOpenLevel
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameMode_C_MapOpenLevel final
{
public:
	int32                                         Old_mapID;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Old_AreaID;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_MapID;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_AreaId;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapOpenLevel) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapOpenLevel");
static_assert(sizeof(BPI_GameMode_C_MapOpenLevel) == 0x000010, "Wrong size on BPI_GameMode_C_MapOpenLevel");
static_assert(offsetof(BPI_GameMode_C_MapOpenLevel, Old_mapID) == 0x000000, "Member 'BPI_GameMode_C_MapOpenLevel::Old_mapID' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapOpenLevel, Old_AreaID) == 0x000004, "Member 'BPI_GameMode_C_MapOpenLevel::Old_AreaID' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapOpenLevel, New_MapID) == 0x000008, "Member 'BPI_GameMode_C_MapOpenLevel::New_MapID' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapOpenLevel, New_AreaId) == 0x00000C, "Member 'BPI_GameMode_C_MapOpenLevel::New_AreaId' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKLoad
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystemBKLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystemBKLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystemBKLoad");
static_assert(sizeof(BPI_GameMode_C_MapSystemBKLoad) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystemBKLoad");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystemBKLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKLoad, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystemBKLoad::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKUnLoad
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystemBKUnLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystemBKUnLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystemBKUnLoad");
static_assert(sizeof(BPI_GameMode_C_MapSystemBKUnLoad) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystemBKUnLoad");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKUnLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystemBKUnLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKUnLoad, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystemBKUnLoad::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKView
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystemBKView final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystemBKView) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystemBKView");
static_assert(sizeof(BPI_GameMode_C_MapSystemBKView) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystemBKView");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKView, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystemBKView::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKView, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystemBKView::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemBKLoadEnd
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_IsMapSystemBKLoadEnd final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          End;                                               // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapSystemBKLoadEnd) == 0x000004, "Wrong alignment on BPI_GameMode_C_IsMapSystemBKLoadEnd");
static_assert(sizeof(BPI_GameMode_C_IsMapSystemBKLoadEnd) == 0x000008, "Wrong size on BPI_GameMode_C_IsMapSystemBKLoadEnd");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemBKLoadEnd, MapId) == 0x000000, "Member 'BPI_GameMode_C_IsMapSystemBKLoadEnd::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemBKLoadEnd, Type) == 0x000004, "Member 'BPI_GameMode_C_IsMapSystemBKLoadEnd::Type' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemBKLoadEnd, End) == 0x000005, "Member 'BPI_GameMode_C_IsMapSystemBKLoadEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsNextMapBGLoadEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsNextMapBGLoadEnd final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsNextMapBGLoadEnd) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsNextMapBGLoadEnd");
static_assert(sizeof(BPI_GameMode_C_IsNextMapBGLoadEnd) == 0x000001, "Wrong size on BPI_GameMode_C_IsNextMapBGLoadEnd");
static_assert(offsetof(BPI_GameMode_C_IsNextMapBGLoadEnd, End) == 0x000000, "Member 'BPI_GameMode_C_IsNextMapBGLoadEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystem_StreamOnlyUnLoad
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystem_StreamOnlyUnLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystem_StreamOnlyUnLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystem_StreamOnlyUnLoad");
static_assert(sizeof(BPI_GameMode_C_MapSystem_StreamOnlyUnLoad) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystem_StreamOnlyUnLoad");
static_assert(offsetof(BPI_GameMode_C_MapSystem_StreamOnlyUnLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystem_StreamOnlyUnLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystem_StreamOnlyUnLoad, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystem_StreamOnlyUnLoad::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystem_StreamOnlyLoad
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystem_StreamOnlyLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystem_StreamOnlyLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystem_StreamOnlyLoad");
static_assert(sizeof(BPI_GameMode_C_MapSystem_StreamOnlyLoad) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystem_StreamOnlyLoad");
static_assert(offsetof(BPI_GameMode_C_MapSystem_StreamOnlyLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystem_StreamOnlyLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystem_StreamOnlyLoad, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystem_StreamOnlyLoad::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.LevelChange
// 0x0020 (0x0020 - 0x0000)
struct BPI_GameMode_C_LevelChange final
{
public:
	struct FPrimaryAssetId                        UnLoad;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Load;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_LevelChange) == 0x000004, "Wrong alignment on BPI_GameMode_C_LevelChange");
static_assert(sizeof(BPI_GameMode_C_LevelChange) == 0x000020, "Wrong size on BPI_GameMode_C_LevelChange");
static_assert(offsetof(BPI_GameMode_C_LevelChange, UnLoad) == 0x000000, "Member 'BPI_GameMode_C_LevelChange::UnLoad' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_LevelChange, Load) == 0x000010, "Member 'BPI_GameMode_C_LevelChange::Load' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemOnlyLoadEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsMapSystemOnlyLoadEnd final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapSystemOnlyLoadEnd) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsMapSystemOnlyLoadEnd");
static_assert(sizeof(BPI_GameMode_C_IsMapSystemOnlyLoadEnd) == 0x000001, "Wrong size on BPI_GameMode_C_IsMapSystemOnlyLoadEnd");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemOnlyLoadEnd, End) == 0x000000, "Member 'BPI_GameMode_C_IsMapSystemOnlyLoadEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsUnLoadMapArea
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsUnLoadMapArea final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsUnLoadMapArea) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsUnLoadMapArea");
static_assert(sizeof(BPI_GameMode_C_IsUnLoadMapArea) == 0x000001, "Wrong size on BPI_GameMode_C_IsUnLoadMapArea");
static_assert(offsetof(BPI_GameMode_C_IsUnLoadMapArea, End) == 0x000000, "Member 'BPI_GameMode_C_IsUnLoadMapArea::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsBGLoadMapArea
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsBGLoadMapArea final
{
public:
	bool                                          Emd;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsBGLoadMapArea) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsBGLoadMapArea");
static_assert(sizeof(BPI_GameMode_C_IsBGLoadMapArea) == 0x000001, "Wrong size on BPI_GameMode_C_IsBGLoadMapArea");
static_assert(offsetof(BPI_GameMode_C_IsBGLoadMapArea, Emd) == 0x000000, "Member 'BPI_GameMode_C_IsBGLoadMapArea::Emd' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.DebugTraceActivePos
// 0x0003 (0x0003 - 0x0000)
struct BPI_GameMode_C_DebugTraceActivePos final
{
public:
	struct FDebugTrace_St_Action                  Action;                                            // 0x0000(0x0003)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_DebugTraceActivePos) == 0x000001, "Wrong alignment on BPI_GameMode_C_DebugTraceActivePos");
static_assert(sizeof(BPI_GameMode_C_DebugTraceActivePos) == 0x000003, "Wrong size on BPI_GameMode_C_DebugTraceActivePos");
static_assert(offsetof(BPI_GameMode_C_DebugTraceActivePos, Action) == 0x000000, "Member 'BPI_GameMode_C_DebugTraceActivePos::Action' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsGameStart
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsGameStart final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsGameStart) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsGameStart");
static_assert(sizeof(BPI_GameMode_C_IsGameStart) == 0x000001, "Wrong size on BPI_GameMode_C_IsGameStart");
static_assert(offsetof(BPI_GameMode_C_IsGameStart, Enable) == 0x000000, "Member 'BPI_GameMode_C_IsGameStart::Enable' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemLevelLoadEnd
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_IsMapSystemLevelLoadEnd final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          End;                                               // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapSystemLevelLoadEnd) == 0x000004, "Wrong alignment on BPI_GameMode_C_IsMapSystemLevelLoadEnd");
static_assert(sizeof(BPI_GameMode_C_IsMapSystemLevelLoadEnd) == 0x000008, "Wrong size on BPI_GameMode_C_IsMapSystemLevelLoadEnd");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemLevelLoadEnd, MapId) == 0x000000, "Member 'BPI_GameMode_C_IsMapSystemLevelLoadEnd::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemLevelLoadEnd, Type) == 0x000004, "Member 'BPI_GameMode_C_IsMapSystemLevelLoadEnd::Type' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemLevelLoadEnd, End) == 0x000005, "Member 'BPI_GameMode_C_IsMapSystemLevelLoadEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.SetMapEventPlaying
// 0x0002 (0x0002 - 0x0000)
struct BPI_GameMode_C_SetMapEventPlaying final
{
public:
	bool                                          Param_IsMapEventPlaying;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Dummy;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_SetMapEventPlaying) == 0x000001, "Wrong alignment on BPI_GameMode_C_SetMapEventPlaying");
static_assert(sizeof(BPI_GameMode_C_SetMapEventPlaying) == 0x000002, "Wrong size on BPI_GameMode_C_SetMapEventPlaying");
static_assert(offsetof(BPI_GameMode_C_SetMapEventPlaying, Param_IsMapEventPlaying) == 0x000000, "Member 'BPI_GameMode_C_SetMapEventPlaying::Param_IsMapEventPlaying' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_SetMapEventPlaying, Dummy) == 0x000001, "Member 'BPI_GameMode_C_SetMapEventPlaying::Dummy' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapEventPlaying
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsMapEventPlaying final
{
public:
	bool                                          Param_IsMapEventPlaying;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapEventPlaying) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsMapEventPlaying");
static_assert(sizeof(BPI_GameMode_C_IsMapEventPlaying) == 0x000001, "Wrong size on BPI_GameMode_C_IsMapEventPlaying");
static_assert(offsetof(BPI_GameMode_C_IsMapEventPlaying, Param_IsMapEventPlaying) == 0x000000, "Member 'BPI_GameMode_C_IsMapEventPlaying::Param_IsMapEventPlaying' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemUnloadEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsMapSystemUnloadEnd final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapSystemUnloadEnd) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsMapSystemUnloadEnd");
static_assert(sizeof(BPI_GameMode_C_IsMapSystemUnloadEnd) == 0x000001, "Wrong size on BPI_GameMode_C_IsMapSystemUnloadEnd");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemUnloadEnd, End) == 0x000000, "Member 'BPI_GameMode_C_IsMapSystemUnloadEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapSystemBKHide
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_MapSystemBKHide final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MAP_SYSTEMRESIDENT_ID                       Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_MapSystemBKHide) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapSystemBKHide");
static_assert(sizeof(BPI_GameMode_C_MapSystemBKHide) == 0x000008, "Wrong size on BPI_GameMode_C_MapSystemBKHide");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKHide, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapSystemBKHide::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapSystemBKHide, Type) == 0x000004, "Member 'BPI_GameMode_C_MapSystemBKHide::Type' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsMapSystemHideEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsMapSystemHideEnd final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsMapSystemHideEnd) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsMapSystemHideEnd");
static_assert(sizeof(BPI_GameMode_C_IsMapSystemHideEnd) == 0x000001, "Wrong size on BPI_GameMode_C_IsMapSystemHideEnd");
static_assert(offsetof(BPI_GameMode_C_IsMapSystemHideEnd, End) == 0x000000, "Member 'BPI_GameMode_C_IsMapSystemHideEnd::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.MapAreaChange
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameMode_C_MapAreaChange final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAreaId;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewAreaId;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadAfterView;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_MapAreaChange) == 0x000004, "Wrong alignment on BPI_GameMode_C_MapAreaChange");
static_assert(sizeof(BPI_GameMode_C_MapAreaChange) == 0x000010, "Wrong size on BPI_GameMode_C_MapAreaChange");
static_assert(offsetof(BPI_GameMode_C_MapAreaChange, MapId) == 0x000000, "Member 'BPI_GameMode_C_MapAreaChange::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaChange, CurrentAreaId) == 0x000004, "Member 'BPI_GameMode_C_MapAreaChange::CurrentAreaId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaChange, NewAreaId) == 0x000008, "Member 'BPI_GameMode_C_MapAreaChange::NewAreaId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_MapAreaChange, LoadAfterView) == 0x00000C, "Member 'BPI_GameMode_C_MapAreaChange::LoadAfterView' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsGardenLoaded
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsGardenLoaded final
{
public:
	bool                                          End;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsGardenLoaded) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsGardenLoaded");
static_assert(sizeof(BPI_GameMode_C_IsGardenLoaded) == 0x000001, "Wrong size on BPI_GameMode_C_IsGardenLoaded");
static_assert(offsetof(BPI_GameMode_C_IsGardenLoaded, End) == 0x000000, "Member 'BPI_GameMode_C_IsGardenLoaded::End' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.GetGardenWarpPoint
// 0x0004 (0x0004 - 0x0000)
struct BPI_GameMode_C_GetGardenWarpPoint final
{
public:
	int32                                         WarpPoint;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_GetGardenWarpPoint) == 0x000004, "Wrong alignment on BPI_GameMode_C_GetGardenWarpPoint");
static_assert(sizeof(BPI_GameMode_C_GetGardenWarpPoint) == 0x000004, "Wrong size on BPI_GameMode_C_GetGardenWarpPoint");
static_assert(offsetof(BPI_GameMode_C_GetGardenWarpPoint, WarpPoint) == 0x000000, "Member 'BPI_GameMode_C_GetGardenWarpPoint::WarpPoint' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsGardenOpen
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_IsGardenOpen final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsGardenOpen;                                // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsGardenOpen) == 0x000004, "Wrong alignment on BPI_GameMode_C_IsGardenOpen");
static_assert(sizeof(BPI_GameMode_C_IsGardenOpen) == 0x000008, "Wrong size on BPI_GameMode_C_IsGardenOpen");
static_assert(offsetof(BPI_GameMode_C_IsGardenOpen, MapId) == 0x000000, "Member 'BPI_GameMode_C_IsGardenOpen::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsGardenOpen, Param_IsGardenOpen) == 0x000004, "Member 'BPI_GameMode_C_IsGardenOpen::Param_IsGardenOpen' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.StartGardenLoad
// 0x000C (0x000C - 0x0000)
struct BPI_GameMode_C_StartGardenLoad final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WarpPoint;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadAfterView;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_StartGardenLoad) == 0x000004, "Wrong alignment on BPI_GameMode_C_StartGardenLoad");
static_assert(sizeof(BPI_GameMode_C_StartGardenLoad) == 0x00000C, "Wrong size on BPI_GameMode_C_StartGardenLoad");
static_assert(offsetof(BPI_GameMode_C_StartGardenLoad, MapId) == 0x000000, "Member 'BPI_GameMode_C_StartGardenLoad::MapId' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_StartGardenLoad, WarpPoint) == 0x000004, "Member 'BPI_GameMode_C_StartGardenLoad::WarpPoint' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_StartGardenLoad, LoadAfterView) == 0x000008, "Member 'BPI_GameMode_C_StartGardenLoad::LoadAfterView' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.StartGardenUnload
// 0x0004 (0x0004 - 0x0000)
struct BPI_GameMode_C_StartGardenUnload final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_StartGardenUnload) == 0x000004, "Wrong alignment on BPI_GameMode_C_StartGardenUnload");
static_assert(sizeof(BPI_GameMode_C_StartGardenUnload) == 0x000004, "Wrong size on BPI_GameMode_C_StartGardenUnload");
static_assert(offsetof(BPI_GameMode_C_StartGardenUnload, MapId) == 0x000000, "Member 'BPI_GameMode_C_StartGardenUnload::MapId' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsInGardenLevel
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_IsInGardenLevel final
{
public:
	bool                                          Param_IsInGardenLevel;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_IsInGardenLevel) == 0x000001, "Wrong alignment on BPI_GameMode_C_IsInGardenLevel");
static_assert(sizeof(BPI_GameMode_C_IsInGardenLevel) == 0x000001, "Wrong size on BPI_GameMode_C_IsInGardenLevel");
static_assert(offsetof(BPI_GameMode_C_IsInGardenLevel, Param_IsInGardenLevel) == 0x000000, "Member 'BPI_GameMode_C_IsInGardenLevel::Param_IsInGardenLevel' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.ApplyMissionMapBGM
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameMode_C_ApplyMissionMapBGM final
{
public:
	bool                                          Dummy;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_GameMode_C_ApplyMissionMapBGM) == 0x000001, "Wrong alignment on BPI_GameMode_C_ApplyMissionMapBGM");
static_assert(sizeof(BPI_GameMode_C_ApplyMissionMapBGM) == 0x000001, "Wrong size on BPI_GameMode_C_ApplyMissionMapBGM");
static_assert(offsetof(BPI_GameMode_C_ApplyMissionMapBGM, Dummy) == 0x000000, "Member 'BPI_GameMode_C_ApplyMissionMapBGM::Dummy' has a wrong offset!");

}

