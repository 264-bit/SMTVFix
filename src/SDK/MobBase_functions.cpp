#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MobBase

#include "Basic.hpp"

#include "MobBase_classes.hpp"
#include "MobBase_parameters.hpp"


namespace SDK
{

// Function MobBase.MobBase_C.ExecuteUbergraph_MobBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobBase_C::ExecuteUbergraph_MobBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "ExecuteUbergraph_MobBase");

	Params::MobBase_C_ExecuteUbergraph_MobBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MobBase.MobBase_C.TempHidden
// (BlueprintCallable, BlueprintEvent)

void AMobBase_C::TempHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "TempHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMobBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.찏鉅법_0__UpdateFunc
// (BlueprintEvent)

void AMobBase_C::_______0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "찏鉅법_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.찏鉅법_0__FinishedFunc
// (BlueprintEvent)

void AMobBase_C::_______0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "찏鉅법_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMobBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.RandomChoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobBase_C::RandomChoice(TArray<int32>& InList, int32* OutID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "RandomChoice");

	Params::MobBase_C_RandomChoice Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutID != nullptr)
		*OutID = Parms.OutID;
}


// Function MobBase.MobBase_C.RandomColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLinearColor>             InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FLinearColor                     OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobBase_C::RandomColor(TArray<struct FLinearColor>& InList, struct FLinearColor* OutColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "RandomColor");

	Params::MobBase_C_RandomColor Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);
}


// Function MobBase.MobBase_C.DMIRandomColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FLinearColor>             ColorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    RandomColor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     FixColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic*         OutDMI                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMobBase_C::DMIRandomColor(class USkeletalMeshComponent*& Mesh, TArray<struct FLinearColor>& ColorList, bool RandomColor, const struct FLinearColor& FixColor, class UMaterialInstanceDynamic** OutDMI, struct FLinearColor* OutColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "DMIRandomColor");

	Params::MobBase_C_DMIRandomColor Parms{};

	Parms.Mesh = Mesh;
	Parms.ColorList = std::move(ColorList);
	Parms.RandomColor = RandomColor;
	Parms.FixColor = std::move(FixColor);

	UObject::ProcessEvent(Func, &Parms);

	Mesh = Parms.Mesh;
	ColorList = std::move(Parms.ColorList);

	if (OutDMI != nullptr)
		*OutDMI = Parms.OutDMI;

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);
}


// Function MobBase.MobBase_C.PrintLog
// (Public, BlueprintCallable, BlueprintEvent)

void AMobBase_C::PrintLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "PrintLog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.RandomizeAnimationPosition
// (Public, BlueprintCallable, BlueprintEvent)

void AMobBase_C::RandomizeAnimationPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "RandomizeAnimationPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MobBase.MobBase_C.ApplyLightingChannel
// (Public, BlueprintCallable, BlueprintEvent)

void AMobBase_C::ApplyLightingChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MobBase_C", "ApplyLightingChannel");

	UObject::ProcessEvent(Func, nullptr);
}

}

