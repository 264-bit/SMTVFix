#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MiitsuWindowCtrl

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.OpenMiitsuPointWindow
// 0x0004 (0x0004 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnderMakkaWin;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithOpenTotalWindow;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow) == 0x000004, "Wrong size on BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, NotPlayAnim) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, IsUnderMakkaWin) == 0x000001, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::IsUnderMakkaWin' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, WithOpenTotalWindow) == 0x000002, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::WithOpenTotalWindow' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow, ReturnVal) == 0x000003, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuPointWindow::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.OpenMiitsuTotalWindow
// 0x0003 (0x0003 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsUnderMakkaWin;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow) == 0x000003, "Wrong size on BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, NotPlayAnim) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, IsUnderMakkaWin) == 0x000001, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::IsUnderMakkaWin' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow, ReturnVal) == 0x000002, "Member 'BPI_MiitsuWindowCtrl_C_OpenMiitsuTotalWindow::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.CloseMiitsuPointWindow
// 0x0002 (0x0002 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow) == 0x000002, "Wrong size on BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, NotPlayAnim) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow, ReturnVal) == 0x000001, "Member 'BPI_MiitsuWindowCtrl_C_CloseMiitsuPointWindow::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.CloseMiitsuTotalWinidow
// 0x0002 (0x0002 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow final
{
public:
	bool                                          NotPlayAnim;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow) == 0x000002, "Wrong size on BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow, NotPlayAnim) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow::NotPlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow, ReturnVal) == 0x000001, "Member 'BPI_MiitsuWindowCtrl_C_CloseMiitsuTotalWinidow::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.SetMiitsuPoint
// 0x0008 (0x0008 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_SetMiitsuPoint final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlaySE;                                            // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint) == 0x000004, "Wrong alignment on BPI_MiitsuWindowCtrl_C_SetMiitsuPoint");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint) == 0x000008, "Wrong size on BPI_MiitsuWindowCtrl_C_SetMiitsuPoint");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint, NewNum) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuPoint::NewNum' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint, PlayAnim) == 0x000004, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuPoint::PlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint, PlaySE) == 0x000005, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuPoint::PlaySE' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuPoint, ReturnVal) == 0x000006, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuPoint::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.SetMiitsuTotal
// 0x0008 (0x0008 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_SetMiitsuTotal final
{
public:
	int32                                         NewNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_SetMiitsuTotal) == 0x000004, "Wrong alignment on BPI_MiitsuWindowCtrl_C_SetMiitsuTotal");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_SetMiitsuTotal) == 0x000008, "Wrong size on BPI_MiitsuWindowCtrl_C_SetMiitsuTotal");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuTotal, NewNum) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuTotal::NewNum' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuTotal, PlayAnim) == 0x000004, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuTotal::PlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SetMiitsuTotal, ReturnVal) == 0x000005, "Member 'BPI_MiitsuWindowCtrl_C_SetMiitsuTotal::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.AddMiitsuPoint
// 0x0008 (0x0008 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_AddMiitsuPoint final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlaySE;                                            // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint) == 0x000004, "Wrong alignment on BPI_MiitsuWindowCtrl_C_AddMiitsuPoint");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint) == 0x000008, "Wrong size on BPI_MiitsuWindowCtrl_C_AddMiitsuPoint");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint, AddNum) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_AddMiitsuPoint::AddNum' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint, PlayAnim) == 0x000004, "Member 'BPI_MiitsuWindowCtrl_C_AddMiitsuPoint::PlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint, PlaySE) == 0x000005, "Member 'BPI_MiitsuWindowCtrl_C_AddMiitsuPoint::PlaySE' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMiitsuPoint, ReturnVal) == 0x000006, "Member 'BPI_MiitsuWindowCtrl_C_AddMiitsuPoint::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.AddMIitsuTotal
// 0x0008 (0x0008 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_AddMIitsuTotal final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnim;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnVal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_AddMIitsuTotal) == 0x000004, "Wrong alignment on BPI_MiitsuWindowCtrl_C_AddMIitsuTotal");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_AddMIitsuTotal) == 0x000008, "Wrong size on BPI_MiitsuWindowCtrl_C_AddMIitsuTotal");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMIitsuTotal, AddNum) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_AddMIitsuTotal::AddNum' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMIitsuTotal, PlayAnim) == 0x000004, "Member 'BPI_MiitsuWindowCtrl_C_AddMIitsuTotal::PlayAnim' has a wrong offset!");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_AddMIitsuTotal, ReturnVal) == 0x000005, "Member 'BPI_MiitsuWindowCtrl_C_AddMIitsuTotal::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.SkipMiitsuPointAnim
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim final
{
public:
	bool                                          ReturnVal;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim, ReturnVal) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_SkipMiitsuPointAnim::ReturnVal' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.IsPlayingMiisuPointAnim
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim, IsPlaying) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_IsPlayingMiisuPointAnim::IsPlaying' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.IsPlayingMiitsuTotalAnim
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim, IsPlaying) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_IsPlayingMiitsuTotalAnim::IsPlaying' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.IsShowMiitsuWindow
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow, IsShow) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_IsShowMiitsuWindow::IsShow' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.IsPlayingFrameIn
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn, IsPlaying) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_IsPlayingFrameIn::IsPlaying' has a wrong offset!");

// Function BPI_MiitsuWindowCtrl.BPI_MiitsuWindowCtrl_C.IsPlayingFrameOut
// 0x0001 (0x0001 - 0x0000)
struct BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut final
{
public:
	bool                                          IsPlaying;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut) == 0x000001, "Wrong alignment on BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut");
static_assert(sizeof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut) == 0x000001, "Wrong size on BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut");
static_assert(offsetof(BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut, IsPlaying) == 0x000000, "Member 'BPI_MiitsuWindowCtrl_C_IsPlayingFrameOut::IsPlaying' has a wrong offset!");

}

