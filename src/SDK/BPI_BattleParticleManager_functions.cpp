#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleParticleManager

#include "Basic.hpp"

#include "BPI_BattleParticleManager_classes.hpp"
#include "BPI_BattleParticleManager_parameters.hpp"


namespace SDK
{

// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BIAddParticle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ParticleObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       RelativeTransform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   TranslucencyPriority                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkillEffectPairSetting          PairSetting                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           AttachSocketName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    AllowPositionUpdate                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USkeletalMesh*                    ModSkeltal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                ModAnim                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ModSocketName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           HashID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BIAddParticle(class UObject* ParticleObject, const struct FTransform& SpawnTransform, const struct FTransform& RelativeTransform, int32 TranslucencyPriority, const struct FSkillEffectPairSetting& PairSetting, class AActor* TargetActor, const class FString& AttachSocketName, bool AllowPositionUpdate, class USkeletalMesh* ModSkeltal, class UAnimSequenceBase* ModAnim, class FName ModSocketName, class FString* HashID, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BIAddParticle");

	Params::BPI_BattleParticleManager_C_BIAddParticle Parms{};

	Parms.ParticleObject = ParticleObject;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.TranslucencyPriority = TranslucencyPriority;
	Parms.PairSetting = std::move(PairSetting);
	Parms.TargetActor = TargetActor;
	Parms.AttachSocketName = std::move(AttachSocketName);
	Parms.AllowPositionUpdate = AllowPositionUpdate;
	Parms.ModSkeltal = ModSkeltal;
	Parms.ModAnim = ModAnim;
	Parms.ModSocketName = ModSocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (HashID != nullptr)
		*HashID = std::move(Parms.HashID);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BIIsAlive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           HashID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsAlive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BIIsAlive(const class FString& HashID, bool* IsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BIIsAlive");

	Params::BPI_BattleParticleManager_C_BIIsAlive Parms{};

	Parms.HashID = std::move(HashID);

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlive != nullptr)
		*IsAlive = Parms.IsAlive;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BISetBeamParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           HashID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BISetBeamParameter(const class FString& HashID, int32 Target, int32 Source, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BISetBeamParameter");

	Params::BPI_BattleParticleManager_C_BISetBeamParameter Parms{};

	Parms.HashID = std::move(HashID);
	Parms.Target = Target;
	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BISetProjectileParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           HashID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Tangent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BISetProjectileParameter(const class FString& HashID, int32 Target, int32 Source, float Speed, float Tangent, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BISetProjectileParameter");

	Params::BPI_BattleParticleManager_C_BISetProjectileParameter Parms{};

	Parms.HashID = std::move(HashID);
	Parms.Target = Target;
	Parms.Source = Source;
	Parms.Speed = Speed;
	Parms.Tangent = Tangent;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BIAddParticle2
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_BattleParty_C>IPartySystem                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          ParticleObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBtlTaskDesc                     Desc                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// class FString                           HashID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BIAddParticle2(TScriptInterface<class IBPI_BattleParty_C> IPartySystem, class UObject* ParticleObject, const struct FBtlTaskDesc& Desc, class FString* HashID, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BIAddParticle2");

	Params::BPI_BattleParticleManager_C_BIAddParticle2 Parms{};

	Parms.IPartySystem = IPartySystem;
	Parms.ParticleObject = ParticleObject;
	Parms.Desc = std::move(Desc);

	UObject::ProcessEvent(Func, &Parms);

	if (HashID != nullptr)
		*HashID = std::move(Parms.HashID);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BIResetTransrateCache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BIResetTransrateCache(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BIResetTransrateCache");

	Params::BPI_BattleParticleManager_C_BIResetTransrateCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BISetDecalParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           HashID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UMaterialInstance*                Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FMaterialAnimSetting_T>   AnimSetting                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   LoopTimes                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CycleSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   RotRandMin                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotRandMax                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AbsolutelyNoRotation                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsCastOnlyStaticMesh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BISetDecalParameter(const class FString& HashID, class UMaterialInstance* Material, TArray<struct FMaterialAnimSetting_T>& AnimSetting, int32 LoopTimes, float CycleSec, const struct FRotator& Rotation, float RotRandMin, float RotRandMax, const struct FVector& Size, bool AbsolutelyNoRotation, bool IsCastOnlyStaticMesh, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BISetDecalParameter");

	Params::BPI_BattleParticleManager_C_BISetDecalParameter Parms{};

	Parms.HashID = std::move(HashID);
	Parms.Material = Material;
	Parms.AnimSetting = std::move(AnimSetting);
	Parms.LoopTimes = LoopTimes;
	Parms.CycleSec = CycleSec;
	Parms.Rotation = std::move(Rotation);
	Parms.RotRandMin = RotRandMin;
	Parms.RotRandMax = RotRandMax;
	Parms.Size = std::move(Size);
	Parms.AbsolutelyNoRotation = AbsolutelyNoRotation;
	Parms.IsCastOnlyStaticMesh = IsCastOnlyStaticMesh;

	UObject::ProcessEvent(Func, &Parms);

	AnimSetting = std::move(Parms.AnimSetting);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_BattleParticleManager.BPI_BattleParticleManager_C.BI_DestroyAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleParticleManager_C::BI_DestroyAll(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleParticleManager_C", "BI_DestroyAll");

	Params::BPI_BattleParticleManager_C_BI_DestroyAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

