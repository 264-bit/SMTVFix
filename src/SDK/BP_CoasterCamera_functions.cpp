#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CoasterCamera

#include "Basic.hpp"

#include "BP_CoasterCamera_classes.hpp"
#include "BP_CoasterCamera_parameters.hpp"


namespace SDK
{

// Function BP_CoasterCamera.BP_CoasterCamera_C.ExecuteUbergraph_BP_CoasterCamera
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterCamera_C::ExecuteUbergraph_BP_CoasterCamera(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "ExecuteUbergraph_BP_CoasterCamera");

	Params::BP_CoasterCamera_C_ExecuteUbergraph_BP_CoasterCamera Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.Update
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterCamera_C::Update(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "Update");

	Params::BP_CoasterCamera_C_Update Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CoasterCamera_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.Setting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RInterpSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IgnoreCameraCollision                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterCamera_C::Setting(float FOV, float RInterpSpeed, bool Param_IgnoreCameraCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "Setting");

	Params::BP_CoasterCamera_C_Setting Parms{};

	Parms.FOV = FOV;
	Parms.RInterpSpeed = RInterpSpeed;
	Parms.Param_IgnoreCameraCollision = Param_IgnoreCameraCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.RInterp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         CurrentRot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         TargetRor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterCamera_C::RInterp(const struct FRotator& CurrentRot, const struct FRotator& TargetRor, float DeltaSec, float InterpSpeed, struct FRotator* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "RInterp");

	Params::BP_CoasterCamera_C_RInterp Parms{};

	Parms.CurrentRot = std::move(CurrentRot);
	Parms.TargetRor = std::move(TargetRor);
	Parms.DeltaSec = DeltaSec;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.CalcCameraUpVec
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          UpVec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterCamera_C::CalcCameraUpVec(struct FVector* UpVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "CalcCameraUpVec");

	Params::BP_CoasterCamera_C_CalcCameraUpVec Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpVec != nullptr)
		*UpVec = std::move(Parms.UpVec);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.SettingSpline
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Param_SplineComp                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPC_CharaSplineMover_C*          Param_SplineMover                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterCamera_C::SettingSpline(class USplineComponent* Param_SplineComp, class UBPC_CharaSplineMover_C* Param_SplineMover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "SettingSpline");

	Params::BP_CoasterCamera_C_SettingSpline Parms{};

	Parms.Param_SplineComp = Param_SplineComp;
	Parms.Param_SplineMover = Param_SplineMover;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterCamera.BP_CoasterCamera_C.UpdateCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterCamera_C::UpdateCamera(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterCamera_C", "UpdateCamera");

	Params::BP_CoasterCamera_C_UpdateCamera Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}

}

