#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CoasterSpline

#include "Basic.hpp"

#include "BP_CoasterSpline_classes.hpp"
#include "BP_CoasterSpline_parameters.hpp"


namespace SDK
{

// Function BP_CoasterSpline.BP_CoasterSpline_C.ExecuteUbergraph_BP_CoasterSpline
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::ExecuteUbergraph_BP_CoasterSpline(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ExecuteUbergraph_BP_CoasterSpline");

	Params::BP_CoasterSpline_C_ExecuteUbergraph_BP_CoasterSpline Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.OnEndFadeOut_ForSkip
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::OnEndFadeOut_ForSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "OnEndFadeOut_ForSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.MovePlayerEventTrigger
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::MovePlayerEventTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "MovePlayerEventTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.ProcSkip
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::ProcSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ProcSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.BPI_UpdateCoasterFlag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::BPI_UpdateCoasterFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "BPI_UpdateCoasterFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.OnEvtDis_MapStart
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::OnEvtDis_MapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "OnEvtDis_MapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CoasterSpline_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.Stop_PlayerStartPositionSetting
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::Stop_PlayerStartPositionSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "Stop_PlayerStartPositionSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.PlayerStartPositionSetting
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::PlayerStartPositionSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "PlayerStartPositionSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C._EndActiveSpline_OUT
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::_EndActiveSpline_OUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "_EndActiveSpline_OUT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.EvtDis_EndActiveSpline_IN
// (BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::EvtDis_EndActiveSpline_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "EvtDis_EndActiveSpline_IN");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.EvtDis_Stop_
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CharaSplineMover_C*          ThisComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::EvtDis_Stop_(class UBPC_CharaSplineMover_C* ThisComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "EvtDis_Stop_");

	Params::BP_CoasterSpline_C_EvtDis_Stop_ Parms{};

	Parms.ThisComponent = ThisComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.OnArriveSplineEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CharaSplineMover_C*          ThisComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::OnArriveSplineEnd(class UBPC_CharaSplineMover_C* ThisComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "OnArriveSplineEnd");

	Params::BP_CoasterSpline_C_OnArriveSplineEnd Parms{};

	Parms.ThisComponent = ThisComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.TimeLine_RideCamera__UpdateFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::TimeLine_RideCamera__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "TimeLine_RideCamera__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.TimeLine_RideCamera__FinishedFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::TimeLine_RideCamera__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "TimeLine_RideCamera__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.찏鉅법_1__UpdateFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::_______1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "찏鉅법_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.찏鉅법_1__FinishedFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::_______1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "찏鉅법_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.찏鉅법_0__UpdateFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::_______0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "찏鉅법_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.찏鉅법_0__FinishedFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::_______0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "찏鉅법_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.Timeline_ShowSpline__UpdateFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::Timeline_ShowSpline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "Timeline_ShowSpline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.Timeline_ShowSpline__FinishedFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::Timeline_ShowSpline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "Timeline_ShowSpline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.Timeline_ActiveSpline__UpdateFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::Timeline_ActiveSpline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "Timeline_ActiveSpline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.Timeline_ActiveSpline__FinishedFunc
// (BlueprintEvent)

void ABP_CoasterSpline_C::Timeline_ActiveSpline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "Timeline_ActiveSpline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetSplineMeshs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USplineMeshComponent*>     Param_SplineMeshs                                      (Parm, OutParm, ContainsInstancedReference)

void ABP_CoasterSpline_C::GetSplineMeshs(TArray<class USplineMeshComponent*>* Param_SplineMeshs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetSplineMeshs");

	Params::BP_CoasterSpline_C_GetSplineMeshs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SplineMeshs != nullptr)
		*Param_SplineMeshs = std::move(Parms.Param_SplineMeshs);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetSplineUpVec
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          UpVec                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetSplineUpVec(float Distance, struct FVector* UpVec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetSplineUpVec");

	Params::BP_CoasterSpline_C_GetSplineUpVec Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	if (UpVec != nullptr)
		*UpVec = std::move(Parms.UpVec);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetSplineForward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reverse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Forward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetSplineForward(float Distance, bool Reverse, struct FVector* Forward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetSplineForward");

	Params::BP_CoasterSpline_C_GetSplineForward Parms{};

	Parms.Distance = Distance;
	Parms.Reverse = Reverse;

	UObject::ProcessEvent(Func, &Parms);

	if (Forward != nullptr)
		*Forward = std::move(Parms.Forward);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcPlayerCameraRot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Param_PrevCameraRot                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         PrevPlayerRot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         NextPlayerRot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         NextPlayerCameraRot                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::CalcPlayerCameraRot(const struct FRotator& Param_PrevCameraRot, const struct FRotator& PrevPlayerRot, const struct FRotator& NextPlayerRot, struct FRotator* NextPlayerCameraRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcPlayerCameraRot");

	Params::BP_CoasterSpline_C_CalcPlayerCameraRot Parms{};

	Parms.Param_PrevCameraRot = std::move(Param_PrevCameraRot);
	Parms.PrevPlayerRot = std::move(PrevPlayerRot);
	Parms.NextPlayerRot = std::move(NextPlayerRot);

	UObject::ProcessEvent(Func, &Parms);

	if (NextPlayerCameraRot != nullptr)
		*NextPlayerCameraRot = std::move(Parms.NextPlayerCameraRot);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.MakeDMI
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::MakeDMI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "MakeDMI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcAddSplinePoint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::CalcAddSplinePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcAddSplinePoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcSplineForMove
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::CalcSplineForMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcSplineForMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Param_Spline                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetSpline(class USplineComponent** Param_Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetSpline");

	Params::BP_CoasterSpline_C_GetSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Spline != nullptr)
		*Param_Spline = Parms.Param_Spline;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcSaveID
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::CalcSaveID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcSaveID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetGlobalSaveID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SaveId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetGlobalSaveID(int32* SaveId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetGlobalSaveID");

	Params::BP_CoasterSpline_C_GetGlobalSaveID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SaveId != nullptr)
		*SaveId = Parms.SaveId;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcCoasterCameraPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   FOV                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::CalcCoasterCameraPos(struct FVector* Location, struct FRotator* Rotate, float* FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcCoasterCameraPos");

	Params::BP_CoasterSpline_C_CalcCoasterCameraPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotate != nullptr)
		*Rotate = std::move(Parms.Rotate);

	if (FOV != nullptr)
		*FOV = Parms.FOV;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.DebugOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::DebugOpen(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "DebugOpen");

	Params::BP_CoasterSpline_C_DebugOpen Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetNaviComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UActorComponent*                  Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetNaviComponent(bool* Valid, class UActorComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetNaviComponent");

	Params::BP_CoasterSpline_C_GetNaviComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.TraseGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::TraseGround(const struct FVector& Pos, struct FVector* OutPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "TraseGround");

	Params::BP_CoasterSpline_C_TraseGround Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutPos != nullptr)
		*OutPos = std::move(Parms.OutPos);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.BPI_GetGlobalSaveID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SaveId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::BPI_GetGlobalSaveID(int32* SaveId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "BPI_GetGlobalSaveID");

	Params::BP_CoasterSpline_C_BPI_GetGlobalSaveID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SaveId != nullptr)
		*SaveId = Parms.SaveId;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.BPI_GetIsOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StartGimmickOpen                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    EndGimmickOpen                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::BPI_GetIsOpen(bool* StartGimmickOpen, bool* EndGimmickOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "BPI_GetIsOpen");

	Params::BP_CoasterSpline_C_BPI_GetIsOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartGimmickOpen != nullptr)
		*StartGimmickOpen = Parms.StartGimmickOpen;

	if (EndGimmickOpen != nullptr)
		*EndGimmickOpen = Parms.EndGimmickOpen;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.ShowSpline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::ShowSpline(bool Show, bool Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ShowSpline");

	Params::BP_CoasterSpline_C_ShowSpline Parms{};

	Parms.Show = Show;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.ActiveSplineAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::ActiveSplineAnim(bool Active, bool Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ActiveSplineAnim");

	Params::BP_CoasterSpline_C_ActiveSplineAnim Parms{};

	Parms.Active = Active;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.MoveSpline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_FromStartGimmick                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::MoveSpline(bool Param_FromStartGimmick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "MoveSpline");

	Params::BP_CoasterSpline_C_MoveSpline Parms{};

	Parms.Param_FromStartGimmick = Param_FromStartGimmick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.SetOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Param_StartGimmick                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Param_EndGimmick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UpdateIcon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UpdateNaviDeactive                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UpdateChain                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CoasterSpline_C::SetOpen(bool Open, bool Param_StartGimmick, bool Param_EndGimmick, bool UpdateIcon, bool UpdateNaviDeactive, bool UpdateChain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "SetOpen");

	Params::BP_CoasterSpline_C_SetOpen Parms{};

	Parms.Open = Open;
	Parms.Param_StartGimmick = Param_StartGimmick;
	Parms.Param_EndGimmick = Param_EndGimmick;
	Parms.UpdateIcon = UpdateIcon;
	Parms.UpdateNaviDeactive = UpdateNaviDeactive;
	Parms.UpdateChain = UpdateChain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetStartGimmick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetStartGimmick(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetStartGimmick");

	Params::BP_CoasterSpline_C_GetStartGimmick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.GetEndGimmick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CoasterSpline_C::GetEndGimmick(class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "GetEndGimmick");

	Params::BP_CoasterSpline_C_GetEndGimmick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.CalcOpen
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::CalcOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "CalcOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CoasterSpline.BP_CoasterSpline_C.ChainOpen
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CoasterSpline_C::ChainOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CoasterSpline_C", "ChainOpen");

	UObject::ProcessEvent(Func, nullptr);
}

}

