#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerManager

#include "Basic.hpp"

#include "BPI_PlayerManager_classes.hpp"
#include "BPI_PlayerManager_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_SetGamePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APawn*>                    In                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_PlayerManager_C::BPI_SetGamePlayer(const TArray<class APawn*>& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_SetGamePlayer");

	Params::BPI_PlayerManager_C_BPI_SetGamePlayer Parms{};

	Parms.In = std::move(In);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_GetGamePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APawn*>                    List                                                   (Parm, OutParm)

void IBPI_PlayerManager_C::BPI_GetGamePlayer(TArray<class APawn*>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_GetGamePlayer");

	Params::BPI_PlayerManager_C_BPI_GetGamePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_SetDeactiveLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void IBPI_PlayerManager_C::BPI_SetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, const struct FTransform& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_SetDeactiveLocation");

	Params::BPI_PlayerManager_C_BPI_SetDeactiveLocation Parms{};

	Parms.PlayerType = PlayerType;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_GetDeactiveLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor)

void IBPI_PlayerManager_C::BPI_GetDeactiveLocation(E_PLAYER_MANAGER_TYPE PlayerType, struct FTransform* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_GetDeactiveLocation");

	Params::BPI_PlayerManager_C_BPI_GetDeactiveLocation Parms{};

	Parms.PlayerType = PlayerType;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_SetActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerManager_C::BPI_SetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_SetActive");

	Params::BPI_PlayerManager_C_BPI_SetActive Parms{};

	Parms.PlayerType = PlayerType;
	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_GetActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PLAYER_MANAGER_TYPE                   PlayerType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerManager_C::BPI_GetActive(E_PLAYER_MANAGER_TYPE PlayerType, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_GetActive");

	Params::BPI_PlayerManager_C_BPI_GetActive Parms{};

	Parms.PlayerType = PlayerType;

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_GetContlrolActivePawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerBase_C*                    Pawn                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PLAYER_MANAGER_TYPE                   Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerManager_C::BPI_GetContlrolActivePawn(class APlayerBase_C** Pawn, E_PLAYER_MANAGER_TYPE* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_GetContlrolActivePawn");

	Params::BPI_PlayerManager_C_BPI_GetContlrolActivePawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pawn != nullptr)
		*Pawn = Parms.Pawn;

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_PlayerManager.BPI_PlayerManager_C.BPI_SetContlrolActivePawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerBase_C*                    Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PLAYER_MANAGER_TYPE                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerManager_C::BPI_SetContlrolActivePawn(class APlayerBase_C* Pawn, E_PLAYER_MANAGER_TYPE Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerManager_C", "BPI_SetContlrolActivePawn");

	Params::BPI_PlayerManager_C_BPI_SetContlrolActivePawn Parms{};

	Parms.Pawn = Pawn;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}

}

