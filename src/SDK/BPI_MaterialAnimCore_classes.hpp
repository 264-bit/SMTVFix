#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MaterialAnimCore

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_MaterialAnimCore.BPI_MaterialAnimCore_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_MaterialAnimCore_C final : public IInterface
{
public:
	void BI_SetScalarParam(const TArray<class FName>& ParamNames, const float Val, bool* NoUse);
	void BI_ResetScalarParam(const TArray<class FName>& ParamNmaes, bool* NoUse);
	void BI_SetVectorParam(const TArray<class FName>& ParamNames, const struct FLinearColor& Val, bool* NoUse);
	void BI_SetScalarParamByArray(const TArray<class UMaterialInstanceDynamic*>& Materials, const TArray<class FName>& ParamNames, const float Val, bool* NoUse);
	void BI_SetVectorParamByArray(const TArray<class UMaterialInstanceDynamic*>& Materials, const TArray<class FName>& ParamNames, const struct FLinearColor& Val, bool* NoUse);
	void BI_OutLineSwitch(bool Value, bool* NoUse);
	void BI_SelectFresnelSwitch(bool Value, bool* NoUse);
	void BI_SelectSwitch(const bool Value, bool* NoUse);
	void BI_GetAllMID(TArray<class UMaterialInstanceDynamic*>* Mid);
	void BI_ToggleDitherEnable(bool* NoUse);
	void BI_IsDitherEnable(bool* IsEnable);
	void BI_SetDitherEnable(bool IsEnable, bool* NoUse);
	void BI_SetDitherDistance(float Distance, float InterpSec, bool* NoUse);
	void BI_ResetDitherDistance(float InterpSec, bool* NoUse);
	void BI_UpdateDither(float DeltaTime, float* CurrentDitherRate);
	void BI_SetDitherRate(float Rate, float InterpSec, bool* NoUse);
	void BI_ResetDitherRate(float InterpSec, bool* NoUse);
	void BI_RetrieveMIDs(const TArray<int32>& ElementNo, TArray<class UMaterialInstanceDynamic*>* Materials);
	void BI_CalcMaterialAnimSettingSec(const TArray<struct FMaterialAnimSetting_T>& MaterialAnimSettings, float* Sec);
	void BI_InitializeMaterial(class UMeshComponent* Mesh, bool* NoUse);
	void BI_GetDitherRate(float* DitherRate);
	void BI_GetDitherDistance(float* DitherDistance);
	void BI_MultiMeshInitializeMaterial(const TArray<class UMeshComponent*>& Meshes, bool* NoUse);
	void BI_ResetAllParam(bool* NoUse);
	void BI_AddMaterial(class UMeshComponent* MeshComponent, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_MaterialAnimCore_C">();
	}
	static class IBPI_MaterialAnimCore_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_MaterialAnimCore_C>();
	}
};
static_assert(alignof(IBPI_MaterialAnimCore_C) == 0x000008, "Wrong alignment on IBPI_MaterialAnimCore_C");
static_assert(sizeof(IBPI_MaterialAnimCore_C) == 0x000028, "Wrong size on IBPI_MaterialAnimCore_C");

}

