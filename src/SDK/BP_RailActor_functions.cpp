#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RailActor

#include "Basic.hpp"

#include "BP_RailActor_classes.hpp"
#include "BP_RailActor_parameters.hpp"


namespace SDK
{

// Function BP_RailActor.BP_RailActor_C.ExecuteUbergraph_BP_RailActor
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RailActor_C::ExecuteUbergraph_BP_RailActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "ExecuteUbergraph_BP_RailActor");

	Params::BP_RailActor_C_ExecuteUbergraph_BP_RailActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailActor.BP_RailActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RailActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailActor.BP_RailActor_C.Reset Transform
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RailActor_C::Reset_Transform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "Reset Transform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailActor.BP_RailActor_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RailActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailActor.BP_RailActor_C.GetCurrentLocationAndRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          RetLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RetDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RetRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::GetCurrentLocationAndRotation(float Length, bool Loop, struct FVector* RetLocation, struct FVector* RetDirection, struct FRotator* RetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetCurrentLocationAndRotation");

	Params::BP_RailActor_C_GetCurrentLocationAndRotation Parms{};

	Parms.Length = Length;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);

	if (RetLocation != nullptr)
		*RetLocation = std::move(Parms.RetLocation);

	if (RetDirection != nullptr)
		*RetDirection = std::move(Parms.RetDirection);

	if (RetRotation != nullptr)
		*RetRotation = std::move(Parms.RetRotation);
}


// Function BP_RailActor.BP_RailActor_C.IsArrived
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::IsArrived(float Length, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "IsArrived");

	Params::BP_RailActor_C_IsArrived Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BP_RailActor.BP_RailActor_C.DbgPrintSplinePoint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RailActor_C::DbgPrintSplinePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "DbgPrintSplinePoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailActor.BP_RailActor_C.GetPlayInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRigRailPlayInfo                 Param_M_PlayInfo                                       (Parm, OutParm, NoDestructor)

void ABP_RailActor_C::GetPlayInfo(struct FRigRailPlayInfo* Param_M_PlayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetPlayInfo");

	Params::BP_RailActor_C_GetPlayInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_M_PlayInfo != nullptr)
		*Param_M_PlayInfo = std::move(Parms.Param_M_PlayInfo);
}


// Function BP_RailActor.BP_RailActor_C.GetSplinePointNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RailActor_C::GetSplinePointNum(int32* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetSplinePointNum");

	Params::BP_RailActor_C_GetSplinePointNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BP_RailActor.BP_RailActor_C.GetCameraSideType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_CAMERA_SIDE_BF_TYPE                   BF_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CAMERA_SIDE_LR_TYPE                   LR_Type                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RailActor_C::GetCameraSideType(E_CAMERA_SIDE_BF_TYPE* BF_Type, E_CAMERA_SIDE_LR_TYPE* LR_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetCameraSideType");

	Params::BP_RailActor_C_GetCameraSideType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BF_Type != nullptr)
		*BF_Type = Parms.BF_Type;

	if (LR_Type != nullptr)
		*LR_Type = Parms.LR_Type;
}


// Function BP_RailActor.BP_RailActor_C.SetPlayRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RailActor_C::SetPlayRate(float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "SetPlayRate");

	Params::BP_RailActor_C_SetPlayRate Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailActor.BP_RailActor_C.GetPlayRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RailActor_C::GetPlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetPlayRate");

	Params::BP_RailActor_C_GetPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function BP_RailActor.BP_RailActor_C.ResetTransformImpl
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RailActor_C::ResetTransformImpl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "ResetTransformImpl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailActor.BP_RailActor_C.AttachToSpringArm
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SpringArmName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAttached                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::AttachToSpringArm(class AActor* Target, class FName SpringArmName, bool* IsAttached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "AttachToSpringArm");

	Params::BP_RailActor_C_AttachToSpringArm Parms{};

	Parms.Target = Target;
	Parms.SpringArmName = SpringArmName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAttached != nullptr)
		*IsAttached = Parms.IsAttached;
}


// Function BP_RailActor.BP_RailActor_C.GetCamFactory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IBPI_BattleCamActorFactory_C>Factory                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::GetCamFactory(TScriptInterface<class IBPI_BattleCamActorFactory_C>* Factory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "GetCamFactory");

	Params::BP_RailActor_C_GetCamFactory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Factory != nullptr)
		*Factory = Parms.Factory;
}


// Function BP_RailActor.BP_RailActor_C.SetCamFactory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_BattleCamActorFactory_C>Factory                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::SetCamFactory(TScriptInterface<class IBPI_BattleCamActorFactory_C> Factory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "SetCamFactory");

	Params::BP_RailActor_C_SetCamFactory Parms{};

	Parms.Factory = Factory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailActor.BP_RailActor_C.SetCommandCamInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CommandTargetIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSelectingTarget                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::SetCommandCamInfo(int32 CommandTargetIndex, int32 SelectedIndex, E_SKILL_TARGET TargetType, bool IsSelectingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "SetCommandCamInfo");

	Params::BP_RailActor_C_SetCommandCamInfo Parms{};

	Parms.CommandTargetIndex = CommandTargetIndex;
	Parms.SelectedIndex = SelectedIndex;
	Parms.TargetType = TargetType;
	Parms.IsSelectingTarget = IsSelectingTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailActor.BP_RailActor_C.IsSameCommandCamInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   CommandTargetIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_SKILL_TARGET                          TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSeletingTarget                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSame                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::IsSameCommandCamInfo(int32 CommandTargetIndex, int32 SelectedIndex, E_SKILL_TARGET TargetType, bool IsSeletingTarget, bool* IsSame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "IsSameCommandCamInfo");

	Params::BP_RailActor_C_IsSameCommandCamInfo Parms{};

	Parms.CommandTargetIndex = CommandTargetIndex;
	Parms.SelectedIndex = SelectedIndex;
	Parms.TargetType = TargetType;
	Parms.IsSeletingTarget = IsSeletingTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSame != nullptr)
		*IsSame = Parms.IsSame;
}


// Function BP_RailActor.BP_RailActor_C.IsAttachToSpringArm
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsAttached                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RailActor_C::IsAttachToSpringArm(bool* IsAttached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "IsAttachToSpringArm");

	Params::BP_RailActor_C_IsAttachToSpringArm Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAttached != nullptr)
		*IsAttached = Parms.IsAttached;
}


// Function BP_RailActor.BP_RailActor_C.DetachToSpringArm
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RailActor_C::DetachToSpringArm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailActor_C", "DetachToSpringArm");

	UObject::ProcessEvent(Func, nullptr);
}

}

