#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MoonAgeCtrl

#include "Basic.hpp"

#include "E_MoonAgeAnimationState_structs.hpp"
#include "Project_structs.hpp"


namespace SDK::Params
{

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_OpenMoonAge
// 0x0001 (0x0001 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_OpenMoonAge final
{
public:
	bool                                          InAnimation;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_OpenMoonAge) == 0x000001, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_OpenMoonAge");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_OpenMoonAge) == 0x000001, "Wrong size on BPI_MoonAgeCtrl_C_BPI_OpenMoonAge");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_OpenMoonAge, InAnimation) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_OpenMoonAge::InAnimation' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_CloseMoonAge
// 0x0001 (0x0001 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_CloseMoonAge final
{
public:
	bool                                          InAnimation;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_CloseMoonAge) == 0x000001, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_CloseMoonAge");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_CloseMoonAge) == 0x000001, "Wrong size on BPI_MoonAgeCtrl_C_BPI_CloseMoonAge");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_CloseMoonAge, InAnimation) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_CloseMoonAge::InAnimation' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_SetMoonAge
// 0x0001 (0x0001 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_SetMoonAge final
{
public:
	E_MOON_AGE                                    InMoonType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_SetMoonAge) == 0x000001, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_SetMoonAge");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_SetMoonAge) == 0x000001, "Wrong size on BPI_MoonAgeCtrl_C_BPI_SetMoonAge");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_SetMoonAge, InMoonType) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_SetMoonAge::InMoonType' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_AddPlayerMoveCount_Normal
// 0x0004 (0x0004 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal final
{
public:
	float                                         InDeltaSeconds;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal) == 0x000004, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal) == 0x000004, "Wrong size on BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal, InDeltaSeconds) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_Normal::InDeltaSeconds' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_AddPlayerMoveCount_TokyoLargeMap
// 0x0004 (0x0004 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap final
{
public:
	float                                         InDeltaSeconds;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap) == 0x000004, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap) == 0x000004, "Wrong size on BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap, InDeltaSeconds) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_AddPlayerMoveCount_TokyoLargeMap::InDeltaSeconds' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_SetMoonAgeCntUpdateTime
// 0x0004 (0x0004 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime final
{
public:
	float                                         InSecond;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime) == 0x000004, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime) == 0x000004, "Wrong size on BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime, InSecond) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_SetMoonAgeCntUpdateTime::InSecond' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_GetMoonAgeCntUpdateTime
// 0x0004 (0x0004 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime final
{
public:
	float                                         CounterUpdateTime;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime) == 0x000004, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime) == 0x000004, "Wrong size on BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime, CounterUpdateTime) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_GetMoonAgeCntUpdateTime::CounterUpdateTime' has a wrong offset!");

// Function BPI_MoonAgeCtrl.BPI_MoonAgeCtrl_C.BPI_GetMoonAgeAnimState
// 0x0001 (0x0001 - 0x0000)
struct BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState final
{
public:
	E_MoonAgeAnimationState                       OutState;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState) == 0x000001, "Wrong alignment on BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState");
static_assert(sizeof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState) == 0x000001, "Wrong size on BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState");
static_assert(offsetof(BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState, OutState) == 0x000000, "Member 'BPI_MoonAgeCtrl_C_BPI_GetMoonAgeAnimState::OutState' has a wrong offset!");

}

