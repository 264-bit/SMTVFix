#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EventCameraBlend

#include "Basic.hpp"

#include "BP_EventCameraBlend_classes.hpp"
#include "BP_EventCameraBlend_parameters.hpp"


namespace SDK
{

// Function BP_EventCameraBlend.BP_EventCameraBlend_C.ExecuteUbergraph_BP_EventCameraBlend
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventCameraBlend_C::ExecuteUbergraph_BP_EventCameraBlend(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventCameraBlend_C", "ExecuteUbergraph_BP_EventCameraBlend");

	Params::BP_EventCameraBlend_C_ExecuteUbergraph_BP_EventCameraBlend Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventCameraBlend.BP_EventCameraBlend_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventCameraBlend_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventCameraBlend_C", "ReceiveTick");

	Params::BP_EventCameraBlend_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventCameraBlend.BP_EventCameraBlend_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_EventCameraBlend_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventCameraBlend_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EventCameraBlend.BP_EventCameraBlend_C.SetCameraBlend
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EViewTargetBlendFunction                BlendFunc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CheckPrevBlend                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_EventCameraBlend_C::SetCameraBlend(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool CheckPrevBlend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventCameraBlend_C", "SetCameraBlend");

	Params::BP_EventCameraBlend_C_SetCameraBlend Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.CheckPrevBlend = CheckPrevBlend;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EventCameraBlend.BP_EventCameraBlend_C.SetCameraChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_EventCameraBlend_C::SetCameraChange(class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EventCameraBlend_C", "SetCameraChange");

	Params::BP_EventCameraBlend_C_SetCameraChange Parms{};

	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}

}

