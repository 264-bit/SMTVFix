#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GardenManager

#include "Basic.hpp"

#include "BPI_GardenManager_classes.hpp"
#include "BPI_GardenManager_parameters.hpp"


namespace SDK
{

// Function BPI_GardenManager.BPI_GardenManager_C.StartGardenDevilTalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DevilChara                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_CHARA_MOTION_ID                       IdleMotionID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHitoshura                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::StartGardenDevilTalk(class AActor* DevilChara, int32 DevilID, E_CHARA_MOTION_ID IdleMotionID, bool IsHitoshura)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "StartGardenDevilTalk");

	Params::BPI_GardenManager_C_StartGardenDevilTalk Parms{};

	Parms.DevilChara = DevilChara;
	Parms.DevilID = DevilID;
	Parms.IdleMotionID = IdleMotionID;
	Parms.IsHitoshura = IsHitoshura;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.StartGardenResult
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGardenResultData                GardenResultData                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_GardenManager_C::StartGardenResult(const struct FGardenResultData& GardenResultData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "StartGardenResult");

	Params::BPI_GardenManager_C_StartGardenResult Parms{};

	Parms.GardenResultData = std::move(GardenResultData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenResultFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsResultFinished                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckGardenResultFinished(bool* IsResultFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckGardenResultFinished");

	Params::BPI_GardenManager_C_CheckGardenResultFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsResultFinished != nullptr)
		*IsResultFinished = Parms.IsResultFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.EndGardenDevilTalk
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::EndGardenDevilTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "EndGardenDevilTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenMoveFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMoveFinished                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckGardenMoveFinished(bool* IsMoveFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckGardenMoveFinished");

	Params::BPI_GardenManager_C_CheckGardenMoveFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMoveFinished != nullptr)
		*IsMoveFinished = Parms.IsMoveFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.Set Visibility Garden Devils
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ExcludedDevilID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::Set_Visibility_Garden_Devils(bool Visibility, int32 ExcludedDevilID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "Set Visibility Garden Devils");

	Params::BPI_GardenManager_C_Set_Visibility_Garden_Devils Parms{};

	Parms.Visibility = Visibility;
	Parms.ExcludedDevilID = ExcludedDevilID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.RespawnGardenDevils
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ExcludedDevilID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::RespawnGardenDevils(int32 ExcludedDevilID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "RespawnGardenDevils");

	Params::BPI_GardenManager_C_RespawnGardenDevils Parms{};

	Parms.ExcludedDevilID = ExcludedDevilID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckValidGardenQuest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckValidGardenQuest(int32 DevilID, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckValidGardenQuest");

	Params::BPI_GardenManager_C_CheckValidGardenQuest Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_GardenManager.BPI_GardenManager_C.SpawnGardenQuestSubLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           QuestDevil                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnSuccess                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SpawnGardenQuestSubLevel(int32 DevilID, class AActor* QuestDevil, bool* SpawnSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SpawnGardenQuestSubLevel");

	Params::BPI_GardenManager_C_SpawnGardenQuestSubLevel Parms{};

	Parms.DevilID = DevilID;
	Parms.QuestDevil = QuestDevil;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnSuccess != nullptr)
		*SpawnSuccess = Parms.SpawnSuccess;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenQuestFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsQuestFinished                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckGardenQuestFinished(bool* IsQuestFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckGardenQuestFinished");

	Params::BPI_GardenManager_C_CheckGardenQuestFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsQuestFinished != nullptr)
		*IsQuestFinished = Parms.IsQuestFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckGardenQuestAccepted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsQuestAccepted                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckGardenQuestAccepted(bool* IsQuestAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckGardenQuestAccepted");

	Params::BPI_GardenManager_C_CheckGardenQuestAccepted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsQuestAccepted != nullptr)
		*IsQuestAccepted = Parms.IsQuestAccepted;
}


// Function BPI_GardenManager.BPI_GardenManager_C.DespawnGardenQuestSublevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UnloadSuccess                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::DespawnGardenQuestSublevel(bool* UnloadSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "DespawnGardenQuestSublevel");

	Params::BPI_GardenManager_C_DespawnGardenQuestSublevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UnloadSuccess != nullptr)
		*UnloadSuccess = Parms.UnloadSuccess;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckDespawnGardenQuestFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDespawnFinished                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckDespawnGardenQuestFinished(bool* IsDespawnFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckDespawnGardenQuestFinished");

	Params::BPI_GardenManager_C_CheckDespawnGardenQuestFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDespawnFinished != nullptr)
		*IsDespawnFinished = Parms.IsDespawnFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckValidTributeTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckValidTributeTarget(bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckValidTributeTarget");

	Params::BPI_GardenManager_C_CheckValidTributeTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetGardenTributeTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TributeTarget                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::SetGardenTributeTarget(const class AActor* TributeTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetGardenTributeTarget");

	Params::BPI_GardenManager_C_SetGardenTributeTarget Parms{};

	Parms.TributeTarget = TributeTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.TryActivateTribute
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::TryActivateTribute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "TryActivateTribute");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.EnableFreeCamera
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::EnableFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "EnableFreeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.IsFreeCameraCollisionSwitchFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::IsFreeCameraCollisionSwitchFinished(bool* IsFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "IsFreeCameraCollisionSwitchFinished");

	Params::BPI_GardenManager_C_IsFreeCameraCollisionSwitchFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetFreeCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFreeCameraMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetFreeCameraMode(bool IsFreeCameraMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetFreeCameraMode");

	Params::BPI_GardenManager_C_SetFreeCameraMode Parms{};

	Parms.IsFreeCameraMode = IsFreeCameraMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetUsedSPTList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGardenSPTData>           New_SPTData                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetUsedSPTList(TArray<struct FGardenSPTData>& New_SPTData, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetUsedSPTList");

	Params::BPI_GardenManager_C_SetUsedSPTList Parms{};

	Parms.New_SPTData = std::move(New_SPTData);

	UObject::ProcessEvent(Func, &Parms);

	New_SPTData = std::move(Parms.New_SPTData);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetUsedSPTList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGardenSPTData>           UsedSPTDataList                                        (Parm, OutParm)

void IBPI_GardenManager_C::GetUsedSPTList(TArray<struct FGardenSPTData>* UsedSPTDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetUsedSPTList");

	Params::BPI_GardenManager_C_GetUsedSPTList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UsedSPTDataList != nullptr)
		*UsedSPTDataList = std::move(Parms.UsedSPTDataList);
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetMessageTalkFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TALK_TONE_TYPE                        SpeechType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GARDEN_MSG_USE_TYPE                   ChatMsgType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChatMsgIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetMessageTalkFlag(E_TALK_TONE_TYPE SpeechType, E_GARDEN_MSG_USE_TYPE ChatMsgType, int32 DevilID, int32 ChatMsgIndex, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetMessageTalkFlag");

	Params::BPI_GardenManager_C_SetMessageTalkFlag Parms{};

	Parms.SpeechType = SpeechType;
	Parms.ChatMsgType = ChatMsgType;
	Parms.DevilID = DevilID;
	Parms.ChatMsgIndex = ChatMsgIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckReplacementCharaID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReplacementID                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasReplacement                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckReplacementCharaID(int32 DevilID, int32* ReplacementID, bool* HasReplacement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckReplacementCharaID");

	Params::BPI_GardenManager_C_CheckReplacementCharaID Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (ReplacementID != nullptr)
		*ReplacementID = Parms.ReplacementID;

	if (HasReplacement != nullptr)
		*HasReplacement = Parms.HasReplacement;
}


// Function BPI_GardenManager.BPI_GardenManager_C.PlayWalkingMotion
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::PlayWalkingMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "PlayWalkingMotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetVisibilityPlayerTalkGodray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetVisibilityPlayerTalkGodray(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetVisibilityPlayerTalkGodray");

	Params::BPI_GardenManager_C_SetVisibilityPlayerTalkGodray Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.StartPlayerTalkTutorial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           GardenPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::StartPlayerTalkTutorial(class AActor* GardenPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "StartPlayerTalkTutorial");

	Params::BPI_GardenManager_C_StartPlayerTalkTutorial Parms{};

	Parms.GardenPlayer = GardenPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GardenManager.BPI_GardenManager_C.IsPlayerTalkFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::IsPlayerTalkFinished(bool* IsFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "IsPlayerTalkFinished");

	Params::BPI_GardenManager_C_IsPlayerTalkFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}


// Function BPI_GardenManager.BPI_GardenManager_C.UpdatePlayerMapIcon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::UpdatePlayerMapIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "UpdatePlayerMapIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.NeedsCollisionAdjust
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NeedsAdjust                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_GARDEN_FC_DEVIL_COL_TYPE              AdjustType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::NeedsCollisionAdjust(int32 DevilID, bool* NeedsAdjust, E_GARDEN_FC_DEVIL_COL_TYPE* AdjustType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "NeedsCollisionAdjust");

	Params::BPI_GardenManager_C_NeedsCollisionAdjust Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (NeedsAdjust != nullptr)
		*NeedsAdjust = Parms.NeedsAdjust;

	if (AdjustType != nullptr)
		*AdjustType = Parms.AdjustType;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetAdjustRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::GetAdjustRate(int32 DevilID, float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetAdjustRate");

	Params::BPI_GardenManager_C_GetAdjustRate Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetFreeCameraPawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASpectatorPawn*                   FC_Pawn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::GetFreeCameraPawn(class ASpectatorPawn** FC_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetFreeCameraPawn");

	Params::BPI_GardenManager_C_GetFreeCameraPawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FC_Pawn != nullptr)
		*FC_Pawn = Parms.FC_Pawn;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetFreeCameraMS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Default_Camera_Movement_Speed                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Dash_Camera_Movement_Speed                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sneak_Camera_Movement_Speed                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Default_Turn_Input_Scale                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Dash_Turn_Input_Scale                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sneak_Turn_Input_Scale                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Mouse_Turn_Input_Max                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::GetFreeCameraMS(float* Default_Camera_Movement_Speed, float* Dash_Camera_Movement_Speed, float* Sneak_Camera_Movement_Speed, float* Default_Turn_Input_Scale, float* Dash_Turn_Input_Scale, float* Sneak_Turn_Input_Scale, float* Mouse_Turn_Input_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetFreeCameraMS");

	Params::BPI_GardenManager_C_GetFreeCameraMS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Default_Camera_Movement_Speed != nullptr)
		*Default_Camera_Movement_Speed = Parms.Default_Camera_Movement_Speed;

	if (Dash_Camera_Movement_Speed != nullptr)
		*Dash_Camera_Movement_Speed = Parms.Dash_Camera_Movement_Speed;

	if (Sneak_Camera_Movement_Speed != nullptr)
		*Sneak_Camera_Movement_Speed = Parms.Sneak_Camera_Movement_Speed;

	if (Default_Turn_Input_Scale != nullptr)
		*Default_Turn_Input_Scale = Parms.Default_Turn_Input_Scale;

	if (Dash_Turn_Input_Scale != nullptr)
		*Dash_Turn_Input_Scale = Parms.Dash_Turn_Input_Scale;

	if (Sneak_Turn_Input_Scale != nullptr)
		*Sneak_Turn_Input_Scale = Parms.Sneak_Turn_Input_Scale;

	if (Mouse_Turn_Input_Max != nullptr)
		*Mouse_Turn_Input_Max = Parms.Mouse_Turn_Input_Max;
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetFreeCameraMS
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Default_Camera_Movement_Speed                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Dash_Camera_Movement_Speed                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sneak_Camera_Movement_Speed                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Default_Turn_Input_Scale                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Dash_Turn_Input_Scale                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sneak_Turn_Input_Scale                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Mouse_Turn_Input_Max                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetFreeCameraMS(float Default_Camera_Movement_Speed, float Dash_Camera_Movement_Speed, float Sneak_Camera_Movement_Speed, float Default_Turn_Input_Scale, float Dash_Turn_Input_Scale, float Sneak_Turn_Input_Scale, float Mouse_Turn_Input_Max, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetFreeCameraMS");

	Params::BPI_GardenManager_C_SetFreeCameraMS Parms{};

	Parms.Default_Camera_Movement_Speed = Default_Camera_Movement_Speed;
	Parms.Dash_Camera_Movement_Speed = Dash_Camera_Movement_Speed;
	Parms.Sneak_Camera_Movement_Speed = Sneak_Camera_Movement_Speed;
	Parms.Default_Turn_Input_Scale = Default_Turn_Input_Scale;
	Parms.Dash_Turn_Input_Scale = Dash_Turn_Input_Scale;
	Parms.Sneak_Turn_Input_Scale = Sneak_Turn_Input_Scale;
	Parms.Mouse_Turn_Input_Max = Mouse_Turn_Input_Max;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetFCManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  FC_Manager                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GardenManager_C::GetFCManager(class UActorComponent** FC_Manager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetFCManager");

	Params::BPI_GardenManager_C_GetFCManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FC_Manager != nullptr)
		*FC_Manager = Parms.FC_Manager;
}


// Function BPI_GardenManager.BPI_GardenManager_C.RepickGardenDevils
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GardenManager_C::RepickGardenDevils()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "RepickGardenDevils");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GardenManager.BPI_GardenManager_C.SetDebugSpawnFlag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DebugSpawnOff                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::SetDebugSpawnFlag(bool DebugSpawnOff, bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "SetDebugSpawnFlag");

	Params::BPI_GardenManager_C_SetDebugSpawnFlag Parms{};

	Parms.DebugSpawnOff = DebugSpawnOff;

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GardenManager.BPI_GardenManager_C.IncrementMessageCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dummy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::IncrementMessageCheck(bool* Dummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "IncrementMessageCheck");

	Params::BPI_GardenManager_C_IncrementMessageCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dummy != nullptr)
		*Dummy = Parms.Dummy;
}


// Function BPI_GardenManager.BPI_GardenManager_C.CheckMessageLoadDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllMessageLoadDone                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::CheckMessageLoadDone(bool* AllMessageLoadDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "CheckMessageLoadDone");

	Params::BPI_GardenManager_C_CheckMessageLoadDone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllMessageLoadDone != nullptr)
		*AllMessageLoadDone = Parms.AllMessageLoadDone;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetGardenCollisionScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGardenTalkCollision             CollisionVal                                           (Parm, OutParm)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::GetGardenCollisionScale(int32 DevilID, struct FGardenTalkCollision* CollisionVal, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetGardenCollisionScale");

	Params::BPI_GardenManager_C_GetGardenCollisionScale Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (CollisionVal != nullptr)
		*CollisionVal = std::move(Parms.CollisionVal);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BPI_GardenManager.BPI_GardenManager_C.GetGardenTalkHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGardenTalkHeightOverride        CameraParam                                            (Parm, OutParm)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::GetGardenTalkHeight(int32 DevilID, struct FGardenTalkHeightOverride* CameraParam, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "GetGardenTalkHeight");

	Params::BPI_GardenManager_C_GetGardenTalkHeight Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraParam != nullptr)
		*CameraParam = std::move(Parms.CameraParam);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BPI_GardenManager.BPI_GardenManager_C.IsRespawning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RespawnFlag                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_GardenManager_C::IsRespawning(bool* RespawnFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GardenManager_C", "IsRespawning");

	Params::BPI_GardenManager_C_IsRespawning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RespawnFlag != nullptr)
		*RespawnFlag = Parms.RespawnFlag;
}

}

