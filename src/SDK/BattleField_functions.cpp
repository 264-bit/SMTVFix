#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleField

#include "Basic.hpp"

#include "BattleField_classes.hpp"
#include "BattleField_parameters.hpp"


namespace SDK
{

// Function BattleField.BattleField_C.Evt_EnemyIsReady__DelegateSignature
// (Public, Delegate, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             EnemyUnitArray                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FTransform>               EnemyPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleField_C::Evt_EnemyIsReady__DelegateSignature(TArray<class ACharaBase_C*>& EnemyUnitArray, TArray<struct FTransform>& EnemyPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "Evt_EnemyIsReady__DelegateSignature");

	Params::BattleField_C_Evt_EnemyIsReady__DelegateSignature Parms{};

	Parms.EnemyUnitArray = std::move(EnemyUnitArray);
	Parms.EnemyPos = std::move(EnemyPos);

	UObject::ProcessEvent(Func, &Parms);

	EnemyUnitArray = std::move(Parms.EnemyUnitArray);
	EnemyPos = std::move(Parms.EnemyPos);
}


// Function BattleField.BattleField_C.Evt_PlayerIsReady__DelegateSignature
// (Public, Delegate, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             PlayerUnitArray                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleField_C::Evt_PlayerIsReady__DelegateSignature(TArray<class ACharaBase_C*>& PlayerUnitArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "Evt_PlayerIsReady__DelegateSignature");

	Params::BattleField_C_Evt_PlayerIsReady__DelegateSignature Parms{};

	Parms.PlayerUnitArray = std::move(PlayerUnitArray);

	UObject::ProcessEvent(Func, &Parms);

	PlayerUnitArray = std::move(Parms.PlayerUnitArray);
}


// Function BattleField.BattleField_C.ExecuteUbergraph_BattleField
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleField_C::ExecuteUbergraph_BattleField(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "ExecuteUbergraph_BattleField");

	Params::BattleField_C_ExecuteUbergraph_BattleField Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleField.BattleField_C.PrepareRenzokuBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EncountID                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<int32>                           EnemyIds                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    OnlyApplyEncountPostData                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::PrepareRenzokuBattle(int32 EncountID, bool IsEvent, const TArray<int32>& EnemyIds, bool OnlyApplyEncountPostData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "PrepareRenzokuBattle");

	Params::BattleField_C_PrepareRenzokuBattle Parms{};

	Parms.EncountID = EncountID;
	Parms.IsEvent = IsEvent;
	Parms.EnemyIds = std::move(EnemyIds);
	Parms.OnlyApplyEncountPostData = OnlyApplyEncountPostData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleField.BattleField_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABattleField_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleField.BattleField_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABattleField_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleField.BattleField_C.ApplyEncount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABattleField_C::ApplyEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "ApplyEncount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattleField.BattleField_C.MakeEnemySide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharaBase_C*                     SymbolActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ACharaBase_C*>             AroundDevil                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>                           SpawnIDList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsRenzokuEncount                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::MakeEnemySide(class ACharaBase_C* SymbolActor, TArray<class ACharaBase_C*>& AroundDevil, TArray<int32>& SpawnIDList, bool IsRenzokuEncount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "MakeEnemySide");

	Params::BattleField_C_MakeEnemySide Parms{};

	Parms.SymbolActor = SymbolActor;
	Parms.AroundDevil = std::move(AroundDevil);
	Parms.SpawnIDList = std::move(SpawnIDList);
	Parms.IsRenzokuEncount = IsRenzokuEncount;

	UObject::ProcessEvent(Func, &Parms);

	AroundDevil = std::move(Parms.AroundDevil);
	SpawnIDList = std::move(Parms.SpawnIDList);
}


// Function BattleField.BattleField_C.MakePlayerSide
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsJump                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::MakePlayerSide(bool IsJump)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "MakePlayerSide");

	Params::BattleField_C_MakePlayerSide Parms{};

	Parms.IsJump = IsJump;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleField.BattleField_C.GetAddPost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Output                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleField_C::GetAddPost(int32 Param_Index, class USceneComponent** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "GetAddPost");

	Params::BattleField_C_GetAddPost Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function BattleField.BattleField_C.MakeEnemySideNoLoad
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             EnemyList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABattleField_C::MakeEnemySideNoLoad(TArray<class ACharaBase_C*>& EnemyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "MakeEnemySideNoLoad");

	Params::BattleField_C_MakeEnemySideNoLoad Parms{};

	Parms.EnemyList = std::move(EnemyList);

	UObject::ProcessEvent(Func, &Parms);

	EnemyList = std::move(Parms.EnemyList);
}


// Function BattleField.BattleField_C.GetCommandBoxTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       RetValue                                               (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABattleField_C::GetCommandBoxTransform(struct FTransform* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "GetCommandBoxTransform");

	Params::BattleField_C_GetCommandBoxTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BattleField.BattleField_C.SetFieldCollisionEnable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sw                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::SetFieldCollisionEnable(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "SetFieldCollisionEnable");

	Params::BattleField_C_SetFieldCollisionEnable Parms{};

	Parms.Sw = Sw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattleField.BattleField_C.BI_GetAddPost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  Output                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleField_C::BI_GetAddPost(int32 Param_Index, class USceneComponent** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "BI_GetAddPost");

	Params::BattleField_C_BI_GetAddPost Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function BattleField.BattleField_C.BI_GetPlayerReplaceResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<int32, struct FTransform>          TransformMap                                           (Parm, OutParm)

void ABattleField_C::BI_GetPlayerReplaceResult(TMap<int32, struct FTransform>* TransformMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "BI_GetPlayerReplaceResult");

	Params::BattleField_C_BI_GetPlayerReplaceResult Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TransformMap != nullptr)
		*TransformMap = std::move(Parms.TransformMap);
}


// Function BattleField.BattleField_C.BI_IsReplaceFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::BI_IsReplaceFinished(bool* IsFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "BI_IsReplaceFinished");

	Params::BattleField_C_BI_IsReplaceFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}


// Function BattleField.BattleField_C.BI_ReplacePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           InDevilList                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::BI_ReplacePlayer(const TArray<int32>& InDevilList, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "BI_ReplacePlayer");

	Params::BattleField_C_BI_ReplacePlayer Parms{};

	Parms.InDevilList = std::move(InDevilList);

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BattleField.BattleField_C.BI_GetCommandBoxTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Trans                                                  (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABattleField_C::BI_GetCommandBoxTransform(struct FTransform* Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "BI_GetCommandBoxTransform");

	Params::BattleField_C_BI_GetCommandBoxTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Trans != nullptr)
		*Trans = std::move(Parms.Trans);
}


// Function BattleField.BattleField_C.GetRenzokuBattleEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharaBase_C*>             Enemy                                                  (Parm, OutParm)
// int32                                   EncountID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABattleField_C::GetRenzokuBattleEnemy(TArray<class ACharaBase_C*>* Enemy, int32* EncountID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "GetRenzokuBattleEnemy");

	Params::BattleField_C_GetRenzokuBattleEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enemy != nullptr)
		*Enemy = std::move(Parms.Enemy);

	if (EncountID != nullptr)
		*EncountID = Parms.EncountID;
}


// Function BattleField.BattleField_C.IsEndPrepareRenzokuBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDone                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABattleField_C::IsEndPrepareRenzokuBattle(bool* IsDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleField_C", "IsEndPrepareRenzokuBattle");

	Params::BattleField_C_IsEndPrepareRenzokuBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDone != nullptr)
		*IsDone = Parms.IsDone;
}

}

