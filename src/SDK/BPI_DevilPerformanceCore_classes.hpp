#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_DevilPerformanceCore

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "E_DEVIL_PERFORMANCE_TYPE_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_DevilPerformanceCore.BPI_DevilPerformanceCore_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_DevilPerformanceCore_C final : public IInterface
{
public:
	void BI_BeginDeathAction(uint8 InOption, bool DeadTimingOverride, float DeadTiming, bool* NoUse);
	void BI_TimeLine_Dead_Update(float DeadMaterialValue, float StateMateialValue, bool* NoUse);
	void BI_TimeLine_Dead_Update_Freeze(float DeadMaterialValue, float StateMaterialValue, bool* NoUse);
	void BI_TimeLine_Dead_Update_Freeze_DMDither(float DitherRate, bool* NewParam1);
	void BI_TimeLine_Dead_BreakDown(bool* NoUse);
	void BI_TimeLine_Dead_Finished(bool* NoUse);
	void BI_TimeLine_Dead_SpawnParticle(bool* NoUse);
	void BI_TimeLine_Dead_StopMotion(bool* NoUse);
	void BI_TimeLine_Dead_Dead(bool* NoUse);
	void BI_BeginReviveAction(bool IsSymbol, bool* NoUse);
	void BI_TimeLine_Revive_Update_Enemy(float Value, bool* NewParam1);
	void BI_TimeLine_Revive_Finished_Enemy(bool* NoUse);
	void BI_TimeLine_Revive_ParticleOn_Enemy(bool* NoUse);
	void BI_TimeLine_Revive_Update_Nakama(float Value, bool* NoUse);
	void BI_TimeLine_Revive_Finished_Nakama(bool* NoUse);
	void BI_TimeLine_Revive_ParticleOn_Nakama(bool* NoUse);
	void BI_BeginSpawn(bool IsSymbol, bool PlayMotion, bool IsInstantEvent, bool* NoUse);
	void BI_TimeLine_Spawn_Update(float Value, bool* NoUse);
	void BI_TimeLine_Spawn_Finished(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnDecal(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnEffect(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnMotion(bool* NoUse);
	void BI_TimeLine_Spawn_SpawnEffectVisibleOn(bool* NoUse);
	void BI_BeginReturnAction(float PlayRate, bool IsInstantEvnet, bool* NoUse);
	void BI_TimeLine_Return_Update(float Value, bool* NoUse);
	void BI_TimeLine_Return_Finished(bool* NoUse);
	void BI_TimeLine_Return_ParticleOff(bool* NoUse);
	void BI_BeginSummonAction(int32 CurrentStatus, bool IsSymbol, bool Immediate, bool IsInstantEvent, bool* NoUse);
	void BI_TimeLine_Summon_Update(float Value, bool* NoUse);
	void BI_TimeLine_Summon_Finished(bool* NoUse);
	void BI_TimeLine_Summon_ApplyBadStatus(bool* NoUse);
	void BI_AdjustMeshScale(bool IsReset, bool IsSymbol, bool* NoUse);
	void BI_ResetDeadMaterial(bool* NoUse);
	void BI_TimeLine_Spawn_Update_Sub(float Value, bool* NoUse);
	void BI_TimeLine_Spawn_SpawnMotion_Sub(bool* NoUse);
	void BI_BeginRapidReturnAction(bool* NoUse);
	void BI_BeginRapidSummonAction(int32 CurrentStatus, bool IsSymbol, bool IsImmediately, bool* NoUse);
	void BI_TimeLine_Dead_CharaEffectDeactivate(bool* NoUse);
	void BI_TimeLine_Summon_EndOfSummon(bool* NoUse);
	void BI_SetReturnPerformance(E_DEVIL_PERFORMANCE_TYPE Return, bool* NoUse);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_DevilPerformanceCore_C">();
	}
	static class IBPI_DevilPerformanceCore_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_DevilPerformanceCore_C>();
	}
};
static_assert(alignof(IBPI_DevilPerformanceCore_C) == 0x000008, "Wrong alignment on IBPI_DevilPerformanceCore_C");
static_assert(sizeof(IBPI_DevilPerformanceCore_C) == 0x000028, "Wrong size on IBPI_DevilPerformanceCore_C");

}

