#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_RandomInputDebugger

#include "Basic.hpp"

#include "BPL_RandomInputDebugger_classes.hpp"
#include "BPL_RandomInputDebugger_parameters.hpp"


namespace SDK
{

// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.AddDebugMenu_RandomInput
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::AddDebugMenu_RandomInput(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "AddDebugMenu_RandomInput");

	Params::BPL_RandomInputDebugger_C_AddDebugMenu_RandomInput Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.SpawnDebugMenu_RandomInput
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::SpawnDebugMenu_RandomInput(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "SpawnDebugMenu_RandomInput");

	Params::BPL_RandomInputDebugger_C_SpawnDebugMenu_RandomInput Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.GetRandomInputDebuggerActionSetMax
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SetMax                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::GetRandomInputDebuggerActionSetMax(class UObject* __WorldContext, int32* SetMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "GetRandomInputDebuggerActionSetMax");

	Params::BPL_RandomInputDebugger_C_GetRandomInputDebuggerActionSetMax Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SetMax != nullptr)
		*SetMax = Parms.SetMax;
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.GetRandomInputDebugger_MappingRootPath
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ActionMapping                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Path                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::GetRandomInputDebugger_MappingRootPath(bool ActionMapping, class UObject* __WorldContext, class FString* Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "GetRandomInputDebugger_MappingRootPath");

	Params::BPL_RandomInputDebugger_C_GetRandomInputDebugger_MappingRootPath Parms{};

	Parms.ActionMapping = ActionMapping;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Path != nullptr)
		*Path = std::move(Parms.Path);
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.GetRandomInputDebugger_ActionPath
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Set                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RootPath                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MappingPath                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MinTimePath                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MaxTimePath                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           HoldMinTimePath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           HoldMaxTimePath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::GetRandomInputDebugger_ActionPath(int32 Set, class UObject* __WorldContext, class FString* RootPath, class FString* MappingPath, class FString* MinTimePath, class FString* MaxTimePath, class FString* HoldMinTimePath, class FString* HoldMaxTimePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "GetRandomInputDebugger_ActionPath");

	Params::BPL_RandomInputDebugger_C_GetRandomInputDebugger_ActionPath Parms{};

	Parms.Set = Set;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RootPath != nullptr)
		*RootPath = std::move(Parms.RootPath);

	if (MappingPath != nullptr)
		*MappingPath = std::move(Parms.MappingPath);

	if (MinTimePath != nullptr)
		*MinTimePath = std::move(Parms.MinTimePath);

	if (MaxTimePath != nullptr)
		*MaxTimePath = std::move(Parms.MaxTimePath);

	if (HoldMinTimePath != nullptr)
		*HoldMinTimePath = std::move(Parms.HoldMinTimePath);

	if (HoldMaxTimePath != nullptr)
		*HoldMaxTimePath = std::move(Parms.HoldMaxTimePath);
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.GetRandomInputDebugger_AnalogStickPath
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    LeftStick                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AxisX                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RootPath                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Enable                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MinPushTimePath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MaxPushTimePath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MinPopTimePath                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MaxPopTimePath                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MinValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MaxValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           MaxValueRate                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReverseRate                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPL_RandomInputDebugger_C::GetRandomInputDebugger_AnalogStickPath(bool LeftStick, bool AxisX, class UObject* __WorldContext, class FString* RootPath, class FString* Enable, class FString* MinPushTimePath, class FString* MaxPushTimePath, class FString* MinPopTimePath, class FString* MaxPopTimePath, class FString* MinValue, class FString* MaxValue, class FString* MaxValueRate, class FString* ReverseRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "GetRandomInputDebugger_AnalogStickPath");

	Params::BPL_RandomInputDebugger_C_GetRandomInputDebugger_AnalogStickPath Parms{};

	Parms.LeftStick = LeftStick;
	Parms.AxisX = AxisX;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RootPath != nullptr)
		*RootPath = std::move(Parms.RootPath);

	if (Enable != nullptr)
		*Enable = std::move(Parms.Enable);

	if (MinPushTimePath != nullptr)
		*MinPushTimePath = std::move(Parms.MinPushTimePath);

	if (MaxPushTimePath != nullptr)
		*MaxPushTimePath = std::move(Parms.MaxPushTimePath);

	if (MinPopTimePath != nullptr)
		*MinPopTimePath = std::move(Parms.MinPopTimePath);

	if (MaxPopTimePath != nullptr)
		*MaxPopTimePath = std::move(Parms.MaxPopTimePath);

	if (MinValue != nullptr)
		*MinValue = std::move(Parms.MinValue);

	if (MaxValue != nullptr)
		*MaxValue = std::move(Parms.MaxValue);

	if (MaxValueRate != nullptr)
		*MaxValueRate = std::move(Parms.MaxValueRate);

	if (ReverseRate != nullptr)
		*ReverseRate = std::move(Parms.ReverseRate);
}


// Function BPL_RandomInputDebugger.BPL_RandomInputDebugger_C.ConvertRandomInputDebugger_AnalogStickType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LeftStick                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AxisX                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPL_RandomInputDebugger_C::ConvertRandomInputDebugger_AnalogStickType(int32 Param_Index, class UObject* __WorldContext, bool* LeftStick, bool* AxisX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_RandomInputDebugger_C", "ConvertRandomInputDebugger_AnalogStickType");

	Params::BPL_RandomInputDebugger_C_ConvertRandomInputDebugger_AnalogStickType Parms{};

	Parms.Param_Index = Param_Index;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LeftStick != nullptr)
		*LeftStick = Parms.LeftStick;

	if (AxisX != nullptr)
		*AxisX = Parms.AxisX;
}

}

