#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TalkCamera

#include "Basic.hpp"

#include "BP_TalkCamera_classes.hpp"
#include "BP_TalkCamera_parameters.hpp"


namespace SDK
{

// Function BP_TalkCamera.BP_TalkCamera_C.EvtDis_CameraChange__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TalkCamera                            StartType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_TalkCamera                            EndType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::EvtDis_CameraChange__DelegateSignature(E_TalkCamera StartType, E_TalkCamera EndType, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "EvtDis_CameraChange__DelegateSignature");

	Params::BP_TalkCamera_C_EvtDis_CameraChange__DelegateSignature Parms{};

	Parms.StartType = StartType;
	Parms.EndType = EndType;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ExecuteUbergraph_BP_TalkCamera
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::ExecuteUbergraph_BP_TalkCamera(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ExecuteUbergraph_BP_TalkCamera");

	Params::BP_TalkCamera_C_ExecuteUbergraph_BP_TalkCamera Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ReceiveEndPlay");

	Params::BP_TalkCamera_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TalkCamera_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.Evt_MoveCameraCore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEase                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_TALK_CAMERA_MODEL_HIDE                ModelHide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::Evt_MoveCameraCore(const struct FTransform& Start, const struct FTransform& Target, float Time, bool IsEase, E_TALK_CAMERA_MODEL_HIDE ModelHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "Evt_MoveCameraCore");

	Params::BP_TalkCamera_C_Evt_MoveCameraCore Parms{};

	Parms.Start = std::move(Start);
	Parms.Target = std::move(Target);
	Parms.Time = Time;
	Parms.IsEase = IsEase;
	Parms.ModelHide = ModelHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ReceiveTick");

	Params::BP_TalkCamera_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.Timeline_Camera__UpdateFunc
// (BlueprintEvent)

void ABP_TalkCamera_C::Timeline_Camera__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "Timeline_Camera__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.Timeline_Camera__FinishedFunc
// (BlueprintEvent)

void ABP_TalkCamera_C::Timeline_Camera__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "Timeline_Camera__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetCameraTransform
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TalkCamera                            Param_CameraType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::SetCameraTransform(E_TalkCamera Param_CameraType, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetCameraTransform");

	Params::BP_TalkCamera_C_SetCameraTransform Parms{};

	Parms.Param_CameraType = Param_CameraType;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetCameraTransform
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_TalkCamera                            Param_CameraType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::GetCameraTransform(E_TalkCamera Param_CameraType, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetCameraTransform");

	Params::BP_TalkCamera_C_GetCameraTransform Parms{};

	Parms.Param_CameraType = Param_CameraType;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera_ByType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TalkCamera                            Param_CameraType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceMove                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Ease                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::MoveCamera_ByType(E_TalkCamera Param_CameraType, float Time, bool ForceMove, bool Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera_ByType");

	Params::BP_TalkCamera_C_MoveCamera_ByType Parms{};

	Parms.Param_CameraType = Param_CameraType;
	Parms.Time = Time;
	Parms.ForceMove = ForceMove;
	Parms.Ease = Ease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetCameraParam_Yoro
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Eye                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Look                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetCameraParam_Yoro(struct FVector* Eye, struct FVector* Look)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetCameraParam_Yoro");

	Params::BP_TalkCamera_C_GetCameraParam_Yoro Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Eye != nullptr)
		*Eye = std::move(Parms.Eye);

	if (Look != nullptr)
		*Look = std::move(Parms.Look);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetEyeOffset_Yoro
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          EyeOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetEyeOffset_Yoro(struct FVector* EyeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetEyeOffset_Yoro");

	Params::BP_TalkCamera_C_GetEyeOffset_Yoro Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EyeOffset != nullptr)
		*EyeOffset = std::move(Parms.EyeOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetLookOffset_Yoro
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          LookOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetLookOffset_Yoro(struct FVector* LookOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetLookOffset_Yoro");

	Params::BP_TalkCamera_C_GetLookOffset_Yoro Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LookOffset != nullptr)
		*LookOffset = std::move(Parms.LookOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.CheckCameraAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsMove                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::CheckCameraAnim(bool* IsMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "CheckCameraAnim");

	Params::BP_TalkCamera_C_CheckCameraAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsMove != nullptr)
		*IsMove = Parms.IsMove;
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEase                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::MoveCamera(const struct FTransform& Target, float Time, bool IsEase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera");

	Params::BP_TalkCamera_C_MoveCamera Parms{};

	Parms.Target = std::move(Target);
	Parms.Time = Time;
	Parms.IsEase = IsEase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.FindLookAtRocation_Daath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ZOnly                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_TalkCamera_C::FindLookAtRocation_Daath(const struct FVector& Start, const struct FVector& Target, bool ZOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "FindLookAtRocation_Daath");

	Params::BP_TalkCamera_C_FindLookAtRocation_Daath Parms{};

	Parms.Start = std::move(Start);
	Parms.Target = std::move(Target);
	Parms.ZOnly = ZOnly;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_TalkCamera.BP_TalkCamera_C.ModifyEyeFromCameraScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Eye                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Look                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CameraScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ModifiedEye                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::ModifyEyeFromCameraScale(const struct FVector& Eye, const struct FVector& Look, float CameraScale, struct FVector* ModifiedEye)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ModifyEyeFromCameraScale");

	Params::BP_TalkCamera_C_ModifyEyeFromCameraScale Parms{};

	Parms.Eye = std::move(Eye);
	Parms.Look = std::move(Look);
	Parms.CameraScale = CameraScale;

	UObject::ProcessEvent(Func, &Parms);

	if (ModifiedEye != nullptr)
		*ModifiedEye = std::move(Parms.ModifiedEye);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Param_BaseCameraTransform                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       PlayerFace                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       PlayerChest                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       EnemyFace                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       EnemyBody                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       Param_HeroTalkTransform                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Param_PlayerCameraScale                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_EnemyCameraScale                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_PlayerLocationOffset                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MythMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          UpVector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharaBase_C*                     Param_FriendModel                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharaBase_C*                     Param_EnemyModel                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EyeOffsetYoro                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LookOffsetYoro                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::SetParam(const struct FTransform& Param_BaseCameraTransform, struct FTransform& PlayerFace, struct FTransform& PlayerChest, struct FTransform& EnemyFace, struct FTransform& EnemyBody, const struct FTransform& Param_HeroTalkTransform, float& Param_PlayerCameraScale, float& Param_EnemyCameraScale, const struct FVector& Param_PlayerLocationOffset, bool& MythMode, const struct FVector& UpVector, class ACharaBase_C*& Param_FriendModel, class ACharaBase_C*& Param_EnemyModel, const struct FVector& EyeOffsetYoro, const struct FVector& LookOffsetYoro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetParam");

	Params::BP_TalkCamera_C_SetParam Parms{};

	Parms.Param_BaseCameraTransform = std::move(Param_BaseCameraTransform);
	Parms.PlayerFace = std::move(PlayerFace);
	Parms.PlayerChest = std::move(PlayerChest);
	Parms.EnemyFace = std::move(EnemyFace);
	Parms.EnemyBody = std::move(EnemyBody);
	Parms.Param_HeroTalkTransform = std::move(Param_HeroTalkTransform);
	Parms.Param_PlayerCameraScale = Param_PlayerCameraScale;
	Parms.Param_EnemyCameraScale = Param_EnemyCameraScale;
	Parms.Param_PlayerLocationOffset = std::move(Param_PlayerLocationOffset);
	Parms.MythMode = MythMode;
	Parms.UpVector = std::move(UpVector);
	Parms.Param_FriendModel = Param_FriendModel;
	Parms.Param_EnemyModel = Param_EnemyModel;
	Parms.EyeOffsetYoro = std::move(EyeOffsetYoro);
	Parms.LookOffsetYoro = std::move(LookOffsetYoro);

	UObject::ProcessEvent(Func, &Parms);

	PlayerFace = std::move(Parms.PlayerFace);
	PlayerChest = std::move(Parms.PlayerChest);
	EnemyFace = std::move(Parms.EnemyFace);
	EnemyBody = std::move(Parms.EnemyBody);
	Param_PlayerCameraScale = Parms.Param_PlayerCameraScale;
	Param_EnemyCameraScale = Parms.Param_EnemyCameraScale;
	MythMode = Parms.MythMode;
	Param_FriendModel = Parms.Param_FriendModel;
	Param_EnemyModel = Parms.Param_EnemyModel;
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetCameraEye_Normal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ToEnemyRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Eye                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetCameraEye_Normal(float ToEnemyRate, float Distance, float Height, struct FVector* Eye)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetCameraEye_Normal");

	Params::BP_TalkCamera_C_GetCameraEye_Normal Parms{};

	Parms.ToEnemyRate = ToEnemyRate;
	Parms.Distance = Distance;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);

	if (Eye != nullptr)
		*Eye = std::move(Parms.Eye);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetCameraLook_Normal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ToEnemyRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Look                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetCameraLook_Normal(float ToEnemyRate, float HeightOffset, struct FVector* Look)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetCameraLook_Normal");

	Params::BP_TalkCamera_C_GetCameraLook_Normal Parms{};

	Parms.ToEnemyRate = ToEnemyRate;
	Parms.HeightOffset = HeightOffset;

	UObject::ProcessEvent(Func, &Parms);

	if (Look != nullptr)
		*Look = std::move(Parms.Look);
}


// Function BP_TalkCamera.BP_TalkCamera_C.UpdateCameraTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::UpdateCameraTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "UpdateCameraTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ApplyDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ApplyDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ApplyDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.PrintInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::PrintInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "PrintInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera_ByTable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_TableIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ModelHide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::MoveCamera_ByTable(float Time, int32 Param_TableIndex, bool ModelHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera_ByTable");

	Params::BP_TalkCamera_C_MoveCamera_ByTable Parms{};

	Parms.Time = Time;
	Parms.Param_TableIndex = Param_TableIndex;
	Parms.ModelHide = ModelHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.CalcCameraTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTalkCameraParam                 CameraParam                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// E_TalkCamera                            Param_CameraType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::CalcCameraTransform(struct FTalkCameraParam& CameraParam, E_TalkCamera Param_CameraType, struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "CalcCameraTransform");

	Params::BP_TalkCamera_C_CalcCameraTransform Parms{};

	Parms.CameraParam = std::move(CameraParam);
	Parms.Param_CameraType = Param_CameraType;

	UObject::ProcessEvent(Func, &Parms);

	CameraParam = std::move(Parms.CameraParam);

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);
}


// Function BP_TalkCamera.BP_TalkCamera_C.IsCameraReverse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       T1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       T2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    IsReverse                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::IsCameraReverse(const struct FTransform& T1, const struct FTransform& T2, bool* IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "IsCameraReverse");

	Params::BP_TalkCamera_C_IsCameraReverse Parms{};

	Parms.T1 = std::move(T1);
	Parms.T2 = std::move(T2);

	UObject::ProcessEvent(Func, &Parms);

	if (IsReverse != nullptr)
		*IsReverse = Parms.IsReverse;
}


// Function BP_TalkCamera.BP_TalkCamera_C.ApplyModelHide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TALK_CAMERA_MODEL_HIDE                ModelHide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::ApplyModelHide(E_TALK_CAMERA_MODEL_HIDE ModelHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ApplyModelHide");

	Params::BP_TalkCamera_C_ApplyModelHide Parms{};

	Parms.ModelHide = ModelHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.AboveGround
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::AboveGround(const struct FVector& InLocation, struct FVector* OutLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "AboveGround");

	Params::BP_TalkCamera_C_AboveGround Parms{};

	Parms.InLocation = std::move(InLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetUnitVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharaBase_C*                     Chara                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::SetUnitVisibility(class ACharaBase_C* Chara, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetUnitVisibility");

	Params::BP_TalkCamera_C_SetUnitVisibility Parms{};

	Parms.Chara = Chara;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetCameraParam_MythFriendUp
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Eye                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Look                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetCameraParam_MythFriendUp(struct FVector* Eye, struct FVector* Look)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetCameraParam_MythFriendUp");

	Params::BP_TalkCamera_C_GetCameraParam_MythFriendUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Eye != nullptr)
		*Eye = std::move(Parms.Eye);

	if (Look != nullptr)
		*Look = std::move(Parms.Look);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetEyeOffset_MythFriendUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          EyeOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetEyeOffset_MythFriendUp(struct FVector* EyeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetEyeOffset_MythFriendUp");

	Params::BP_TalkCamera_C_GetEyeOffset_MythFriendUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EyeOffset != nullptr)
		*EyeOffset = std::move(Parms.EyeOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetLookOffset_MythFriendUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          LookOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetLookOffset_MythFriendUp(struct FVector* LookOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetLookOffset_MythFriendUp");

	Params::BP_TalkCamera_C_GetLookOffset_MythFriendUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LookOffset != nullptr)
		*LookOffset = std::move(Parms.LookOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ResetDebug
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ResetDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ResetDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetTargetHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetTargetHeight(float* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetTargetHeight");

	Params::BP_TalkCamera_C_GetTargetHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function BP_TalkCamera.BP_TalkCamera_C.CalcCameraTransformOfTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_TableIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDebug                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Out                                                    (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::CalcCameraTransformOfTable(int32 Param_TableIndex, bool IsDebug, struct FTransform* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "CalcCameraTransformOfTable");

	Params::BP_TalkCamera_C_CalcCameraTransformOfTable Parms{};

	Parms.Param_TableIndex = Param_TableIndex;
	Parms.IsDebug = IsDebug;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetTableDataIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::SetTableDataIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetTableDataIndex");

	Params::BP_TalkCamera_C_SetTableDataIndex Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.UpdateShake
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::UpdateShake(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "UpdateShake");

	Params::BP_TalkCamera_C_UpdateShake Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ShakeCameraStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ShakeCameraStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ShakeCameraStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetShakeParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsMythMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TalkCamera_C::SetShakeParam(bool Param_IsMythMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetShakeParam");

	Params::BP_TalkCamera_C_SetShakeParam Parms{};

	Parms.Param_IsMythMode = Param_IsMythMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera_Status
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEase                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharaBase_C*                     Param_StatusModel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::MoveCamera_Status(float Time, bool IsEase, class ACharaBase_C* Param_StatusModel, int32 DevilID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera_Status");

	Params::BP_TalkCamera_C_MoveCamera_Status Parms{};

	Parms.Time = Time;
	Parms.IsEase = IsEase;
	Parms.Param_StatusModel = Param_StatusModel;
	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SearchTalkCameraOffsetTable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_TalkCameraOffset             CameraOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::SearchTalkCameraOffsetTable(int32 DevilID, struct FST_TalkCameraOffset* CameraOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SearchTalkCameraOffsetTable");

	Params::BP_TalkCamera_C_SearchTalkCameraOffsetTable Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraOffset != nullptr)
		*CameraOffset = std::move(Parms.CameraOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.CalcBaseLocationStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::CalcBaseLocationStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "CalcBaseLocationStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetLookOffset_Status
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          LookOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetLookOffset_Status(struct FVector* LookOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetLookOffset_Status");

	Params::BP_TalkCamera_C_GetLookOffset_Status Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LookOffset != nullptr)
		*LookOffset = std::move(Parms.LookOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.GetEyeOffset_Status
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          EyeOffset                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::GetEyeOffset_Status(struct FVector* EyeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "GetEyeOffset_Status");

	Params::BP_TalkCamera_C_GetEyeOffset_Status Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EyeOffset != nullptr)
		*EyeOffset = std::move(Parms.EyeOffset);
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera_Quiz
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEase                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharaBase_C*                     Param_StatusModel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::MoveCamera_Quiz(float Time, bool IsEase, class ACharaBase_C* Param_StatusModel, int32 DevilID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera_Quiz");

	Params::BP_TalkCamera_C_MoveCamera_Quiz Parms{};

	Parms.Time = Time;
	Parms.IsEase = IsEase;
	Parms.Param_StatusModel = Param_StatusModel;
	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SearchQuizTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTalkQuizCameraTableRow          QuizTableRow                                           (Parm, OutParm)

void ABP_TalkCamera_C::SearchQuizTable(int32 DevilID, struct FTalkQuizCameraTableRow* QuizTableRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SearchQuizTable");

	Params::BP_TalkCamera_C_SearchQuizTable Parms{};

	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);

	if (QuizTableRow != nullptr)
		*QuizTableRow = std::move(Parms.QuizTableRow);
}


// Function BP_TalkCamera.BP_TalkCamera_C.SetQuizTable
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTalkQuizCameraTableRow          InTableRow                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_TalkCamera_C::SetQuizTable(int32 DevilID, const struct FTalkQuizCameraTableRow& InTableRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "SetQuizTable");

	Params::BP_TalkCamera_C_SetQuizTable Parms{};

	Parms.DevilID = DevilID;
	Parms.InTableRow = std::move(InTableRow);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.MoveCamera_UniqueSkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEase                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharaBase_C*                     Param_UniqueSkillModel                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DevilID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TalkCamera_C::MoveCamera_UniqueSkill(float Time, bool IsEase, class ACharaBase_C* Param_UniqueSkillModel, int32 DevilID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "MoveCamera_UniqueSkill");

	Params::BP_TalkCamera_C_MoveCamera_UniqueSkill Parms{};

	Parms.Time = Time;
	Parms.IsEase = IsEase;
	Parms.Param_UniqueSkillModel = Param_UniqueSkillModel;
	Parms.DevilID = DevilID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ShakeCameraStop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ShakeCameraStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ShakeCameraStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ShakeCameraRestart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ShakeCameraRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ShakeCameraRestart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TalkCamera.BP_TalkCamera_C.ShakeCameraReset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TalkCamera_C::ShakeCameraReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TalkCamera_C", "ShakeCameraReset");

	UObject::ProcessEvent(Func, nullptr);
}

}

