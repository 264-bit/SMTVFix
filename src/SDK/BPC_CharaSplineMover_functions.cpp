#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_CharaSplineMover

#include "Basic.hpp"

#include "BPC_CharaSplineMover_classes.hpp"
#include "BPC_CharaSplineMover_parameters.hpp"


namespace SDK
{

// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.EvtDis_ArriveSplineEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CharaSplineMover_C*          ThisComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::EvtDis_ArriveSplineEnd__DelegateSignature(class UBPC_CharaSplineMover_C* ThisComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "EvtDis_ArriveSplineEnd__DelegateSignature");

	Params::BPC_CharaSplineMover_C_EvtDis_ArriveSplineEnd__DelegateSignature Parms{};

	Parms.ThisComponent = ThisComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.EvtDis_Stop__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CharaSplineMover_C*          ThisComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::EvtDis_Stop__DelegateSignature(class UBPC_CharaSplineMover_C* ThisComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "EvtDis_Stop__DelegateSignature");

	Params::BPC_CharaSplineMover_C_EvtDis_Stop__DelegateSignature Parms{};

	Parms.ThisComponent = ThisComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.ExecuteUbergraph_BPC_CharaSplineMover
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::ExecuteUbergraph_BPC_CharaSplineMover(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "ExecuteUbergraph_BPC_CharaSplineMover");

	Params::BPC_CharaSplineMover_C_ExecuteUbergraph_BPC_CharaSplineMover Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "ReceiveTick");

	Params::BPC_CharaSplineMover_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSplinePos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_SplinePos                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetSplinePos(float Param_SplinePos, bool Move)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetSplinePos");

	Params::BPC_CharaSplineMover_C_SetSplinePos Parms{};

	Parms.Param_SplinePos = Param_SplinePos;
	Parms.Move = Move;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.TickManual
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_DeltaSec                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::TickManual(float Param_DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "TickManual");

	Params::BPC_CharaSplineMover_C_TickManual Parms{};

	Parms.Param_DeltaSec = Param_DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.Destroy
// (BlueprintCallable, BlueprintEvent)

void UBPC_CharaSplineMover_C::Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBPC_CharaSplineMover_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.StartWalk
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_CharaSplineMover_C::StartWalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "StartWalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.StopWalk
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_CharaSplineMover_C::StopWalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "StopWalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_MovePerSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AccelPerSec                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::SetSpeed(float Param_MovePerSec, float Param_AccelPerSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetSpeed");

	Params::BPC_CharaSplineMover_C_SetSpeed Parms{};

	Parms.Param_MovePerSec = Param_MovePerSec;
	Parms.Param_AccelPerSec = Param_AccelPerSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.CalcSplinePos
// (Private, BlueprintCallable, BlueprintEvent)

void UBPC_CharaSplineMover_C::CalcSplinePos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "CalcSplinePos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.CalcNextSplinePos
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_NextPos                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::CalcNextSplinePos(float* Param_NextPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "CalcNextSplinePos");

	Params::BPC_CharaSplineMover_C_CalcNextSplinePos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_NextPos != nullptr)
		*Param_NextPos = Parms.Param_NextPos;
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSplineComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Param_SplineComponent                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::SetSplineComponent(class USplineComponent* Param_SplineComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetSplineComponent");

	Params::BPC_CharaSplineMover_C_SetSplineComponent Parms{};

	Parms.Param_SplineComponent = Param_SplineComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetFly
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsFly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetFly(bool Param_IsFly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetFly");

	Params::BPC_CharaSplineMover_C_SetFly Parms{};

	Parms.Param_IsFly = Param_IsFly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSpeedLimit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_MovePerSec_Min                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_MovePerSec_Max                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::SetSpeedLimit(float Param_MovePerSec_Min, float Param_MovePerSec_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetSpeedLimit");

	Params::BPC_CharaSplineMover_C_SetSpeedLimit Parms{};

	Parms.Param_MovePerSec_Min = Param_MovePerSec_Min;
	Parms.Param_MovePerSec_Max = Param_MovePerSec_Max;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetCapsuleTraceParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TraceRadius                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_TraceHalfHeight                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_TraceLocalLocation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::SetCapsuleTraceParam(float Param_TraceRadius, float Param_TraceHalfHeight, const struct FVector& Param_TraceLocalLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetCapsuleTraceParam");

	Params::BPC_CharaSplineMover_C_SetCapsuleTraceParam Parms{};

	Parms.Param_TraceRadius = Param_TraceRadius;
	Parms.Param_TraceHalfHeight = Param_TraceHalfHeight;
	Parms.Param_TraceLocalLocation = std::move(Param_TraceLocalLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetWalkReverse
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsWalkReverse                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetWalkReverse(bool Param_IsWalkReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetWalkReverse");

	Params::BPC_CharaSplineMover_C_SetWalkReverse Parms{};

	Parms.Param_IsWalkReverse = Param_IsWalkReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.GetDistanceAlongSplineFromWolrdLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::GetDistanceAlongSplineFromWolrdLocation(const struct FVector& WorldLocation, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "GetDistanceAlongSplineFromWolrdLocation");

	Params::BPC_CharaSplineMover_C_GetDistanceAlongSplineFromWolrdLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.NotRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_NotRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::NotRotation(bool Param_NotRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "NotRotation");

	Params::BPC_CharaSplineMover_C_NotRotation Parms{};

	Parms.Param_NotRotation = Param_NotRotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetOffsetZ
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_OffsetZ                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_CharaSplineMover_C::SetOffsetZ(float Param_OffsetZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetOffsetZ");

	Params::BPC_CharaSplineMover_C_SetOffsetZ Parms{};

	Parms.Param_OffsetZ = Param_OffsetZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetSweep
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Sweep                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetSweep(bool Param_Sweep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetSweep");

	Params::BPC_CharaSplineMover_C_SetSweep Parms{};

	Parms.Param_Sweep = Param_Sweep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetManualTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Manual                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetManualTick(bool Manual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetManualTick");

	Params::BPC_CharaSplineMover_C_SetManualTick Parms{};

	Parms.Manual = Manual;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_CharaSplineMover.BPC_CharaSplineMover_C.SetTickEnable
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_CharaSplineMover_C::SetTickEnable(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_CharaSplineMover_C", "SetTickEnable");

	Params::BPC_CharaSplineMover_C_SetTickEnable Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}

}

