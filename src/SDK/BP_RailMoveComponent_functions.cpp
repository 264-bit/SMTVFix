#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RailMoveComponent

#include "Basic.hpp"

#include "BP_RailMoveComponent_classes.hpp"
#include "BP_RailMoveComponent_parameters.hpp"


namespace SDK
{

// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ExecuteUbergraph_BP_RailMoveComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::ExecuteUbergraph_BP_RailMoveComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "ExecuteUbergraph_BP_RailMoveComponent");

	Params::BP_RailMoveComponent_C_ExecuteUbergraph_BP_RailMoveComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Update
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::Update(float DeltaSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "Update");

	Params::BP_RailMoveComponent_C_Update Parms{};

	Parms.DeltaSec = DeltaSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "ReceiveTick");

	Params::BP_RailMoveComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetSpline
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RailActor_C*                  InRail                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::SetSpline(class ABP_RailActor_C* InRail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetSpline");

	Params::BP_RailMoveComponent_C_SetSpline Parms{};

	Parms.InRail = InRail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.IsArrived
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RailMoveComponent_C::IsArrived(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "IsArrived");

	Params::BP_RailMoveComponent_C_IsArrived Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.GetSplineLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::GetSplineLength(float* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "GetSplineLength");

	Params::BP_RailMoveComponent_C_GetSplineLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetMoveDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::SetMoveDistance(float InDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetMoveDistance");

	Params::BP_RailMoveComponent_C_SetMoveDistance Parms{};

	Parms.InDistance = InDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.AddMoveDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AddDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::AddMoveDistance(float AddDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "AddMoveDistance");

	Params::BP_RailMoveComponent_C_AddMoveDistance Parms{};

	Parms.AddDistance = AddDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ForceMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBP_RailMoveComponent_C::ForceMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "ForceMove");

	Params::BP_RailMoveComponent_C_ForceMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Pause
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RailMoveComponent_C::Pause(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "Pause");

	Params::BP_RailMoveComponent_C_Pause Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Play
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Stop
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.VectorToOrientationRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InUp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RailMoveComponent_C::VectorToOrientationRotate(const struct FVector& InVec, const struct FVector& InUp, struct FRotator* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "VectorToOrientationRotate");

	Params::BP_RailMoveComponent_C_VectorToOrientationRotate Parms{};

	Parms.InVec = std::move(InVec);
	Parms.InUp = std::move(InUp);

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = std::move(Parms.RetValue);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetMoveSpeed
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::SetMoveSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetMoveSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.GetFirstTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBP_RailMoveComponent_C::GetFirstTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "GetFirstTransform");

	Params::BP_RailMoveComponent_C_GetFirstTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.UpdateMoveDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Tick                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::UpdateMoveDistance(float Tick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "UpdateMoveDistance");

	Params::BP_RailMoveComponent_C_UpdateMoveDistance Parms{};

	Parms.Tick = Tick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetPlayInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLoop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsReturn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLockTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ChangeSpeedPoint                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FirstSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SecondSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPanCamera                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RailMoveComponent_C::SetPlayInfo(bool IsLoop, bool IsReturn, const struct FVector& Target, bool IsLockTarget, float ChangeSpeedPoint, float FirstSpeed, float SecondSpeed, bool IsPanCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetPlayInfo");

	Params::BP_RailMoveComponent_C_SetPlayInfo Parms{};

	Parms.IsLoop = IsLoop;
	Parms.IsReturn = IsReturn;
	Parms.Target = std::move(Target);
	Parms.IsLockTarget = IsLockTarget;
	Parms.ChangeSpeedPoint = ChangeSpeedPoint;
	Parms.FirstSpeed = FirstSpeed;
	Parms.SecondSpeed = SecondSpeed;
	Parms.IsPanCamera = IsPanCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.IsPlaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_RailMoveComponent_C::IsPlaying(bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "IsPlaying");

	Params::BP_RailMoveComponent_C_IsPlaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.UpdateTargetLocation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::UpdateTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "UpdateTargetLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetTargetActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::SetTargetActor(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetTargetActor");

	Params::BP_RailMoveComponent_C_SetTargetActor Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.SetOverrideTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_RailMoveComponent_C::SetOverrideTarget(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "SetOverrideTarget");

	Params::BP_RailMoveComponent_C_SetOverrideTarget Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.ResetOverrideTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::ResetOverrideTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "ResetOverrideTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.CalcTargetLocation with Offset
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValidTargetLocation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOverrideTargetSocket                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBP_RailMoveComponent_C::CalcTargetLocation_with_Offset(const struct FVector& TargetLocation, bool IsValidTargetLocation, bool IsOverrideTargetSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "CalcTargetLocation with Offset");

	Params::BP_RailMoveComponent_C_CalcTargetLocation_with_Offset Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.IsValidTargetLocation = IsValidTargetLocation;
	Parms.IsOverrideTargetSocket = IsOverrideTargetSocket;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RailMoveComponent.BP_RailMoveComponent_C.Reculc Camera Look At
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_RailMoveComponent_C::Reculc_Camera_Look_At()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RailMoveComponent_C", "Reculc Camera Look At");

	UObject::ProcessEvent(Func, nullptr);
}

}

