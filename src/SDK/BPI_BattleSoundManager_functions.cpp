#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleSoundManager

#include "Basic.hpp"

#include "BPI_BattleSoundManager_classes.hpp"
#include "BPI_BattleSoundManager_parameters.hpp"


namespace SDK
{

// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayResidentSE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SEName                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_PlayResidentSE(class FName SEName, const struct FVector& Location, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_PlayResidentSE");

	Params::BPI_BattleSoundManager_C_BI_PlayResidentSE Parms{};

	Parms.SEName = SEName;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayAssetSE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_PlayAssetSE(class USoundAtomCue* Data, const struct FVector& Location, bool IgnorePlayRate, bool* RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_PlayAssetSE");

	Params::BPI_BattleSoundManager_C_BI_PlayAssetSE Parms{};

	Parms.Data = Data;
	Parms.Location = std::move(Location);
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_GetResidentSEByName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USoundAtomCue*                    RetValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleSoundManager_C::BI_GetResidentSEByName(const class FString& Param_Name, class USoundAtomCue** RetValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_GetResidentSEByName");

	Params::BPI_BattleSoundManager_C_BI_GetResidentSEByName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	UObject::ProcessEvent(Func, &Parms);

	if (RetValue != nullptr)
		*RetValue = Parms.RetValue;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_ChangeBGM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBattleBGMType                          BGM_Type                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFadeType                               FadeType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContinuousBGMBattle                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_ChangeBGM(int32 ID, EBattleBGMType BGM_Type, EFadeType FadeType, bool IsContinuousBGMBattle, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_ChangeBGM");

	Params::BPI_BattleSoundManager_C_BI_ChangeBGM Parms{};

	Parms.ID = ID;
	Parms.BGM_Type = BGM_Type;
	Parms.FadeType = FadeType;
	Parms.IsContinuousBGMBattle = IsContinuousBGMBattle;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_StopAllSE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_StopAllSE(bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_StopAllSE");

	Params::BPI_BattleSoundManager_C_BI_StopAllSE Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_PlayAssetSE_2D
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnorePlayRate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_PlayAssetSE_2D(class USoundAtomCue* Data, bool IgnorePlayRate, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_PlayAssetSE_2D");

	Params::BPI_BattleSoundManager_C_BI_PlayAssetSE_2D Parms{};

	Parms.Data = Data;
	Parms.IgnorePlayRate = IgnorePlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_BeginShowStat
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleSoundManager_C::BI_BeginShowStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_BeginShowStat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_EndShowStat
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_BattleSoundManager_C::BI_EndShowStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_EndShowStat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_AddAtomComp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAtomComponent*                   AtomComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SyncPlaybackSpeed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_AddAtomComp(class UAtomComponent* AtomComp, bool SyncPlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_AddAtomComp");

	Params::BPI_BattleSoundManager_C_BI_AddAtomComp Parms{};

	Parms.AtomComp = AtomComp;
	Parms.SyncPlaybackSpeed = SyncPlaybackSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_BattleSoundManager.BPI_BattleSoundManager_C.BI_RememberCurrentBGM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*                    PrevBattleBGM                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoUse                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_BattleSoundManager_C::BI_RememberCurrentBGM(class USoundAtomCue* PrevBattleBGM, bool* NoUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_BattleSoundManager_C", "BI_RememberCurrentBGM");

	Params::BPI_BattleSoundManager_C_BI_RememberCurrentBGM Parms{};

	Parms.PrevBattleBGM = PrevBattleBGM;

	UObject::ProcessEvent(Func, &Parms);

	if (NoUse != nullptr)
		*NoUse = Parms.NoUse;
}

}

